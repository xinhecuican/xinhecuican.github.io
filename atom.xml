<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinhecuican&#39;s Blog</title>
  
  
  <link href="https://xinhecuican.github.io/atom.xml" rel="self"/>
  
  <link href="https://xinhecuican.github.io/"/>
  <updated>2021-07-11T08:19:59.394Z</updated>
  <id>https://xinhecuican.github.io/</id>
  
  <author>
    <name>星河璀璨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>qt 选择器</title>
    <link href="https://xinhecuican.github.io/post/fc53134f.html"/>
    <id>https://xinhecuican.github.io/post/fc53134f.html</id>
    <published>2021-07-11T06:36:00.000Z</published>
    <updated>2021-07-11T08:19:59.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>qt的选择器中共有</p><ul><li>通用选择器(*): 作用于所有widget</li><li>类型选择器： 作用于该类及子类</li><li>类选择器： 只作用于这个类</li><li>ID选择器： 作用于某个对象</li><li>属性选择器： 作用域某个成员变量</li><li>包含选择器： 作用于某个类下的类</li><li>子元素选择器： 作用于某个类的直接子widget</li><li>伪类选择器： 选择某些状态，如QPushButton的hover和pressed状态</li><li>子控件选择器： 选择某个部件下面的子部件</li></ul><p>qss内部数属性一般是不区分大小写的，但是类名，属性名区分大小写</p><p>加载方法</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QFile</span> <span class="selector-tag">qss</span>(&quot;<span class="selector-tag">StyleSheet</span><span class="selector-class">.qss</span>&quot;);</span><br><span class="line"><span class="selector-tag">qss</span><span class="selector-class">.open</span>(<span class="selector-tag">QFile</span><span class="selector-pseudo">::ReadOnly)</span>;</span><br><span class="line"><span class="selector-tag">app</span><span class="selector-class">.setStyleSheet</span>(<span class="selector-tag">qss</span><span class="selector-class">.readAll</span>());</span><br><span class="line"><span class="selector-tag">qss</span><span class="selector-class">.close</span>();</span><br></pre></td></tr></table></figure><h1 id="类型-类-id选择器"><a class="markdownIt-Anchor" href="#类型-类-id选择器"></a> 类型、类、ID选择器</h1><p><strong>类型选择器</strong></p><p>格式</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">className</span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">    attribute:</span> value;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中attribute是控件的各种属性，className是类名，由QObject::metaObject()::className获得。类型选择器匹配该类及其派生类</p><p>例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QPushButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在自定义的命名空间中，QObject::className()返回值中有::，和子控件选择器冲突。为了避免这个问题，我们可以把::换成–</p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="symbol">ns</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="symbol">MyPushButton</span> : <span class="symbol">public</span> <span class="symbol">QPushButton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">qApp-&gt;setStyleSheet(<span class="string">&quot;ns--MyPushButton &#123;background: yellow; &#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>类选择器</strong></p><p>类选择器和前面的区别是它不会选择子类。格式为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.className</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">attribute</span>: value; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line"><span class="selector-class">.QFrame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ID选择器</strong></p><p>ID选择器选择的是对象的某个具体实例.格式为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#ID</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">attribute</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID选择器会对所有同名的实例进行配置，无论它的类型是什么，而很多时候我们只想对某一个实例进行配置，因此一般前面需要加上类名匹配</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QPushButton</span><span class="selector-id">#settings_popup_fileDialog_button</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">31px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F</span>OFOFO;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">qlineargradient</span>(spread: pad, x1:<span class="number">0</span>,y1:<span class="number">0</span>,x2:<span class="number">0</span>,y2:<span class="number">1</span>,stop:<span class="number">0</span> #<span class="number">454648</span>,stop:<span class="number">1</span> #<span class="number">7</span>A7A7A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包含-子元素选择器"><a class="markdownIt-Anchor" href="#包含-子元素选择器"></a> 包含、子元素选择器</h1><p><strong>包含选择器</strong></p><p>格式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">selector1</span> <span class="selector-tag">selector2</span> ...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">attribute</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它表示在selector1匹配的对象中，使用selector2进行筛选，然后对满足条件的对象进行匹配。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">BaseDialog</span> <span class="selector-tag">QPushButton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子选择器</strong></p><p>格式: <code>selector1&gt;selector2 &#123; attribute: value; &#125;</code></p><p>子选择器和上面的包含选择器相比多了一层限制，它只能有selector1和selector2，不能出现seelector3乃至更多。</p><p>它常用于对某些布局下特定控件进行选择</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.QGroupBox</span>&gt;<span class="selector-class">.QCheckBox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="属性-伪类-子控件选择器"><a class="markdownIt-Anchor" href="#属性-伪类-子控件选择器"></a> 属性、伪类、子控件选择器</h1><p><strong>属性选择器</strong></p><p>格式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute=value]</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attribute">attribute</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它先根据某些样式进行选择，然后修改样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[objectName|=<span class="string">&quot;button&quot;</span>]</span>//<span class="selector-tag">objectName</span>以<span class="selector-tag">button</span>开头</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">QPushButton</span><span class="selector-attr">[flat=“false”]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性选择器用的计较少</p><p><strong>伪类选择器</strong></p><p>格式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">类或类型选择器<span class="selector-pseudo">:status</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">attribute</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪类选择器是对某些状态进行选择，如按下、禁用、启用等</p><table><thead><tr><th>伪类</th><th>说明</th></tr></thead><tbody><tr><td>:disabled</td><td>控件禁用时</td></tr><tr><td>:enabled</td><td>…</td></tr><tr><td>:focus</td><td>获得焦点时</td></tr><tr><td>:hover</td><td>鼠标放在widget上时</td></tr><tr><td>:pressed</td><td>…</td></tr><tr><td>:checked</td><td>被选中时</td></tr><tr><td>:unchecked</td><td>未选中时</td></tr><tr><td>…</td><td></td></tr></tbody></table><p><strong>子控件选择器</strong></p><p>子控件选择器是对某些复杂控件中的小部件进行设置，这一般是对官方给的控件中某些部分进行管理。</p><p>例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QComboBox</span><span class="selector-pseudo">::down-arrow</span>//<span class="selector-tag">QComBox</span>的向下箭头</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">image</span>: <span class="built_in">url</span>(down-arrow.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">QComboBox</span><span class="selector-pseudo">::down-arrow</span><span class="selector-pseudo">:pressed</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>; <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://qtdebug.com/qtbook-qss-subcontrol/">子控件选择器可以看这</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;qt的选择器中共有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用选择器(*): 作用于所有</summary>
      
    
    
    
    <category term="c++" scheme="https://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>js异步编程</title>
    <link href="https://xinhecuican.github.io/post/748b5171.html"/>
    <id>https://xinhecuican.github.io/post/748b5171.html</id>
    <published>2021-07-07T12:15:45.000Z</published>
    <updated>2021-07-12T13:11:22.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="期约"><a class="markdownIt-Anchor" href="#期约"></a> 期约</h1><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><p>期约类似于事件处理。例如</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="constructor">Promise((<span class="params">resolve</span>, <span class="params">reject</span>)</span> =&gt; &#123;&#125;);</span><br><span class="line">set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, <span class="params">p1</span>)</span>;</span><br><span class="line">timeout的三个参数第一个是执行的函数，第二个是等待的时间，后面的都是函数的参数</span><br></pre></td></tr></table></figure><p>他和普通的timeout的区别在于它可以通过函数设置参数，从而异步决定某些函数是否执行及这些函数的参数。</p><p>期约具有三种状态： 待定(pending)、兑现/解决(resolved)、拒绝(rejected)</p><p>在待定状态下，期约可以落定，一旦跳转到解决或拒绝状态就不能再变化。</p><ul><li>Promise((resolve, reject) =&gt; {…})： reslove和reject是跳转到解决或拒绝状态的函数。两个函数都可以传递一个参数，resolve的参数表示解决期约的值（感觉有点像返回值）。reject的参数表示拒绝的理由。<strong>此外，reject还会抛出一个异常</strong></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">Promise(()</span> =&gt; set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, &#x27;<span class="params">executor</span>&#x27;)</span>);</span><br><span class="line">set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, &#x27;<span class="params">promise</span> <span class="params">initialized</span>&#x27;)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//executor</span></span><br><span class="line"><span class="comment">//promise initialized</span></span><br></pre></td></tr></table></figure><p>异步的执行器是同步执行的，所以executor在promise initialized前面输出。</p><p>reject抛出的异常是不能被常规的try/catch捕获的，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;bar&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 Uncaught (in promise) Error: bar</span></span><br></pre></td></tr></table></figure><h2 id="thencatch"><a class="markdownIt-Anchor" href="#thencatch"></a> then，catch</h2><h3 id="then"><a class="markdownIt-Anchor" href="#then"></a> then</h3><p>Promise.prototype.then()可以为期约添加处理程序。也就是receive和reject的处理程序。例如：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>));</span><br><span class="line">let p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">3000</span>));</span><br><span class="line">p1.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p1&quot;</span>)), <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p1&quot;</span>));</span><br><span class="line">p2.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p2&quot;</span>)), <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p2&quot;</span>));</span><br><span class="line">三秒后输出</span><br><span class="line">p1 resolved</span><br><span class="line">p2 rejected</span><br></pre></td></tr></table></figure><ul><li>Promise then(onresolve, onreject): 两个参数必须是函数类型，如果不需要onresolve可以传null。返回值是一个新的期约实例。这个期约实例是<strong>根据期约的状态创建的</strong>如果是解决状态那么会调用onresolve。<strong>如果原来是pending那么两个函数都不会执行</strong>。如果没有提供处理程序，那么会直接返回上一个期约的处理值。如果没有onResolve中没有显式的处理程序，那么会返回undefined。</li></ul><p>新的期约默认是解决状态，如果在then中返回一个新的期约并且是pending状态那么返回也是pending状态。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>resolve(&#x27;foo&#x27;);<span class="comment">//直接抛出解决的期约</span></span><br><span class="line"><span class="keyword">let</span> p2 = p1.<span class="keyword">then</span><span class="literal">()</span>;</span><br><span class="line">set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, <span class="params">p2</span>)</span>;<span class="comment">//Promise&lt;resolved&gt;: foo(没有处理程序会返回上一个期约的返回值)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = p1.<span class="keyword">then</span>(<span class="literal">()</span>=&gt;&#x27;bar&#x27;);<span class="comment">//bar</span></span><br><span class="line">set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, <span class="params">p3</span>)</span>;<span class="comment">//Promise&lt;resolved&gt;: bar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = p1.<span class="keyword">then</span>(<span class="literal">()</span>=&gt; <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>reject<span class="literal">()</span>);</span><br><span class="line"><span class="comment">//Uncaught (in promise): undefined</span></span><br><span class="line">set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, <span class="params">p4</span>)</span>;<span class="comment">//Promise&lt;rejected&gt;: undefined</span></span><br></pre></td></tr></table></figure><p>他直接运行resolve函数，可以在resolve函数中决定期约的状态。如果在resolve中抛出错误，则会调用rejected函数</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">let p1 = p.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">throw</span> <span class="string">&#x27;baz&#x27;</span>&#125;);</span><br><span class="line">//Uncaught (<span class="keyword">in</span> promise) baz</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1);//<span class="built_in">Promise</span>&lt;rejected&gt; baz</span><br><span class="line">但是如果返回错误值结果是resolved状态</span><br><span class="line">let p2 = p.<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Error</span>(<span class="string">&#x27;qux&#x27;</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2);//<span class="built_in">Promise</span>&lt;resolved&gt;: Error: qux</span><br></pre></td></tr></table></figure><p>期约一旦落定，由这个期约所产生的期约都会延迟到当前线程同步代码的末尾执行。例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);resolve();&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = p.then(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">输出为</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果有多个期约进入了接收或拒绝状态，那么他们后面的顺序按照代码顺序来</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>resolve<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>reject<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">p1.<span class="keyword">then</span>(<span class="literal">()</span>=&gt; set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, 1)</span>);</span><br><span class="line">p2.<span class="keyword">then</span>(<span class="literal">()</span>=&gt; set<span class="constructor">Timeout(<span class="params">console</span>.<span class="params">log</span>, 0, 2)</span>);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>如果前面的状态是reject，那么后面会调用onreject函数，并且返回期约的状态是resolve，因为你对reject状态进行处理</p></blockquote><h3 id="catch"><a class="markdownIt-Anchor" href="#catch"></a> catch</h3><p>catch是一个语法糖，它相当于只有onRejected处理程序</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.reject();</span><br><span class="line"><span class="keyword">let</span> onRejected = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, rejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, onRejected);<span class="comment">//rejected</span></span><br><span class="line">p.catch(onRejected);<span class="comment">//rejeected</span></span><br><span class="line"><span class="comment">//二者相同</span></span><br></pre></td></tr></table></figure><p><strong>finally</strong></p><p>Promise.prototype.finally()用来添加onFinally程序，他在解决或拒绝状态都会触发，但是他没法知道事解决还是拒绝状态，因此一般只用来清理代码。</p><p>和前面的then不同，它在大多数情况下都会原样后传父期约，而不会改变他。</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">let p1 = p.<span class="keyword">finally</span>();</span><br><span class="line">let p2 = p.<span class="keyword">finally</span>(<span class="function"><span class="params">()</span>=&gt;</span><span class="literal">undefined</span>);</span><br><span class="line">let p3 = p.<span class="keyword">finally</span>(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1);</span><br><span class="line">...</span><br><span class="line"><span class="regexp">//</span>三个的返回值都是<span class="built_in">Promise</span> &lt;resolved&gt;: foo</span><br></pre></td></tr></table></figure><p>如果返回待定期约或者出现错误则会返回相应的期约</p><h2 id="期约连锁和期约合成"><a class="markdownIt-Anchor" href="#期约连锁和期约合成"></a> 期约连锁和期约合成</h2><p>期约连锁是让多个期约依次执行。也就是使用多个then。</p><p>例如:</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1 executor&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p2 executor&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>);</span><br><span class="line">&#125;)).<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p3&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>这样比较直观，但是如果不使用期约也可以实现类似功能</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">function delay(str, callback=<span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">        callback &amp;&amp; callback();</span><br><span class="line">    ), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay(<span class="string">&#x27;p1&#x27;</span>, <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    delay(<span class="string">&#x27;p2&#x27;</span>, <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        delay(<span class="string">&#x27;p3&#x27;</span>, <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            delay(<span class="string">&#x27;p4&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一个契约可以由任意多个处理程序，我们可以使用有向图进行描述</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  A</span><br><span class="line"> &#x2F; \</span><br><span class="line">B   C</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>Promise.all()</strong></p><p>Promise.all会在所有期约解决之后再解决。例如</p> <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p = <span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>);</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p);</span><br><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;all&#x27;</span>);</span><br></pre></td></tr></table></figure><p>只要有一个拒绝，那么最终的期约就是拒绝状态，返回值是第一个拒绝期约的理由</p><p><strong>Promise.race()</strong></p><p>返回一组期约中最先解决期约的镜像。</p> <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"> let p = <span class="built_in">Promise</span>.race([</span><br><span class="line">     <span class="built_in">Promise</span>.resolve(<span class="number">3</span>),</span><br><span class="line">     <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span>=&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>))]);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p);//<span class="built_in">Promise</span>&lt;resolved&gt;: <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="期约扩展"><a class="markdownIt-Anchor" href="#期约扩展"></a> 期约扩展</h2><p><strong>期约取消</strong></p><p>期约是内部封闭的，我们无法决定它是什么时候停止。但是也有一些方法突破这个障碍</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cancel</span></span></span><br><span class="line">&#123;</span><br><span class="line">    constructor(cancelfn)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span>=&gt;</span>&#123;</span><br><span class="line">            cancelfn(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;delay cancel&#x27;</span>);</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const startButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#start&#x27;</span>);</span><br><span class="line">const cancelButton =<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#cancel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">function cancellabelDelayedResolve(delay)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;set delay&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span>=&gt;</span>&#123;</span><br><span class="line">        const id = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;delayed resolve&#x27;</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        )), delay);</span><br><span class="line">        const cancel = <span class="keyword">new</span> Cancel(<span class="function"><span class="params">(cancelCallback)</span>=&gt;</span></span><br><span class="line">        cancelButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, cancelCallback));</span><br><span class="line">        cancel.promise.<span class="keyword">then</span>(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">clearTimeout</span>(id));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>期约进度通知</strong></p><p>基本思想是首先添加notify函数，然后在合适的时刻执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extendPromise</span> <span class="keyword">extends</span> <span class="title">Promise</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">executor</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> notifyHandlers = [];</span><br><span class="line">        <span class="built_in">super</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> executor(resolve, reject, <span class="function">(<span class="params">status</span>)=&gt;</span>&#123;</span><br><span class="line">            notifyHandlers.map(<span class="function">(<span class="params">handler</span>)=&gt;</span>handler(status));<span class="comment">//执行每一个notify</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    notify(notifyHandler)<span class="comment">//添加notify函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.notifyHandlers.push(notifyHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> extendPromise(<span class="function">(<span class="params">resolve, reject, notify</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params">x</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            notify(<span class="string">`<span class="subst">$&#123;<span class="number">20</span> * x&#125;</span>&amp; remaining`</span>);<span class="comment">//对每一个notify函数传该字符串</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>countdown(x - <span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    countdown(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="异步函数"><a class="markdownIt-Anchor" href="#异步函数"></a> 异步函数</h1><p>格式：</p><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">async function foo()</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = async function()<span class="meta">&#123;...&#125;</span>;</span><br><span class="line"><span class="keyword">let</span> baz = async ()=&gt;();</span><br><span class="line">class <span class="type">Qux</span></span><br><span class="line">&#123;</span><br><span class="line">    async qux()<span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他和普通函数的区别是如果它使用return返回了值那么返回值将会由Promise.resolve()包装成期约。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3(延迟执行</span></span><br></pre></td></tr></table></figure><p>如果抛出错误会返回拒绝的期约</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.catch(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">但是如果在函数内部出现拒绝期约，这个错误不会被异步函数捕获</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.reject(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo.catch(conosole.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//Uncaught(in promise): 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;期约&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js 代理和反射</title>
    <link href="https://xinhecuican.github.io/post/6a44c331.html"/>
    <id>https://xinhecuican.github.io/post/6a44c331.html</id>
    <published>2021-07-05T11:15:00.000Z</published>
    <updated>2021-07-07T12:15:15.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="代理基础"><a class="markdownIt-Anchor" href="#代理基础"></a> 代理基础</h1><p>代理是目标对象的抽象。代理类似于c++的指针，可以通过代理操作对象，但是它又是一个独立的变量。在代理上的修改会反映到目标对象上，在目标对象上的修改也会对代理起作用</p><p><strong>创建</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = </span><br><span class="line">&#123;</span><br><span class="line">    id: <span class="string">&#x27;target&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);<span class="comment">//两个参数，第一个是操作的对象，第二个是处理程序对象，用来定义捕获器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id);<span class="comment">//target</span></span><br><span class="line"></span><br><span class="line">可以通过revocable()定义撤销代理，并且还可以通过一个返回值进行撤销,撤销完成后再使用代理会产生异常</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;<span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123; <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">&#x27;intercepted&#x27;</span>;&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(traget, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);<span class="comment">//intercepted</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);<span class="comment">//bar</span></span><br><span class="line"></span><br><span class="line">revoke();<span class="comment">//执行撤销，是Proxy.revocable的一个返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);</span><br></pre></td></tr></table></figure><p><strong>代理的一些不足</strong></p><p>由于代理和原对象毕竟是两个对象，所以在涉及this时可能会出现问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = ew <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">user_id</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wm.set(<span class="built_in">this</span>.user_id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> <span class="title">id</span>(<span class="params">user_id</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wm.set(<span class="built_in">this</span>, user_id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> <span class="title">id</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        wm.get(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.id);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInstanceProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(userInstanceProxy.id);<span class="comment">//undefine</span></span><br><span class="line">这是因为user和userInstanceProxy对象不同，因此<span class="built_in">this</span>不同，导致无法检索</span><br></pre></td></tr></table></figure><h2 id="捕获器trap"><a class="markdownIt-Anchor" href="#捕获器trap"></a> 捕获器（trap）</h2><p>使用代理主要就是为了定义捕获器。捕获器<strong>是target中基本操作的拦截器</strong>。每次调用代理时，首先会调用捕获器函数，从而进行拦截和修改。捕获器类似于sql中的触发器</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = </span><br><span class="line">&#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler =</span><br><span class="line">&#123;</span><br><span class="line">    get()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;handler override&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);<span class="comment">//handler override</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="string">&#x27;foo&#x27;</span>]);<span class="comment">//handler override</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.create(proxy)[<span class="string">&#x27;foo&#x27;</span>]);<span class="comment">//handler override</span></span><br></pre></td></tr></table></figure><p>通过定义get()捕获器，之后每次执行get操作时，都会触发get捕获器.诸如<code>.</code>、<code>[]</code>等操作都认为是get操作。但是在原对象上执行的操作不受影响。</p><p>捕获器可以访问当前是在操作哪个变量，从而执行相应的操作，例如</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler =</span><br><span class="line">&#123;</span><br><span class="line">    get(rapTarget, <span class="keyword">property</span><span class="string"></span>, receiver)<span class="comment">//trapTarget是代理的目标对象，receiver是代理自己</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(trapTarget === target);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">property</span><span class="string">)</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(receiver === proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.foo;<span class="comment">//true, foo, true</span></span><br></pre></td></tr></table></figure><p><strong>捕获器不变式</strong></p><p>捕获器可以捕获大部分基本操作，但是有一些操作会导致异常。捕获器不变式就是保证不会出现异常的约束。</p><p>例如：目标对象有一个不可写的属性，如果捕获器中返回了一个其他值，那么就会出现TypeError</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(target, <span class="string">&#x27;foo&#x27;</span>,&#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = </span><br><span class="line">&#123;</span><br><span class="line">    get()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;qux&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);<span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure><p>捕获器总共可以捕获13种基本操作</p><p><strong>get()</strong></p><p>get会拦截获取属性值的操作，对应的反射方法为Reflect.get()</p><ul><li>get(target, property, receiver): target是目标对象，property是操作属性的名字，receiver是带你对象</li></ul><p>拦截的操作有:</p><ul><li>proxy.property</li><li>proxy[property]</li><li>Object.create(proxy)[property]</li><li>Reflect.get(proxy, property, receiver)//反射是调用原函数</li></ul><p><strong>set</strong></p><p>set拦截设置属性值的操作，反射方法为Reflect.set()</p><ul><li>bool set(target, property, value, receiver): value是设置的值，返回值为true代表操作成功，false表示操作失败</li></ul><p>拦截的操作：</p><ul><li>proxy.property = value</li><li>proxy[property] = value</li><li>Object.create(proxy)[property] = value</li><li>Reflect.set(proxy, property, value, receiver)</li></ul><p>捕获器不变式(约束):</p><ul><li>如果target的property不可写且不可配置，则不能修改目标属性的值</li><li>如果target.property不可配置并且[[Set]]为undefined，则不能修改属性值</li></ul><p><strong>has</strong></p><p>has会捕获in操作符中的操作，反射为Reflect.has()</p><ul><li>bool has(target, property): 返回值表示这个属性是否存在</li></ul><p>拦截的操作：</p><ul><li>property in proxy</li><li>property in Object.create(proxy)</li><li>with(proxy) { (property);}</li><li>Reflect.has(proxy, property);</li></ul><p>不变式：</p><ul><li>如果target.property存在且不可配置，则必须返回true</li><li>target.property存在且目标对象不可扩展（不能添加新的属性，通过Object.preventExtensions(object)设置),则必须返回true</li></ul><p><strong>defineProperty</strong></p><p>拦截Object.defineProperty(),反射方法为Reflect.defineProperty()</p><ul><li>bool defineProperty(target, property, descriptor): 返回值表示是否成功定义。descriptor有enumrable、configurable、writable、value、get、set</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> my Target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">    defineProperty(target, property, descriptor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.defineProperty(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不变式：</p><ul><li>如果目标对象不可扩展，则无法定义属性</li><li>如果有一个可配置属性，不可添加同名的不可配置属性</li><li>如果有一个不可配置属性，不可添加同名的配置属性</li></ul><p><strong>getWonPropertyDescriptor</strong></p><p>捕获Object.getOwnPropertyDescriptor()。反射方法为Relfect.getOwnPropertyDescriptor()</p><ul><li>Object getOwnPropertyDescriptor(target, property): 返回描述对象，如果对象不存在则返回undefined</li></ul><p>不变式：</p><ul><li>target.property存在且可配置，这必须返回对应对象</li><li>target.property存在且target不可扩展，则处理程序必须返回一个表示该属性存在的对象</li><li>target.property不存在，则返回undefined</li></ul><p><strong>deleteProperty</strong></p><p>会在delete操作符中调用，对应的反射方法为Reflect.deleteProperty()</p><ul><li>bool deleteProperty(target, property): 返回值表示删除属性是否成功</li></ul><p>不变式：</p><ul><li>如果target.property存在且不可配置，则处理程序不能删除这个属性</li></ul><p><strong>onwKeys</strong></p><p>拦截Object.keys()（返回对象属性的属性名）,反射方法为Reflect.ownKeys()</p><ul><li>list ownKyes(target): 返回可枚举对象</li></ul><p>不变式：</p><ul><li>返回的枚举对象必须包含所有的不可配置的自有属性</li><li>如果对象不可扩展，则返回可枚举对象必须准确包含自有属性键</li></ul><p><strong>getPrototypeOf</strong></p><p>捕获获得prototype的操作。反射API为Reflect.getPrototypeOf()</p><ul><li>object getPrototypeOf(target): 返回值是原型对象或者是NULL</li></ul><p>拦截的操作：</p><ul><li>Object.getPrototypeOf(proxy)</li><li>Reflect.getPrototypeOf(proxy)</li><li><code>proxy.__proto__</code></li><li>Object.prototype.isPrototypeOf(proxy)</li><li>proxy instanceof Object</li></ul><p>捕获器不变式：</p><ul><li>如果target不可扩展，则唯一有效的返回值是Object</li></ul><p><strong>setPrototypeOf</strong></p><p>捕获Object.setPrototypeOf(),反射的API为Reflect.setPrototypeOf()</p><ul><li>bool setPrototypeOf(target, prototype): 返回值表示设置是否成功</li></ul><p>不变式：</p><ul><li>如果target不可扩展，则唯一有效的参数是这个对象的原型</li></ul><p><strong>isExtensible</strong></p><p>捕获Object.isExtensible，反射API为Reflect.isExtensible()</p><ul><li>bool isExtensible(target): 返回值表示target是否可扩展</li></ul><p>不变式：</p><ul><li>如果target可扩展，则处理程序必须返回true</li><li>如果target不可扩展，则处理程序必须返回false</li></ul><p><strong>preventExtensions</strong></p><p>…</p><p>返回值表示target是否已经不可扩展</p><p>不变式： 如果Object.isExtensible(proxy)是false，那么处理程序必须返回true</p><p><strong>apply</strong></p><p>它会在调用函数时调用，反射方法为Reflect.apply()</p><ul><li>apply(target, thisArg, argumentsList): thisArg是调用函数时的this参数，返回值任意</li></ul><p>拦截的操作：</p><ul><li>proxy(…argumentList)</li><li>Fuction.prototype.apply(thisArg, argumentList)</li><li>Function.prototype.call(thisArg, …argumentsList)</li><li>Reflect.apply(target, thisArgument, argumentList)</li></ul><p>不变式：</p><ul><li>target必须是一个函数对象</li></ul><p><strong>construct</strong></p><p>它会在new操作符中被调用，反射方法为Reflect.construct()</p><ul><li>Object construct(target, argumentsList, newTarget): target是目标构造函数，newTarget是最初被调用的构造函数（可能子类调用了父类的构造函数）。返回值是构造完成的对象</li></ul><p>不变式：</p><ul><li>target必须可以被用作构造函数</li></ul><h2 id="代理的应用"><a class="markdownIt-Anchor" href="#代理的应用"></a> 代理的应用</h2><p><strong>跟踪属性访问</strong></p><p>我们可以通过捕获get、set和has等操作，对对象进行监控</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = </span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;Jake&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span><br><span class="line">    get(target, property, receiver)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;getting $&#123;property&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    set(target, property, value, receiver)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;setting $&#123;property&#125;=$&#123;value&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name;<span class="comment">//getting name</span></span><br><span class="line">proxy.age = <span class="number">27</span> <span class="comment">// setting age=27</span></span><br></pre></td></tr></table></figure><p><strong>隐藏属性</strong></p><p>因为代理内部对外部代码是不可见的，所以可以很方便的隐藏对象属性.此外，还可以通过set拒绝属性访问，通过apply对函数参数进行审查。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hidden = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> targetObject = </span><br><span class="line">&#123;</span><br><span class="line">   foo: <span class="number">1</span>,</span><br><span class="line">   bar: <span class="number">2</span>,</span><br><span class="line">   baz: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObject, &#123;</span><br><span class="line">    get(target, property)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hidden.includes(property))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>数据绑定</strong></p><p>可以在构造时就添加入列表，避免错误。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = []</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">name</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name_ = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> newUser = <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">        list.push(newUser);</span><br><span class="line">        <span class="keyword">return</span> newUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h1><p>在java或c#语言中，反射的含义是通过函数名字字符串找到对应的函数.例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = </span><br><span class="line">&#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = </span><br><span class="line">&#123;</span><br><span class="line">    get()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);<span class="comment">//通过Reflect.get反射到了target的get方法并且可以直接访问原对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);<span class="comment">//bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);<span class="comment">//bar</span></span><br><span class="line"></span><br><span class="line">我们可以使用这种方法获得本应该获得的结果，并且还可以加上一些修饰，例如</span><br><span class="line">get()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments) + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;代理基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js迭代器和生成器</title>
    <link href="https://xinhecuican.github.io/post/1931a47d.html"/>
    <id>https://xinhecuican.github.io/post/1931a47d.html</id>
    <published>2021-07-04T10:29:00.000Z</published>
    <updated>2021-07-04T13:10:27.008Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h1><p>在很多语言中都有迭代器，例如</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">QList&lt;int&gt;::iterator iter = list.begin();</span><br><span class="line"><span class="keyword">while</span>(iter != list.end())</span><br><span class="line">&#123;</span><br><span class="line">    iter = iter-&gt;next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在js中</span><br><span class="line">let <span class="builtin-name">set</span> = new <span class="builtin-name">Set</span>().<span class="builtin-name">add</span>(3).<span class="builtin-name">add</span>(1).<span class="builtin-name">add</span>(4)</span><br></pre></td></tr></table></figure><p>通过上面的例子可以看出，迭代器的关键是不断返回一个相同类型的不同实例。在js中，实现Iterable接口就可以认为是一个迭代器。<strong>迭代器</strong>是按需创建的一次性对象，每个迭代器都会关联一个可迭代对象，而迭代器会暴露迭代其关联对象的API（例如next）</p><p>实现Iterator接口需要实现两种能力： 自我识别能力和创建实现Iterator接口的对象的能力。这意味着需要暴露一个属性作为默认迭代器，并且这个属性还要以Symbol.iterator作为键。默认迭代器必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。</p><p>常见的实现了Iterator接口的类：字符串、数组、map、set、arguments、NodeList</p><p>可以使用for-of循环、数组解构、Array.from()等对迭代器进行遍历</p><h2 id="自定义迭代器"><a class="markdownIt-Anchor" href="#自定义迭代器"></a> 自定义迭代器</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(limit)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    next()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.count &lt;= <span class="keyword">this</span>.limit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;done: <span class="literal">false</span>, value: <span class="keyword">this</span>.count++&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;done:<span class="literal">true</span>, value: undefined&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [Symbol.iterator]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述类实现了迭代器，首先我们可以使用iterator获得迭代类，并且next可以用来返回下一个对象。</p><p>但是这种方法并不理想，因为每个实例只能够被迭代一次。为了可以迭代多次，可以创建一个计数器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">limit</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> limit = <span class="built_in">this</span>.limit;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        &#123;</span><br><span class="line">            next()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(count &lt;= limit)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cont++&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，每次调用Symbol.iterator时数据总是会变为初始状态。</p><p><strong>提前终止</strong></p><p>可以增加return()来提前终止迭代器。在for-of循环中，可以通过break、continue、return或throw提前退出</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">limit</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> limit = <span class="built_in">this</span>.limit;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        &#123;</span><br><span class="line">            next()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(count &lt;= limit)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>, <span class="attr">value</span>: count++&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">return</span>()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成器"><a class="markdownIt-Anchor" href="#生成器"></a> 生成器</h1><p>构造: 在函数名称前加一个星号(*)来表示它是生成器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generatorFn = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = </span><br><span class="line">&#123;</span><br><span class="line">    * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">*号两边空格数目不影响解析</span><br></pre></td></tr></table></figure><h2 id="yield"><a class="markdownIt-Anchor" href="#yield"></a> yield</h2><p>调用生成器会产生一个生成器对象。这个对象实现了Iterator。每次调用next()都会跳转到下一个yield</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generator = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generator.next());<span class="comment">//foo</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.next());<span class="comment">//bar</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.next());<span class="comment">//baz</span></span><br></pre></td></tr></table></figure><p>每次执行到yield后就输出并停止执行，但是它的状态时保存的，下一次可以继续使用上一次yield中的变量。</p><p>碰到yield，next返回的done是false如果碰到return则done为true。即return终止迭代。</p><p>yield只有在生成器函数内部定义中有效，诸如闭包，内部函数等使用都会报错</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">yield</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="function">()=&gt;</span>&#123;<span class="keyword">yield</span>;&#125;)();</span><br><span class="line">&#125;</span><br><span class="line">上面两种都会报错</span><br></pre></td></tr></table></figure><p><strong>yield接收输入</strong></p><p>yield除了作为输出返回值使用，<strong>他还可以接收传给next的第一个值</strong>。但是第一次调用next输入的参数是无效的，这一次调用是为了启动生成器函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gene</span>(<span class="params">initial</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(initial);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generator = gene(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">generator(<span class="string">&#x27;bar&#x27;</span>);<span class="comment">//foo，是因为第一次执行到yield就停止，并且没有输入任何参数</span></span><br><span class="line">generator(<span class="string">&#x27;baz&#x27;</span>);<span class="comment">//baz,第一个yield接收这个参数</span></span><br><span class="line">generator(<span class="string">&#x27;qux&#x27;</span>);<span class="comment">//qux</span></span><br></pre></td></tr></table></figure><p>yield可以同时用于输入和输出</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let gene = generator();</span><br><span class="line"></span><br><span class="line">gene.<span class="built_in">next</span>();//foo,做输出用</span><br><span class="line">gene.<span class="built_in">next</span>(<span class="string">&quot;bar&quot;</span>);//bar,<span class="built_in">yield</span>接收输入并<span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>yield与*配合</strong></p><p>yield后面可以接*来多次返回值，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">yield</span>* [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">yield</span>* [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> gene())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);<span class="comment">//1, 2, 3, 4, 5, 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用这个很方便的实现递归操作</p><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">function</span> <span class="function"><span class="title">nTimes</span>(<span class="variable">n</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="variable">n</span> &gt; <span class="number">0</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">yield</span>* <span class="function"><span class="title">nTimes</span>(<span class="variable">n</span> - <span class="number">1</span>);</span></span><br><span class="line"><span class="function">        <span class="variable">yield</span> <span class="variable">n</span> - <span class="number">1</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="variable">const</span> <span class="variable">x</span> <span class="variable">of</span> <span class="title">nTimes</span>(<span class="number">3</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">console.log</span>(<span class="variable">x</span>);<span class="comment">//0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">过程为</span><br><span class="line"><span class="function"><span class="title">nTimes</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="function"><span class="title">nTimes</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="function"><span class="title">nTimes</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="function"><span class="number">0</span></span></span><br><span class="line"><span class="function"><span class="number">1</span></span></span><br><span class="line"><span class="function"><span class="number">2</span></span></span><br></pre></td></tr></table></figure><p>也可以使用这种方法为类添加迭代器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span>* <span class="built_in">this</span>.values;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提前终止生成器"><a class="markdownIt-Anchor" href="#提前终止生成器"></a> 提前终止生成器</h2><p>所有的生成器都有return()方法，他会直接让生成器进入关闭状态，并且之后都无法恢复。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">//&#123;done:false, value: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">4</span>));<span class="comment">//&#123;done:true, value: 4&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g);<span class="comment">//generatorFn&#123;&lt;closed&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>此外，还可以通过throw将错误抛出，如果错误未被处理，生成器将关闭.但是如果生成器函数内部处理了这个错误，那么生成器不会关闭</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = gene();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">//1</span></span><br><span class="line">g.throw(<span class="string">&#x27;foo&#x27;</span>);产生错误但是生成器内部接住了</span><br><span class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">//3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>c++ 两个类互相引用</title>
    <link href="https://xinhecuican.github.io/post/cbf07f5d.html"/>
    <id>https://xinhecuican.github.io/post/cbf07f5d.html</id>
    <published>2021-06-23T11:04:00.000Z</published>
    <updated>2021-06-23T11:26:38.095Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>两个类互相引用如</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_data</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_b</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------b.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_data</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_A</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看看上面的过程。加入首先发现a.h,然后根据a.h把b.h拖进来，然后根据b.h把a.h拖进来，这样就会无限的互相引用而导致报错。</p><p>我们可以使用声明提前的方法解决这个问题</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_data</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_b</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">---------------------b.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _B_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _B_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span><span class="comment">//只是声明没有定义，因此只能使用指针。因为如果是一个完整的类的话需要知道大小</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line">    ~B();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_data</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_a</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A* a;<span class="comment">//使用指针</span></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#endef</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------a.cpp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    b = B();</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::print_b</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.get_data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_data</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> sum;&#125;</span><br><span class="line"></span><br><span class="line">--------------------b.cpp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是必须是include a,因为开始只定义了class A这一个符号，里面有什么函数我们都不知道，通过include a.h我们才知道A的函数</span></span><br><span class="line"><span class="comment">并且include a.h的同时也include b.h，因为a.h中有include b.h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="keyword">new</span> A();</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B::print_a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a-&gt;get_data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">B::get_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上这只是一种权宜之计，出现循环定义本身就代表了代码写的有问题，他容易带来一些不易察觉的问题。</p><p>例如<br />B中引用了A，并且A使用new新建了若干个b的变量。然后在另一个类中A在一个list中，这时我们可能发现过一会B使用A会报错。</p><p>这是因为list中的变量经常创建和销毁，销毁时会执行拷贝。但是创建了新的A后B中A的指针还是指向原来被销毁的A，便会出现段错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;两个类互相引用如&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="c++" scheme="https://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>关联规则</title>
    <link href="https://xinhecuican.github.io/post/42e73f05.html"/>
    <id>https://xinhecuican.github.io/post/42e73f05.html</id>
    <published>2021-06-01T11:52:00.000Z</published>
    <updated>2021-06-01T13:25:17.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="引例"><a class="markdownIt-Anchor" href="#引例"></a> 引例</h1><p><strong>啤酒与尿布</strong></p><p>在一家超市里，有一个有趣的现象：尿布和啤酒赫然摆在一起出售。但是这个奇怪的举措却使尿布和啤酒的销量双双增加了。这不是一个笑话，而是发生在美国沃尔玛连锁店超市的真实案例，并一直为商家所津津乐道。沃尔玛拥有世界上最大的数据仓库系统，为了能够准确了解顾客在其门店的购买习惯，沃尔玛对其顾客的购物行为进行购物篮分析，想知道顾客经常一起购买的商品有哪些。沃尔玛数据仓库里集中了其各门店的详细原始交易数据。在这些原始交易数据的基础上，沃尔玛利用数据挖掘方法对这些数据进行分析和挖掘。</p><p>一个意外的发现是：&quot;跟尿布一起购买最多的商品竟是啤酒！经过大量实际调查和分析，揭示了一个隐藏在&quot;尿布与啤酒&quot;背后的美国人的一种行为模式：在美国，一些年轻的父亲下班后经常要到超市去买婴儿尿布，而他们中有30%～40%的人同时也为自己买一些啤酒。产生这一现象的原因是：美国的太太们常叮嘱她们的丈夫下班后为小孩买尿布，而丈夫们在买尿布后又随手带回了他们喜欢的啤酒。<br />按常规思维，尿布与啤酒风马牛不相及，若不是借助数据挖掘技术对海量交易数据进行挖掘和分析，沃尔玛是不可能发现数据内在这一有价值的规律的。</p><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>从上例可以看出某些看起来不具有关联的事务实际上也有关联，为了找到这些关联，首先定义一些符号。</p><p>关联规则是一个蕴含式 x=&gt;y。他表示当x出现时y也一定会出现。</p><p>当然这种情况是非常少的，一般带有一定概率，为了表示这种概率，我们定义了<strong>支持度</strong>进行表示：D（所有样本）中包含X、Y的数量和所有交易数之比，记为Support(x=&gt;y)或S</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mo stretchy="false">{</mo><mi>T</mi><mo>:</mo><mi>X</mi><mo>∩</mo><mi>Y</mi><mo stretchy="false">}</mo><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>D</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S = \frac{|\{T: X \cap Y\}|}{|D|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">}</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>置信度是D中包含X、Y的交易数和X的交易数之比，记为confidence(x=&gt;y)或C</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>S</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mo stretchy="false">{</mo><mi>T</mi><mo>:</mo><mi>X</mi><mo>∩</mo><mi>Y</mi><mo stretchy="false">}</mo><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>T</mi><mo>:</mo><mi>X</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">C = S = \frac{|\{T: X \cap Y\}|}{|T: X|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">}</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>支持度表示了这种类型在所有样本中出现的概率，如果概率太小表示这种情况出现很少，不具有代表性。而置信度表示了二者之间的联系，置信度越高联系越紧密。</p><p>关联规则就是要找支持度和置信度都大于某一范围的。</p><p>使用文字描述可以认为</p><figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">C = 同时购买商品<span class="keyword">X</span>和<span class="keyword">Y</span>的交易数/购买<span class="keyword">X</span>的交易数</span><br><span class="line">S = 同时购买<span class="keyword">X</span>和<span class="keyword">Y</span>的交易数/总交易数</span><br></pre></td></tr></table></figure><h1 id="apriori算法"><a class="markdownIt-Anchor" href="#apriori算法"></a> Apriori算法</h1><p>术语：</p><ul><li>频繁项集： 支持度大于最小支持度的项集</li></ul><p>规则：</p><ul><li>一个频繁项集的子集一定是频繁项集</li><li>一个非频繁项集的超集一定不是频繁项集</li><li>连接规则： 我们可以把两个部分相同项集相同的部分合并，变成一个项集。例如ABC和BCE可以合成ABCE</li></ul><p>例如：</p><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">第一次购买    AB</span><br><span class="line"><span class="number">2</span>          BCE</span><br><span class="line"><span class="number">3</span>          ABCE</span><br><span class="line"><span class="number">4</span>         AD</span><br><span class="line">假设置信度和支持度最少都要是<span class="number">50</span><span class="comment">%</span></span><br></pre></td></tr></table></figure><ol><li>首先选择只有一个的项集。A B C D E.其中D的支持度只有25%小于最小支持度，抛弃</li><li>从A、B、C、E中得到两个的项集，有AB、AC、AE、BC、BE、CE。其中AC、AE小于最小支持度，抛弃</li><li>使用连接规则得到ABC、ABE、BCE、ACE。其中AC不是频繁项，所以ABC不存在，同理可以排除ACE、ABE，只剩下BCE。而BCE是频繁项集，所以保留</li></ol><p>从上面我们可以看出，算法过程大致为：</p><ol><li>首先找一个元素的频繁项集</li><li>根据一个元素的频繁项集找到两个元素的频繁项集</li><li>在多于两个元素的频繁项集中，首先使用联接规则找到k+1个元素的项集，然后使用前两个规则进行剪枝，最后找到频繁项集</li><li>重复上述步骤直到不能产生新的项集</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;引例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="机器学习" scheme="https://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>js常用对象</title>
    <link href="https://xinhecuican.github.io/post/8e93d915.html"/>
    <id>https://xinhecuican.github.io/post/8e93d915.html</id>
    <published>2021-05-30T06:04:00.000Z</published>
    <updated>2021-07-03T13:32:12.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基本引用类型"><a class="markdownIt-Anchor" href="#基本引用类型"></a> 基本引用类型</h1><h2 id="date"><a class="markdownIt-Anchor" href="#date"></a> Date</h2><p>Date和java的Date类似，里面保存的是从1970年1月1日至今的毫秒数。</p><p><strong>创建</strong></p><ul><li>Date(date): 创建一个Date对象，包含创建时的时间.date是字符串形式的时间，格式可以参照parse()的格式</li><li>Date.now(): 返回当前时间的毫秒数</li><li>Date.parse(): 将其他格式的时间字符串转换为该日期的毫秒数,例如<code>let someDate = new Date(Date.parse(&quot;May 23, 2019&quot;));</code><ul><li>可以使用下列格式</li><li>月/日/年： 如&quot;5/23/2019&quot;</li><li>月名 日, 年： 如&quot;May 23, 2019&quot;</li><li>周几 月名 日 年 时:分:秒:时区，如&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;</li><li>YYYY-MM-DDTHH:mm:ss:sssZ,如&quot;2019-05-23T00:00:00</li></ul></li><li>Date.UTC(year, month, day, hour, minute, second):传入年、月(0-11)、日(1-31)、时(0-23)、分、秒并转化为毫秒数，如<code>let y2k = new Date(Date.UTC(2000, 0));</code></li></ul><p><strong>显示</strong></p><ul><li>toLocaleSting(): 输出类似于<code>2021/5/30 下午3:51:36</code></li><li>toString(): 输出为<code>Sun May 30 2021 15:51:36 GMT+0800 (中国标准时间)</code></li><li>toDateString(): 返回周几、月、日、年</li><li>toTimeString(): 返回时分秒和时区</li><li>toLocaleDateString(): 显示月日年</li><li>toLocaleTimeString(): 显示时分秒</li><li>toUTCString(): 显示完整的UTC时间</li></ul><p>还有一些获得单独时间的函数如getYear(),getDate()等可以从函数名得知意思就不再赘述。其中getTime()是获得毫秒的时间</p><h2 id="regexp"><a class="markdownIt-Anchor" href="#regexp"></a> RegExp</h2><p>RegExp是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a>，可以通过一些简单的语法创建。如<code>let expression = /pattern/flags</code></p><blockquote><p>pattern可以设置lastIndex表示下次从该index处开始</p></blockquote><p>其中pattern是任何正则表达式。每个正则表达式可以带零个或多个标记(flags),用于控制正则表达式的行为，常见的标记有</p><ul><li>g(global): 全局模式，查找所有匹配字符串，而不是匹配一个就结束.</li><li>i(ignoreCase): 不区分大小写</li><li>m(multiline): 多行模式，查找到一行文本末尾会继续查找</li><li>y(sticky): 粘附模式，表示查找从lastIndex开始的字符串</li><li>u(unicode): Unicode模式，启用Unicode匹配</li><li>s(dotAll): dotAll模式，匹配任意字符（如<code>\n\r</code>等)</li></ul><p>可以使用后面的全称来访问是否设置了这些标记</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">pattern</span><span class="selector-class">.global</span>);</span><br><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">pattern</span><span class="selector-class">.source</span>);//表达式的字面字符串</span><br><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">pattern</span><span class="selector-class">.flags</span>);所有标记</span><br></pre></td></tr></table></figure><p>除了使用字面量，还可以使用构造函数来创建。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[bc]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span>的模式参数时字符串，有些时候需要二次转义</span><br><span class="line"><span class="keyword">let</span> pattern3 = <span class="regexp">/\[bc\]at/</span></span><br><span class="line"><span class="keyword">let</span> pattern4 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>匹配</strong></p><p>使用RegExp进行匹配主要是exec(s)方法，方法的参例如：数是待匹配的字符串。如果成功，返回包含第一个匹配的数组，每个字符占一个位置。如果未成功，返回null。返回值虽然是数组，但是额外多加了index和input。index是匹配串中的起始位置，input是待匹配的字符串。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;mom and dad and baby&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);<span class="comment">//mom and data and baby</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]);<span class="comment">// and data and baby</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]);/ and baby</span><br></pre></td></tr></table></figure><p>每个括号表示一个捕获组，也就是第一个会匹配mom and dad and baby,第二个会匹配 and dad and baby.<a href="https://zh.javascript.info/regexp-groups#pi-pei-kuo-hao-zhong-de-nei-rong">有关捕获组可看这</a></p><p>如果使用了全局标记，那么一次匹配会显示一个匹配的信息，如果没有设置，那么只会返回第一个匹配信息。</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">text</span> = <span class="string">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = /.<span class="keyword">at</span>/g;</span><br><span class="line"><span class="keyword">let</span><span class="built_in"> matches</span> = pattern.exec(<span class="type">text</span>);</span><br><span class="line">console.log<span class="built_in">(matches</span>[<span class="number">0</span>]);//cat</span><br><span class="line">matches = pattern.exec(<span class="type">text</span>);</span><br><span class="line">console.log<span class="built_in">(matches</span>[<span class="number">0</span>]);//bat</span><br></pre></td></tr></table></figure><p>如果使用了y，那么下次就会从lastIndex开始进行搜索，并且该标记会覆盖全局标记。注意y和g并不相同</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">let pattern = /.at/y;</span><br><span class="line">let matches = pattern.<span class="keyword">exec</span>(<span class="keyword">text</span>);</span><br><span class="line">console.<span class="keyword">log</span>(matches[<span class="number">0</span>]);<span class="comment">//cat</span></span><br><span class="line">console.<span class="keyword">log</span>(pattern.lastIndex);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">let matches = pattern.<span class="keyword">exec</span>(<span class="keyword">text</span>);</span><br><span class="line">console.<span class="keyword">log</span>(matches[<span class="number">0</span>])<span class="comment">//null</span></span><br><span class="line"><span class="comment">//和上面不同的原因是这里从3开始搜索，而3占据着.的位置，后面两个字符不是at，所以最终出错</span></span><br><span class="line"></span><br><span class="line">pattern.lastIndex = <span class="number">5</span>;</span><br><span class="line">matches = pattern.<span class="keyword">exec</span>(<span class="keyword">text</span>);</span><br><span class="line">console.<span class="keyword">log</span>(matches[<span class="number">0</span>]);<span class="comment">//bat</span></span><br></pre></td></tr></table></figure><blockquote><p>test(),如果有模式匹配则返回true</p></blockquote><p>此外RegExp本身还有一些属性</p><ul><li>input: 最后搜索的字符串</li><li>lastMatch: 最后匹配的文本</li><li>lastParen: 最后匹配的捕获组</li><li>leftContext: input字符串中出现在lastMatch前面的文本</li><li>rightContext: 出现在后面的文本</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;this has been a short summer&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/(.)hort/g</span>;</span><br><span class="line"><span class="keyword">if</span>(pattern.test(text))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.input);<span class="comment">//this has been a shor summer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.leftContext);<span class="comment">//this has been a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="boolean-number-string"><a class="markdownIt-Anchor" href="#boolean-number-string"></a> Boolean、Number、String</h2><p>这些都是原始值包装类型，也就是对原始值的行为进行扩充。每当用到某个原始值的方法和属性时，后台都会创建一个包含原始值的对象。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">let s1 = <span class="string">&#x27;some text&#x27;</span>;<span class="regexp">//</span>原始值</span><br><span class="line">let s2 = s1.substring(<span class="number">2</span>);<span class="regexp">//</span>创建了一个包装对象并调用substring函数</span><br></pre></td></tr></table></figure><p>包装类型的形成大致过程为：</p><ol><li>发现调用原始值的函数时，创建包装类型</li><li>调用实例上的方法</li><li>销毁实例</li></ol><p>这种方式也就意味着我们不能再包装类型上添加方法，因为它使用后会立刻销毁。可以显式的使用Boolean、Number、String创建包装对象，就可以对这些对象进行操作。但是不推荐直接使用包装类型，因为可能会导致一些错误。</p><p>构造函数创建的包装类型使用typedef会返回object，因此Object构造方法会根据传入参数不同自动转型。并且如果使用转型函数那么typeof会显示对应类型</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(<span class="string">&#x27;some text&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s);<span class="comment">//object</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;23&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">number</span> = <span class="built_in">Number</span>(value);<span class="comment">//转型函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">number</span>);<span class="comment">//number</span></span><br></pre></td></tr></table></figure><h3 id="number"><a class="markdownIt-Anchor" href="#number"></a> Number</h3><ul><li>toFixed(precision): 设置保留几位小数。例如 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="attribute">console</span>.log(num.toFixed(<span class="number">2</span>));//<span class="number">10</span>.<span class="number">00</span></span><br></pre></td></tr></table></figure></li><li>toExponential(precision): 返回科学记数法形式的字符串，也可以设置精度</li><li>toPrecision(): 他会根据情况返回结果，可能是固定长度，也可能是科学记数法 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">99</span>;</span><br><span class="line">console.log(num.<span class="keyword">to</span><span class="constructor">Precision(1)</span>);<span class="comment">//1e+2</span></span><br><span class="line">console.log(num.<span class="keyword">to</span><span class="constructor">Precision(2)</span>);<span class="comment">//99</span></span><br><span class="line">console.log(num.<span class="keyword">to</span><span class="constructor">Precision(3)</span>);<span class="comment">//99.0</span></span><br></pre></td></tr></table></figure></li><li>isInteger(): 判断一个数值是否是整数，并不是说加了小数点就是整数，例如1.00是整数。他根据小数点之后是否还有位不是0判断是否是整数</li></ul><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h3><p>js使用了两种unicode编码，都是两个字节表示一个字符。</p><p>两个字节最多表示65536中字符。但是为了表示更多字符，有时候会使用前16位中某些为特殊字符，然后后16位和前16位共同表示一个字符，这时使用charAt就会出现问题。</p><p>例如：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CodePoint(97, 98, 128522, 100, 101)</span>;<span class="comment">//将数字转换成unicode字符,分别是a, b, 笑脸, d, e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//128522的十六进制是0x1f60a</span></span><br><span class="line"></span><br><span class="line">console.log(message.length);<span class="comment">//6(实际上显示时只有五个字符</span></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">At(1)</span>);<span class="comment">//b</span></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">At(2)</span>);<span class="comment">//&lt;?&gt;</span></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">At(3)</span>);<span class="comment">//&lt;?&gt;</span></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">At(4)</span>);<span class="comment">//d</span></span><br><span class="line"></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">CodeAt(1)</span>);<span class="comment">//98,b的序号</span></span><br><span class="line">console.log(message.<span class="built_in">char</span><span class="constructor">CodeAt(2)</span>);<span class="comment">//55357</span></span><br></pre></td></tr></table></figure><ul><li>length</li><li>charAt(index): 返回下标处的字符</li><li>charCodeAt(index): 返回下标处的字符对应数值，例如0是48。但是它不会考虑扩展字符</li><li>codePointAt(index): 返回下表处的字符对应数值，考虑了扩展字符</li><li>fromCharCode(…): 根据字符对应数值返回字符串，如<code>String.fromChatCode(48, 49)//01</code></li><li>fromCodePoint(…): …</li><li>normalize(): 某些字符可以有多种编码方式，normalize()统一这些编码，共有NFD、NFC、NFKD、NFKC四种规范形式 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(0x00c5)</span>);<span class="comment">//大写拉丁字母</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(0x212B)</span>);<span class="comment">//长度单位埃</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(0x0041, 0x030a)</span>);<span class="comment">//大写拉丁字母上面加个圆圈</span></span><br><span class="line">这三个虽然编码不相同，但是实际上最后返回的是同一个东西，而使用==是比较不出的，这时我们就需要normalize<span class="literal">()</span>规范编码</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(0x00c5)</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(0x212b)</span>);</span><br><span class="line"></span><br><span class="line">console.log(a1<span class="operator"> == </span>a2);<span class="comment">//false</span></span><br><span class="line">console.log(a1.normalize(&#x27;NFD&#x27;)<span class="operator"> == </span>a2.normalize(&#x27;NFD&#x27;));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>下面是字符串操作方法</p><ul><li>concat(): 将若干个字符串拼接到当前字符串后面，concat()可以接受任意数量的字符串，例如 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;hello &#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> result = s.concat(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//hello world</span></span><br></pre></td></tr></table></figure></li><li>slice,substring, substr: 三个都是获得子字符串，第一个参数都是子字符串开始位置，前两个的第二个参数是结尾位置，而substr第二个参数是抽取字符数量。</li><li>indexOf(),lastIndexOf(): 查找子字符串在字符串中的位置，不同的是indexOf从开始查找，而lastIndexOf从结尾开始查找。第一个参数是要查找的字符串，第二个参数时起始位置</li><li>startsWith、endsWith/includes: 检查一个字符串是否包含另一个字符串，startsWith是从第一个字符开始匹配(检查是否是以这个字符串开头)，endsWith是从string.length-substring.length开始匹配。而includes检索整个字符串 <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">let message = <span class="string">&#x27;foobarbaz&#x27;</span>;</span><br><span class="line">console.<span class="keyword">log</span>(message.<span class="keyword">startsWith</span>(<span class="string">&#x27;foo&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">console.<span class="keyword">log</span>(message.<span class="keyword">startsWith</span>(<span class="string">&#x27;bar&#x27;</span>));<span class="comment">//false,不是以bar开头</span></span><br><span class="line"></span><br><span class="line">console.<span class="keyword">log</span>(message.<span class="keyword">endsWith</span>(<span class="string">&#x27;baz&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">console.<span class="keyword">log</span>(message.includes(<span class="string">&#x27;baz&#x27;</span>));/true</span><br></pre></td></tr></table></figure></li><li>trim(): 删除两边所有的空格</li><li>repeat(times): 把原字符串复制times次</li><li>padStart()、padEnd(): 复制字符串，如果小于指定长度则会填充字符。第一个参数时长度，第二个参数时填充字符</li><li>toLowerCase(),  toUpperCase()</li></ul><p>下面是匹配（正则表达式）：</p><ul><li><p>match(regexp): 作用和RegExp中的exec类似，只是这里的参数变成了模式串，并且这里全局模式直接返回一个数组</p></li><li><p>search(regexp): 返回第一个匹配</p></li><li><p>replace(regexp, replace_str): 如果第一个参数是一个字符串，那么只会替换第一个匹配到的，如果想要匹配所有，必须使用正则表达式并且加上g。<br />其中replace_str有几种特殊的符号可以使用</p><table><thead><tr><th>字符</th><th>替换文本</th></tr></thead><tbody><tr><td><code>$$</code></td><td><code>$</code></td></tr><tr><td><code>$'</code></td><td>替换匹配子字符串之前的字符串</td></tr><tr><td>$`</td><td>匹配子字符串之后的字符串</td></tr><tr><td><code>$n</code></td><td>匹配第n个捕获组，关于捕获组可以看前面.范围是0-9</td></tr><tr><td><code>$nn</code></td><td>匹配第nn个捕获组，如01-99</td></tr></tbody></table><p>例如：</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class="line">result = text.replace(<span class="regexp">/(.at)/g</span>, <span class="string">&#x27;word ($1)&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//word (cat), word (bat), word (sat), word (fat)</span></span><br></pre></td></tr></table></figure></li></ul><p>字符串有迭代器，可以使用for-of访问每个字符，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> stringIterator = message[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next());<span class="comment">//[value: &#x27;a&#x27;, done: false]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> c <span class="keyword">of</span> <span class="string">&#x27;abcde&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">并且我们还可以使用解构操作符把字符串变成数组</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;abcde&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log([...message]);<span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];</span></span><br></pre></td></tr></table></figure><h2 id="global"><a class="markdownIt-Anchor" href="#global"></a> Global</h2><p>内置对象就是在程序执行前就开始执行的对象，和宿主环境无关，例如Object、Array和String都是内置对象。</p><p>window对象已经实现了Global对象的代理，它有Global的一系列方法。</p><p>方法：</p><ul><li>encodeURI(),encodeURIComponent(): 用于编码URI来传给浏览器。他会对某些不能出现在URI中的字符进行处理，如空格.其中encodeURIComponent()会对冒号、斜杠、问号等字符也进行编码 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&#x27;http://www.wrox.com/illegal value.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(uri));</span><br><span class="line"><span class="comment">//http://www.wrox.com/illegal%20value.js&#x27;,把空格变成%20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(uri));</span><br><span class="line"><span class="comment">//http%3a%2f%2fwww.wrox.com%2fillegal%20value.js&#x27;;</span></span><br></pre></td></tr></table></figure></li><li>eval(): 调用eval时，字符串会被解析为语句并执行，例如<code>eval(&quot;console.log('hi')&quot;);//hi</code></li></ul><h2 id="math"><a class="markdownIt-Anchor" href="#math"></a> Math</h2><p>math提供了许多数学计算的方法。并且math上提供的计算比普通计算要快很多，因为它的实现更加高效。</p><p><strong>math属性</strong></p><p>math中的属性包含了一些特殊值</p><ul><li>E: 2.71828</li><li>LN10: 以10为底的自然对数</li><li>LN2: 以2为底的自然对数</li><li>LOG2E: 以2为底e的对数</li><li>LOG10E: 以10为底e的对数</li><li>PI</li><li>SQRT1_2: 1/2的平方根</li><li>SQRT2： 2的平方根</li></ul><p>方法：</p><ul><li>min(), max()</li><li>ceil(): 向上舍入</li><li>floor(): 向下舍入</li><li>round(): 四舍五入</li><li>fround(): 返回浮点数表示</li><li>random(): 返回0-1的随机数，其中包含0但不包含1</li><li>等等</li></ul><h1 id="集合引用类型"><a class="markdownIt-Anchor" href="#集合引用类型"></a> 集合引用类型</h1><h2 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h2><p>创建数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);<span class="comment">//创建长度为3的数组</span></span><br><span class="line"><span class="keyword">let</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Greg&quot;</span>);<span class="comment">//只包含一个元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]<span class="comment">//使用数组字面量创建数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [,,,,,];<span class="comment">//创建包含5个元素的数组</span></span><br></pre></td></tr></table></figure><ul><li>from(data, func, this): 从data转换为数组，data可以是集合，map等。func是进行的一些操作。this是func中的this值，但是func不能是箭头函数</li><li>of(): 将一组参数转换成数组</li></ul><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">const</span> a<span class="number">1</span> =<span class="meta"> [1, 2, 3, 4]</span></span><br><span class="line"><span class="attribute">const</span> a<span class="number">2</span> = Array.from(a<span class="number">1</span>, x=&gt;x**<span class="number">2</span>)</span><br><span class="line"><span class="attribute">const</span> a<span class="number">3</span> = Array.from(a<span class="number">1</span>, function(x) &#123;return x**this.exponent&#125;, &#123;exponent: <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>索引</strong></p><p>数组索引和c++最大的不同是它可以动态变化，例如</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="symbol">&#x27;red</span>&#x27;, <span class="symbol">&#x27;blue</span>&#x27;, green&#x27;];</span><br><span class="line">colors[<span class="number">3</span>] = <span class="symbol">&#x27;yellow</span>&#x27;;<span class="comment">//添加一个元素</span></span><br></pre></td></tr></table></figure><p>Array中有一个属性length代表了数组的长度,这个值是可以进行设置的，从而改变数组长度(如果缩减长度会导致原有内容消失)</p><figure class="highlight rsl"><table><tr><td class="code"><pre><span class="line">let colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">colors[<span class="number">99</span>] = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">console.<span class="built_in">log</span>(colors.<span class="built_in">length</span>)<span class="comment">//100</span></span><br><span class="line">colors.<span class="built_in">length</span> = <span class="number">2</span></span><br><span class="line">console.<span class="built_in">log</span>(colors[<span class="number">2</span>])<span class="comment">//undefined</span></span><br><span class="line">colors.<span class="built_in">length</span> = <span class="number">3</span></span><br><span class="line">console.<span class="built_in">log</span>(colors[<span class="number">2</span>])<span class="comment">//undefined，缩减后数据被删除了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以很方便的添加数据</span></span><br><span class="line">colors[<span class="built_in">length</span>] = <span class="string">&#x27;yellow&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li>keys(),values(), entries(): keys是索引的迭代器，values是值的迭代器，entries()是键值对的迭代器，例如 <figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">const <span class="meta">key</span> = <span class="meta">Array</span>.<span class="meta">from</span>(a.keys())</span><br><span class="line">console<span class="meta">.log(</span><span class="meta">key</span>)//0, 1, 2, 3</span><br><span class="line">const value = <span class="meta">Array</span>.<span class="meta">from</span>(a.values())</span><br><span class="line">console<span class="meta">.log(</span>value)//<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;qux&#x27;</span></span><br><span class="line">const entries = <span class="meta">Array</span>.<span class="meta">from</span>(a.entries())</span><br><span class="line">console<span class="meta">.log(</span>entires)//[0, <span class="string">&#x27;foo&#x27;</span>], [1, <span class="string">&#x27;bar&#x27;</span>], [2, <span class="string">&#x27;baz&#x27;</span>], [3, <span class="string">&#x27;qux&#x27;</span>]</span><br><span class="line"></span><br><span class="line">for(const [idx, element] of a.entires())</span><br><span class="line">&#123;</span><br><span class="line">    console<span class="meta">.log(</span>idx);</span><br><span class="line">    console<span class="meta">.log(</span>element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>fill(sum, begin, end): 从begin到end填充sum</li><li>copyWithin(index, begin, end): 复制数组begin到end的内容并且插入到以index开始的位置中</li><li>toString(): 每个值都会调用toString()方法</li><li>push(): 拖入任意数量的值并且放入末尾</li><li>pop(): 删除最后一项</li><li>shift(): 取得第一项</li><li>unshift()： 从第一个位置插入</li><li>sort(func): 排序，可以按照指定的func进行排序</li><li>reverse(): 反向排序</li><li>concat(): 拼接</li><li>indexOf(), includes(), lastIndexOf(): 搜索某一个元素在数组中的位置，indexOf(), includes()从前往后搜索，lastIndexOf()从后往前.indexOf()和lastIndexOf()没有搜索到返回-1.includes()没有搜索到返回false。他们进行比较时使用====，也就是两项必须严格相等</li><li>every(func): 对每一项都运行函数，如果全部返回为真，则结果为真</li><li>filter(func): 运行函数为true的项会组成数组返回</li><li>foreach(func): 对每一项都运行函数</li><li>map(func): 对每一项都运行函数，返回由函数结果构成的数组</li><li>some(func): 只要有一项返回为true结果就为true <figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="literal">result</span> = number.every((item, index, <span class="built_in">array</span>)=&gt;item &gt; <span class="number">2</span>);//<span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> mapres = number.map((item, index, <span class="built_in">array</span>)=&gt;item * <span class="number">2</span>);</span><br><span class="line">number.forEach((item, index, <span class="built_in">array</span>)=&gt;<span class="meta">&#123;...&#125;</span>);</span><br></pre></td></tr></table></figure></li><li>reduce(func): 对数组中数据进行归约 <figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">values</span> = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">sum</span> = <span class="built_in">values</span>.reduce((prev, cur, index, <span class="built_in">array</span>)=&gt; prev + cur);//<span class="number">30</span></span><br><span class="line"></span><br><span class="line">第一次执行时prev=<span class="number">1</span>,cur=<span class="number">4</span>,第二次执行prev=<span class="number">5</span>(前面的归约结果), cur=<span class="number">9</span>（第三项</span><br></pre></td></tr></table></figure></li></ul><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h2><p>创建：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;val1&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;val2&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;val3&#x27;</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>map和object类型都可以插入键值对，但是他们还是有很大区别的。Object类型的键只能是数值，字符串或符号，而map可以是任意类型。其次map内部是有序的（插入顺序），而Object是无序的。我们可以使用entries()获得一个个按照插入顺序排列的(key, value)形式的数组</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(let pair of m.entries())</span><br><span class="line">&#123;</span><br><span class="line">    alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>[key1, val1]</span><br><span class="line"><span class="regexp">//</span>[key2, val2]</span><br><span class="line"><span class="regexp">//</span>[key3, val3]</span><br></pre></td></tr></table></figure><p>函数：</p><ul><li>set(): 添加键值对</li><li>get()/has(): 输入键，查询值</li><li>delete()/clear(): 删除 <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Map();</span><br><span class="line">m.<span class="built_in">get</span>(<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line">m.<span class="built_in">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>);</span><br><span class="line"></span><br><span class="line">m.has(<span class="string">&quot;firstName&quot;</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">m.<span class="keyword">delete</span>(<span class="string">&quot;firstName&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>keys()/values(): 返回key或value的迭代器</li></ul><p>键和值在迭代器遍历时是可以修改的，但是在Map内部不会修改。当然，这种修改不会影响使用这个键访问值</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Map([[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(le tkey of m.keys())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">key</span> = <span class="string">&quot;newKey&quot;</span>;</span><br><span class="line">    alert(m.<span class="built_in">get</span>(<span class="string">&quot;key1&quot;</span>)<span class="comment">//val1,说明在map内没有被修改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyObj = &#123;id: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> Map([[keyObj, <span class="string">&quot;val1&quot;</span>]]);</span><br><span class="line"><span class="keyword">for</span>(let <span class="built_in">key</span> of m.keys())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">key</span>.id = <span class="string">&quot;newKey&quot;</span>;</span><br><span class="line">    alert(m.<span class="built_in">get</span>(<span class="built_in">key</span>);<span class="comment">//val1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WeakMap</strong></p><p>弱映射表示映射的键是弱的，一旦键的引用被清除，这个键值对就会被清除。</p><p>他和普通的Map不同在于普通的map的键是在对象中独立存在的，除非调用delete否则不会被清除，而WeakMap中键直接引用外部变量，外部变量被清除这个键值对也就被清除。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> w = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = &#123; <span class="attr">key</span>: &#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">w.set(container.key, <span class="string">&#x27;val&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove_reference</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    container.key = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于container对象保有对key的引用，所以这个键值对暂时不会被清除，一旦调用remove_reference清除了外部引用之后，这个键值对将自动清除。</p><p>因为引用被删除就会自动回收，所以它可以很方便的给某些数据添加额外属性，省的每次都要delete</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> w = <span class="keyword">new</span> WeakMap();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;#login&#x27;</span>);</span><br><span class="line">w.<span class="keyword">set</span>(loginButton, &#123;disabled: <span class="keyword">true</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h2><p>set的基本函数和map类似，并且它的插入也是按序的。但是js里面的set和其他的set不同。它并没有提供集合操作方法，需要我们自己实现。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> union(a, ...bSets)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> unionSet = <span class="keyword">new</span> My_set(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> b <span class="keyword">of</span> bSets)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> bValue <span class="keyword">of</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">            unionSet.add(bValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> intersect(a, ...bSets)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> interset = <span class="keyword">new</span> My_set(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> aValue <span class="keyword">of</span> interSet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> b <span class="keyword">of</span> bSets)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!b.has(aValue)</span><br><span class="line">            &#123;</span><br><span class="line">                interset.delete(aValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此外，他也有WeakSet，效果和WeakMap相同</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基本引用类型&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>贝叶斯方法</title>
    <link href="https://xinhecuican.github.io/post/cc8f0814.html"/>
    <id>https://xinhecuican.github.io/post/cc8f0814.html</id>
    <published>2021-05-28T07:20:00.000Z</published>
    <updated>2021-05-28T07:58:46.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="贝叶斯定理"><a class="markdownIt-Anchor" href="#贝叶斯定理"></a> 贝叶斯定理</h1><p>定理： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>H</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>H</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>P</mi><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(H | X) = \frac{P(X | H) * P(H)}{P(X)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mclose mtight">)</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>其中P(H | X)可以读作x条件下p的概率。</p><p>这个公式的意义在于我们可以使用先验概率来求解后验概率。例如：</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%913.PNG" alt="" /></p><p>上面的例子中，买不买电脑是我们想知道的。而给出一个新的样例，我们不知道他买不买电脑，但是我知道它的年龄，收入等其他信息，现在我需要根据这些信息推断它买不买电脑也就是<code>P( buys - computer = &quot;yes&quot; | age =&quot;&lt;=30&quot;)(小于30的人买电脑概率有多大)</code></p><h1 id="朴素贝叶斯归纳方法"><a class="markdownIt-Anchor" href="#朴素贝叶斯归纳方法"></a> 朴素贝叶斯归纳方法</h1><p>朴素贝叶斯就是各个属性之间相互独立。有一个数据样本集，每个样本是一个n维向量X＝（x1, x2, …xn）有m个类：C1, C2, …Cm；每个样本唯一的归属于一个类。</p><p>如果现在来了一个未知类别的数据X，想要求得它的分类，也就是P(H | X) H <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span> {C1, C2, …, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">C_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}，可以写为P(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> | X)$</p><p>依照贝叶斯定理，可得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mi mathvariant="normal">＝</mi><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(C_j |X) ＝ P(X|C_j) P(C_j )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord cjk_fallback">＝</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，由于P(X)是定值，所以P(X)可以省略。P(x | <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)和P(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)都可以求得，现在就可以求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(C_j | X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>的概率了。</p><p>其中P(x |<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\prod_{i=1}^n p(x_i | C_i )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>计算过程：</p><ol><li>计算 P(C1), P(C2)等</li><li>计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x_1 | C_1 ), P(x_2 | C_2 )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> …</li><li>计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X | C_1 ), P(X | C_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> …</li><li>计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(C_1 | X), P(C_2 | X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span> …</li></ol><p>以上面为例</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">希望分类的未知样本为</span><br><span class="line">X=( age =“≤<span class="number">30</span>”, income =“medium”, student = “ yes”, credit - rating = “fai<span class="string">r&quot;)</span></span><br><span class="line"><span class="string">要求计算出</span></span><br><span class="line"><span class="string">P(buys - computer =“yes”| X)</span></span><br><span class="line"><span class="string">和P(buys - computer = &quot;</span>no”| X)</span><br></pre></td></tr></table></figure><p>计算过程如下</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.</span><br><span class="line">P( buys - <span class="attr">computer</span> =“ yes”)=<span class="number">9</span>/<span class="number">14</span> =<span class="number">0.643</span>;</span><br><span class="line">P(buys - <span class="attr">computer</span> =<span class="string">&quot;no”)=5/14=0.357。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. </span></span><br><span class="line"><span class="string">P(age =“&lt; = 30”| buys - computer = &quot;</span>yes<span class="string">&quot;)=2/9= 0.222;</span></span><br><span class="line"><span class="string">P( age =“&lt; =30&quot;</span>| buys - <span class="attr">computer</span> =<span class="string">&quot;no&quot;</span>)=<span class="number">3</span>/<span class="number">5</span>= <span class="number">0.600</span>;</span><br><span class="line">P(<span class="attr">income=&quot;medium&quot;</span> | <span class="attr">buys-computer</span> =<span class="string">&quot;yes&quot;</span>)=<span class="number">4</span>/<span class="number">9</span>= <span class="number">0.444</span>;</span><br><span class="line">P( <span class="attr">income</span> =<span class="string">&quot;medium&quot;</span> | buys - <span class="attr">computer</span> =<span class="string">&quot;no&quot;</span>) =<span class="number">2</span>/<span class="number">5</span>= <span class="number">0.400</span>;</span><br><span class="line">P( <span class="attr">student</span> =<span class="string">&quot;yes&quot;</span> | buys - <span class="attr">computer</span> =<span class="string">&quot;yes&quot;</span>) =<span class="number">6</span>/<span class="number">9</span>= <span class="number">0.667</span>;</span><br><span class="line">P( <span class="attr">student</span> = <span class="string">&quot;yes&quot;</span> | buys - <span class="attr">computer</span> =<span class="string">&quot;no&quot;</span>)=<span class="number">1</span>/<span class="number">5</span>= <span class="number">0.200</span>;</span><br><span class="line">P(credit - <span class="attr">rating</span> =<span class="string">&quot;fair&quot;</span> | buys - <span class="attr">computer</span> =<span class="string">&quot;yes&quot;</span>)=<span class="number">6</span>/<span class="number">9</span>= <span class="number">0.667</span>;</span><br><span class="line">P(credit - <span class="attr">rating</span> =<span class="string">&quot;fair&quot;</span> | buys - <span class="attr">computer</span> =<span class="string">&quot;no&quot;</span>)=<span class="number">2</span>/<span class="number">5</span>=<span class="number">0.400</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. </span><br><span class="line">P( X | buys - <span class="attr">computer</span> =<span class="string">&quot;yes&quot;</span> ) =</span><br><span class="line"><span class="number">0.222</span> ×  <span class="number">0.444</span> × <span class="number">0.667</span> × <span class="number">0.667</span> = <span class="number">0.044</span>;</span><br><span class="line">P(X | buys - <span class="attr">computer</span> = <span class="string">&quot;no&quot;</span>) =</span><br><span class="line"><span class="number">0.600</span> × <span class="number">0.400</span> × <span class="number">0.200</span> × <span class="number">0.1400</span> = <span class="number">0.019</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. </span><br><span class="line">P( buys - <span class="attr">computer</span> = <span class="string">&quot; yes &quot;</span> | X) =</span><br><span class="line">    P(X | buys - <span class="attr">computer</span> = <span class="string">&quot; yes &quot;</span> ) x </span><br><span class="line">    P( buys <span class="attr">-computer</span> = <span class="string">&quot; yes &quot;</span> ) = <span class="number">0.044</span> × <span class="number">0.643</span> = <span class="number">0.028</span>;</span><br><span class="line">P( buys - <span class="attr">Computer</span> = <span class="string">&quot; no &quot;</span> | X) = </span><br><span class="line">    P(X | buys - <span class="attr">computer</span> = <span class="string">&quot; no &quot;</span> ) × </span><br><span class="line">    P ( buys <span class="attr">-computer</span> = <span class="string">&quot; no &quot;</span> ) =<span class="number">0.019</span> ×<span class="number">0.357</span> =<span class="number">0.007</span>。</span><br><span class="line">所以最终预测会买</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;贝叶斯定理&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>js函数</title>
    <link href="https://xinhecuican.github.io/post/39e6b899.html"/>
    <id>https://xinhecuican.github.io/post/39e6b899.html</id>
    <published>2021-05-27T00:21:00.000Z</published>
    <updated>2021-07-05T11:45:41.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h1><p>在js中，函数其实是对象。每个函数都是Function类型的实例，Function也有自己的属性和方法。因为函数是对象，所以函数名其实就是指向对象的指针，甚至和这个对象没有强制绑定。</p><p>定义函数的一些方式：</p><p>直接定义</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">sum</span>(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">num1</span> + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名定义,定义一个函数，然后把函数指针给sum变量</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">sum</span> = <span class="function"><span class="keyword">function</span><span class="params">(num1, num2)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过箭头，可以称作箭头函数。这是一种语法糖，实际上和上面那个作用是一样的</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> sum (num<span class="number">1</span>, num<span class="number">2</span>) =&gt; &#123; return num<span class="number">1</span> + num<span class="number">2</span>;&#125;;</span><br></pre></td></tr></table></figure><p>箭头函数可以用在任何使用函数表达式的地方（不需要函数名的地方），但是箭头函数和普通函数还是有一些微妙的差别的，例如不能使用arguments等。</p><p>最后一种方法时使用Function构造函数，这个函数接收任意多个参数，最后一个参数会被当成函数体，例如<code>let sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 + num2&quot;);</code>.但是这种方法不推荐使用，因为他会被解释两次：第一次是解析new，第二次是解析函数。</p><p>函数和var类似，都会自动把声明提升到顶部，因此下列代码是可以的</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">console<span class="number">.</span><span class="built_in">log</span>(<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">sum</span>(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数名和参数"><a class="markdownIt-Anchor" href="#函数名和参数"></a> 函数名和参数</h2><p>因为函数名是指向函数的指针，所以他们和其他对象指针相同，这样就意味着函数可以有多个名称。</p><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(num1, num2)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consol.<span class="built_in">log</span>(<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">let anothersum = <span class="built_in">sum</span>;</span><br><span class="line">console.<span class="built_in">log</span>(anothersum(<span class="number">10</span>, <span class="number">10</span>));/<span class="number">20</span></span><br></pre></td></tr></table></figure><p>所有函数对象都只会暴露一个只读的name属性，包含函数的信息。多数情况下就是包含一个函数标识符，也就是函数名。如果它是使用构造函数创建的，则会被标识成‘anonymous’</p><p>如果函数是get、set或者使用bind()实例化，那么标识符前面会加上一个前缀</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.bind(<span class="literal">null</span>).name);<span class="comment">//bound foo</span></span><br><span class="line"><span class="keyword">let</span> dog =</span><br><span class="line">&#123;</span><br><span class="line">    years: <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">age</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.years;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">age</span>(<span class="params">newAge</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = newAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> propertyDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(dog, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(propertyDescriptor.get.name);<span class="comment">//get age</span></span><br><span class="line"><span class="built_in">console</span>.log(propertyDescriptro.set.name);<span class="comment">//set age</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>ECMAScript函数的参数和大多数语言不同，它不关心传入参数的个数。定义函数时要接受两个参数，但是实际上可以传一个、两个、三个或者一个不传，都不会报错。</p><p>函数的参数在内部表现为一个数组，，函数调用时总会接收这个参数数组，但是数组中有什么其实并不关心。并且在使用function定义非箭头函数时，可以在函数内部访问arguments对象，从中获得传进来的每个参数值。</p><p>arguments对象类似于数组，可以通过arguments[0]获得第一个参数，arguments[1]获得第二个参数。可以使用arguments.length获得数组的长度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span> + <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="string">&quot;, &quot;</span> + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">sayHi(<span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;好&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这和c语言中main函数的参数类似，length相当于argc，而这个数组相当于argv</p><p>我们可以修改arguments参数的值甚至添加元素，但是arguments是根据传入时参数的个数决定的，不会再改变</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fucntion add(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>但是在严格模式下即使把arguments的值改变了参数的值也不会改变</p><p><strong>箭头函数中的参数</strong></p><p>箭头函数中的参数不能使用arguments进行访问，只能使用参数名进行访问</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);&#125;;</span><br><span class="line">bar(<span class="number">5</span>);<span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure><blockquote><p>js的函数没有重载，因为参数都是不确定的。在这种情况下，后命名的函数会覆盖前面一个函数</p></blockquote><h2 id="默认参数与扩展参数"><a class="markdownIt-Anchor" href="#默认参数与扩展参数"></a> 默认参数与扩展参数</h2><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeKing</span>(<span class="params">name = <span class="string">&#x27;henry&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> VIII`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(makeKing(<span class="string">&#x27;Louis&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(makeKing();<span class="comment">//King henry VIII</span></span><br></pre></td></tr></table></figure><p>传undefined相当于没有传值，但是通过传undefined可以部分填充</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeKing</span>(<span class="params">name = <span class="string">&#x27;Henry&#x27;</span>, numerals = <span class="string">&#x27;VIII&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;numerals&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(makeKing(<span class="literal">undefined</span>, <span class="string">&#x27;VI&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在使用默认参数时，arguments不会反映默认参数，他只会保存外来参数。</p><p>默认参数还可以直接传一个函数,并且在函数调用时相应的参数函数才会求值，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;II&#x27;</span>, <span class="string">&#x27;III&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> ordinality = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumerals</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num[ordinality++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeKing</span>(<span class="params">name = <span class="string">&#x27;Henry&#x27;</span>, numerals = getNumerals()</span>)//使用函数</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认参数的定义也是有先后顺序的，后面定义的可以引用前面定义的。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeKing</span>(<span class="params">name = <span class="string">&#x27;Henry&#x27;</span>, numerals = name</span>)//引用<span class="title">name</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;numerals&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">它类似于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeKing</span>(<span class="params">name, numerals</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> numerals = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;numerals&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展参数</strong></p><p>扩展参数也就是不定长参数，它在不同环境下有不同的用法。</p><ul><li><p>传入参数</p><p>当参数是一个数组时，实际上它的长度是知道的，因此它的作用是将数组中的元素进行拆分，每个元素都是输入的一个参数，可以使用arguments进行访问。</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以使用</span><br><span class="line"><span class="built_in">console</span>.log(getSum(...values));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>, ...values)); <span class="comment">//11</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>, ...values, <span class="number">2</span>));<span class="comment">//13</span></span><br></pre></td></tr></table></figure></li><li><p>输入不定长参数<br />例如</p> <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span><span class="params">(<span class="rest_arg">...values</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> values.reduce((x, y) =&gt; x+y, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">console.log(getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>通过这种方法得来的values是一个数组，可以通过数组访问其中的每个输入参数，这种方法可以用于箭头函数（箭头函数中不能用arguments），并且在arguments中每个参数还是独立的，上面<code>arguments.length</code>输出为3</p><p>不定长参数只能放在最后</p> <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">(<span class="rest_arg">...values</span>, lastValue)</span></span>&#123;&#125;<span class="comment">//错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">(firstValue, <span class="rest_arg">...values</span>)</span></span>&#123;&#125;<span class="comment">//可以</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="函数的参数与属性"><a class="markdownIt-Anchor" href="#函数的参数与属性"></a> 函数的参数与属性</h1><h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2><p><strong>arguments</strong></p><p>前面已经使用过很多次arguments属性了，它代表传进来的参数。除了这个作用外，arguments其实还包含一个callee属性，是一个指向所在函数的指针。</p><p><strong>this</strong></p><p>在标准函数中，this引用的是调用函数的上下文对象，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = </span><br><span class="line">&#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor();<span class="comment">//red,这时它的上下文对象时window</span></span><br><span class="line">o.sayColor = sayColor;</span><br><span class="line">o.sayColor();<span class="comment">//blue</span></span><br></pre></td></tr></table></figure><p>而在箭头函数中，this引用的是定义时的上下文</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = </span><br><span class="line">&#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sayColor = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line"></span><br><span class="line">sayColor();<span class="comment">//red</span></span><br><span class="line">o.sayColor = sayColor;</span><br><span class="line">o.sayColor();<span class="comment">//red,因为是在window中定义的</span></span><br></pre></td></tr></table></figure><blockquote><p>函数名只是保存指针的变量，实际上函数都在代码区，只不过执行的上下文不同</p></blockquote><p><strong>caller</strong></p><p>caller引用调用该函数的函数，例如</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">outer</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">inner</span>()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(<span class="keyword">inner</span>.caller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">outer</span>();</span><br></pre></td></tr></table></figure><p>结果返回outer的代码，因为inner.caller是outer</p><p><strong>new.target</strong></p><p>new.target是为了检测这个函数是作为创建新对象而new的还是作为普通函数，如果是作为普通函数，那么new.target值是undefined，如果是new，那么将引用被调用的函数</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">King</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">new</span><span class="type"></span>.target)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> `King must be instantiated <span class="keyword">using</span> <span class="string">&quot;new&quot;</span>`</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(`King instantiated <span class="keyword">using</span> <span class="string">&quot;new&quot;</span>`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="type">King</span>();<span class="comment">//King instantiated using &quot;new&quot;</span></span><br><span class="line">King();<span class="comment">//Error: King must be instantiated using &quot;new&quot;</span></span><br></pre></td></tr></table></figure><h2 id="属性和方法"><a class="markdownIt-Anchor" href="#属性和方法"></a> 属性和方法</h2><p>每个函数都有两个属性：length和prototype，其中length是函数定义的参数个数</p><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">(name)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(num1, num2)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(sayName.<span class="built_in">length</span>);<span class="comment">//1</span></span><br><span class="line">console.<span class="built_in">log</span>(sum.<span class="built_in">length</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>函数有两个方法：apply()和call()。</p><ul><li>apply(this, arguments): 第一个参数是函数调用时的上下文对象，也就是this所指向的值，第二个参数可以是Array，也可以是arguments对象 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callsum</span>(<span class="params">num1, num2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);<span class="comment">//传入arguments对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(callsum(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">//20</span></span><br></pre></td></tr></table></figure></li><li>call(this, arguments): 作用和apply相同，不同的是call中的参数必须一个个列出来，而不能传数组</li></ul><p>apply和call主要是用来切换this对象用的，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = </span><br><span class="line">&#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor();</span><br><span class="line"></span><br><span class="line">sayColor.call(<span class="built_in">this</span>);<span class="comment">//red</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>);<span class="comment">//red</span></span><br><span class="line">sayColor.call(o);<span class="comment">//blue</span></span><br></pre></td></tr></table></figure><ul><li>bind(this): 创建一个新的函数实例，并且将实例内部的this与传入的this对象进行绑定。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o =</span><br><span class="line">&#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objectSayColor = sayColor.bind(o);</span><br><span class="line">objectSayColor();<span class="comment">//blue</span></span><br></pre></td></tr></table></figure><h1 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h1><p>递归就是自己调用自己，一般由递归表达式和终止条件。js写递归时有它自己的特色</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);<span class="comment">//这样不会受函数名干扰</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">但是在严格模式下，不可以使用callee，可以替换成如下形式</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>递归的一大缺点就是内存占用高，而js新增一项内存管理机制（尾调用优化）可以在条件满足的时候重用栈帧</p><p>例如：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">outer</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">inner()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来它的调用过程是这样的</p><ol><li>执行outer，第一个栈帧生成</li><li>发现返回inner，计算inner，并且第二个栈帧生成</li><li>计算完inner，第二个栈帧退出，然后返回给outer，第一个栈帧退出</li></ol><p>现在是：</p><ol><li>执行outer，第一个栈帧生成</li><li>发现inner，但是此时发现outer返回值和inner返回值相同，弹出outer栈帧</li><li>计算inner并返回</li></ol><p><strong>尾调用优化的条件：</strong></p><ol><li>在严格模式下执行</li><li>外部函数的返回值是对尾调用函数的调用(必须是在return中调用）</li><li>尾调用函数返回后不用执行额外的逻辑（如返回值加减等）</li><li>尾调用函数没有引用外部函数中变量</li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> foo;&#125;</span><br><span class="line">    <span class="keyword">return</span> inner();<span class="comment">//闭包，没有优化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inner().toString();<span class="comment">//执行了额外的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params">a, b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> inner(a + b);<span class="comment">//有优化，前面一个return可以提前得知</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h1><p>闭包是一个函数引用了另一个函数中的变量，这通常是在嵌套函数中实现的。例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComp</span>(<span class="params">propertyName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1, object2</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value1 = object1[propertyName];<span class="comment">//引用了外部变量</span></span><br><span class="line">        <span class="keyword">let</span> value2 = object2[propertyName];</span><br><span class="line">        <span class="keyword">if</span>(value1 &lt; value2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vlaue1 &gt; value2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面已经说过<a href="https://xinhecuican.github.io/post/fcee082f.html#%E4%BD%9C%E7%94%A8%E5%9F%9F">作用域链</a><br />。在函数执行时，每个函数都有一个包含其变量的对象。在全局上下文中叫变量对象，在局部上下文叫活动对象，它会随着函数的销毁而销毁。</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(value1 &lt; value2)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(value1 &gt; value2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = compare(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>这个例子中在定义compare函数时，会为他创建作用域链，并且预装载全局变量对象，保存在[[Scope]]中。在调用这个函数时，会复制[[Scope]]来创建作用域，并且将自己的活动对象放在作用域链的前端。</p><p>而在createComp中，里面的匿名函数引用了createComp中的变量，因此当他返回之后createComp并不会销毁，只有在匿名函数引用清除之后才会被销毁</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="built_in"> compare</span> = createComp(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> result =<span class="built_in"> compare</span>(<span class="built_in">&#123;name</span>: <span class="string">&#x27;a&#x27;</span>&#125;, <span class="built_in">&#123;name</span>: <span class="string">&#x27;b&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">compare = null//清除引用，现在createComp才会被销毁</span><br></pre></td></tr></table></figure><p><strong>闭包中的this对象</strong></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.identity = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">object</span> = </span><br><span class="line">&#123;</span><br><span class="line">    identity: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">    getIdentityFunc()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.identity;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">object</span>.getIdentityFunc()());<span class="comment">//The Window</span></span><br></pre></td></tr></table></figure><p>结果返回按常理说应该是object，但是却是window。考虑对象的生成过程，其中有一步就是把this变量赋给函数，但是没有赋给函数的函数，也就是说闭包内部的this是原始window。如果我们想要让他的this是对象，可以</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object = </span><br><span class="line">&#123;</span><br><span class="line">    identity: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">    getIdentityFunc()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> that.identity;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="私有变量"><a class="markdownIt-Anchor" href="#私有变量"></a> 私有变量</h1><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());<span class="comment">//a</span></span><br></pre></td></tr></table></figure><p>上面的name实际上是一个私有变量，因为它的作用域是在函数内部的，可以通过参数名或arguments在函数中访问，但是函数外部无法访问，只有通过get和set才可以访问。</p><p><strong>静态私有变量</strong></p><p>上面那种是每个实例都有的私有变量，有时候需要所有实例共享私有变量，也就是静态私有变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    Person = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)//<span class="title">Person</span>前面没有修饰符，所以自动将定义域归结到全局上下文</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Person.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());<span class="comment">//a</span></span><br></pre></td></tr></table></figure><p>通过这种方式可以让所有person实例修改一个name属性，由于Person是闭包，所以这个匿名函数调用之后并不会销毁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js对象</title>
    <link href="https://xinhecuican.github.io/post/d6f3a755.html"/>
    <id>https://xinhecuican.github.io/post/d6f3a755.html</id>
    <published>2021-05-23T02:54:00.000Z</published>
    <updated>2021-05-26T11:04:12.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h1><p>创建自定义对象的方式通常是创建一个Object的新实例，然后添加属性和方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">person.job = <span class="string">&#x27;engineer&#x27;</span>;</span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是早期创建对象的方式。如果使用对象字面量可以这样写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = </span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">    age: <span class="number">29</span>;</span><br><span class="line">    job: <span class="string">&#x27;engineer&#x27;</span>;</span><br><span class="line">    sayName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性类型"><a class="markdownIt-Anchor" href="#属性类型"></a> 属性类型</h2><p>属性有些是对象中的成员变量，还有些类似于c#中的属性(property).这些属性都有一些内置的attribute（特性），我们可以修改这些特性。为了标识某一个内部特性，一般使用两个中括号括起来，例如<code>[[Enumberable]]</code></p><p>使用<code>Object.defineProperty()</code>可以更改属性的特性</p><p><strong>数据属性</strong></p><p>数据属性就是平常的变量，它包含一个保存数据值的位置，只会从这个位置读取，也会写入到这个位置，它的特性为</p><ul><li><code>[[Configurable]]</code>: 是否可以通过delete删除并重新定义，是否可以修改特性，是否可以把它改为可访问，它是下面配置的基础。默认是true</li><li><code>[[Enumerable]]</code>: 是否可以通过for-in返回，默认情况下是true</li><li><code>[[Writable]]</code>: 属性是否可以被修改，如果设置为false可以给这个变量赋值但是赋值无效。默认情况下是true</li><li><code>[[Value]]</code>: 包含属性实际的值</li></ul><p>修改特性可以同时设置一个或多个值</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">let person = &#123;&#125;;</span><br><span class="line">Object.defineProperty(person, <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    writeable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">&#x27;Nicholas&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(person.<span class="built_in">name</span>); <span class="comment">//Nicholas</span></span><br><span class="line">person.<span class="built_in">name</span> = <span class="string">&#x27;Greg&#x27;</span>;</span><br><span class="line">console.<span class="built_in">log</span>(person.<span class="built_in">name</span>);<span class="comment">//Nicholas</span></span><br></pre></td></tr></table></figure><p>一个属性被设置为不可配置之后，就不可以设置为可配置了。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">let person = &#123;&#125;;</span><br><span class="line">Object.<span class="function"><span class="keyword">def</span><span class="title">ineProperty</span><span class="params">(person, <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="symbol">configurable:</span> <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="symbol">value:</span> <span class="string">&#x27;Nicholas&#x27;</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">Object.<span class="function"><span class="keyword">def</span><span class="title">ineProperty</span><span class="params">(person, <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="symbol">configurable:</span> <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span>;<span class="regexp">//</span>报错</span><br></pre></td></tr></table></figure><p><strong>访问器属性</strong></p><p>访问器有一个getter和一个setter函数，但是和c#中的属性不完全一样，c#中属性可以默认内部有一个值，但是访问器只可以对其他的值进行操作</p><ul><li><code>[[configurable]]</code>: 和上面一样</li><li><code>[[Enumerable]]</code>:</li><li><code>[[Get]]</code>: 默认是undefined</li><li><code>[[Set]]</code>: 默认是undefined</li></ul><p>访问器属性不能直接定义，必须使用Object.defineProperty()</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">let book = </span><br><span class="line">&#123;</span><br><span class="line">    year_: <span class="type">2017</span>, <span class="comment">//认为是私有属性</span></span><br><span class="line">    edition: <span class="type">1</span></span><br><span class="line"><span class="type"></span>&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(book, <span class="string">&#x27;year&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>(<span class="keyword">new</span><span class="type">Value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span><span class="type">Value</span> &gt; <span class="number">2017</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.year_ = <span class="keyword">new</span><span class="type">Value</span>;</span><br><span class="line">            <span class="built_in">this</span>.edition += <span class="keyword">new</span><span class="type">Value</span> - <span class="number">2017</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2018</span>;</span><br></pre></td></tr></table></figure><p><strong>读取属性特性</strong></p><p>使用<code>Object.getOwnPropertyDescriptor(object_name, property_name)</code>获取属性的属性描述符,例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">&#x27;year_&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value);<span class="comment">//2017</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(descriptor.get));<span class="comment">// undefined</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此外还有<code>Object.getOwnPropertyDescriptors()</code>方法，他会返回每一个对象的特性</p><p><strong>合并对象</strong></p><ul><li>Object.assign(): 将一个目标对象和多个源对象进行合并。将每个源对象的可枚举(Object.propertyIsEnumerable())和自有(Object.hasOwnProperty())属性复制到目标对象.对于每个符合条件的属性，会使用源对象上的[[get]]获得属性，然后使用目标对象的[[set]]设置属性</li></ul><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dest</span> = &#123;&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">result</span> = Object.assign(dest, &#123;a: <span class="string">&#x27;foo&#x27;</span>&#125;, &#123;b: <span class="string">&#x27;bar&#x27;</span>&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>assign()是浅复制，也就是说只会复制对象的引用，他们指向内存中的位置是相同的。并且如果出错无法回滚。</p><h2 id="增强语法"><a class="markdownIt-Anchor" href="#增强语法"></a> 增强语法</h2><ol><li>属性值简写<br />在给对象添加变量时，经常发现属性名和变量名是一样的<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">letname = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">let person = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">name</span>: <span class="type">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure>为了简单，有一种简写为<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="built_in"> name</span> = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = </span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in"> name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可计算属性<br />可计算属性是用动态赋予变量名，例如<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ageKey = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> uniqueToken = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueKey</span>(<span class="params">key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>_<span class="subst">$&#123;uniqueToken++&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person =</span><br><span class="line">&#123;</span><br><span class="line">    [getUniqueKey(nameKey)] = <span class="string">&#x27;Matt&#x27;</span>;<span class="comment">//变量名是会变的。如name_0,name_1</span></span><br><span class="line">    [getUniqueKey(ageKey)] = <span class="number">27</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>简写方法名<br />在给对象定义方法时，通常要写方法名加冒号再加方法，现在可以直接使用方法名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来</span></span><br><span class="line"><span class="keyword">let</span> person =</span><br><span class="line">&#123;</span><br><span class="line">    say_name: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">let</span> person = </span><br><span class="line">&#123;</span><br><span class="line">    say_name(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>简写还可以用于get和set，并且方法名可以用可计算属性代替<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = </span><br><span class="line">&#123;</span><br><span class="line">    name_: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对象解构<br />原来想要赋值必须一个个赋值，现在可以使用一条语句进行赋值<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来赋值</span></span><br><span class="line"><span class="keyword">let</span> personName = person.name;</span><br><span class="line"><span class="keyword">let</span> personAge = person.age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">let</span> &#123;name: personName, age: personAge&#125; = person;</span><br></pre></td></tr></table></figure></li></ol><h1 id="创建对象"><a class="markdownIt-Anchor" href="#创建对象"></a> 创建对象</h1><p><strong>工厂模式</strong></p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.ageg = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = createPerson(<span class="string">&#x27;a&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;doctor&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>构造函数模式</strong></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.job = job;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;a&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;doctor&#x27;</span>);</span><br></pre></td></tr></table></figure><p>构造函数不需要显示的创建对象，并且没有return。它使用new新建对象并且构造函数最好首字母大写。</p><p>它的创建过程为：</p><ol><li>在内存中创建一个新对象</li><li>将新对象内部的[[Prototype]]特性赋值为构造函数的prototype属性</li><li>构造函数内部的this被赋值为当前对象</li><li>执行构造函数内部代码（给对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象，否则返回新创建的对象</li></ol><p>但是这种创建方式有一些问题。例如上例中的sayName，在js中函数实际上是一个对象，因此每定一个一个函数相当于创建了一个对象，这会带来空间的浪费，因此可以这样</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.job = job;</span><br><span class="line">    <span class="built_in">this</span>.sayName = sayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原型模式</strong></p><p>每个函数都会创建一个prototype属性，这个属性是一个对象，这个对象就是通过调用构造函数创建的对象的原型。在原型对象上定义的变量或属性可以被所有对象实例共享。原来直接赋给对象实例的值，可以赋给他们的原型</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.name = <span class="character">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.age = <span class="number">29</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.job = &#x27;engineer&#x27;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.sayName = <span class="keyword">function</span><span class="literal">()</span>&#123;console.log(this.name);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">person.say<span class="constructor">Name()</span>;</span><br></pre></td></tr></table></figure><p>我们可以把所有方法添加到原型上，这样就不会出现上面的创建一个对象就创建一个函数的情况了。</p><h1 id="原型"><a class="markdownIt-Anchor" href="#原型"></a> 原型</h1><p>只要创建一个函数，就会为这个函数创建一个prototype属性（指向原型）。所有原型会默认获得一个<code>constructor</code>属性，指向关联的构造函数。</p><p>原型对象默认只会有constructor属性，其他属性都继承于Object， Object的原型是null。每次创建新实例时，内部的[[Prototype]]特性就会指向原型，一般可以通过<code>__proto__</code>访问这个原型。如果没有这个属性还可以使用getPrototypeOf()获得prototype。</p><p><img src="/images/js%E5%AF%B9%E8%B1%A11.jpg" alt="" /></p><h2 id="原型层级"><a class="markdownIt-Anchor" href="#原型层级"></a> 原型层级</h2><p>通过对象访问属性时，会按照属性的名称开始搜索。首先搜索对象实例本身，如果本身没有则会搜索原型，再搜索原型的原型，知道搜索到null。</p><p>虽然可以通过实例读取到原型对象上的值，但是不能修改这些值。如果在实例上创建了和原名对象中同名的属性，则会覆盖原型对象上的属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);<span class="comment">//b，来自实例</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);<span class="comment">//a,来自原型</span></span><br></pre></td></tr></table></figure><p>如果想要恢复对原型属性的访问，则必须使用delete删除这个属性</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">delete person1.<span class="built_in">name</span>;</span><br><span class="line">console.<span class="built_in">log</span>(person1.<span class="built_in">name</span>);<span class="comment">//a</span></span><br></pre></td></tr></table></figure><h3 id="访问控制"><a class="markdownIt-Anchor" href="#访问控制"></a> 访问控制</h3><p>我们可以使用hasOwnProperty()判断某个属性是实例上的还是原型上的，而in操作符只要可以访问就会返回true</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="string">&quot;name&quot;</span> in person2);<span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>如果使用for-in循环，那么可以通过对象访问且可枚举的属性都会返回，包括实例和原型属性。如果想要获得对象上所有可枚举的实例属性，可以使用Object.keys()方法，这个方法只会返回该对象而不会返回原型的</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.name = <span class="character">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.age = <span class="number">29</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.job = &#x27;engineer&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keys = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype);<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;, &#x27;job&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">keys = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(person);<span class="comment">//[&#x27;&#x27;]</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="character">&#x27;b&#x27;</span>;</span><br><span class="line">person.age = <span class="number">23</span>;</span><br><span class="line">keys = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(person);<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(value <span class="keyword">in</span> person)</span><br><span class="line">&#123;</span><br><span class="line">    console.log(value);<span class="comment">//name, age, job</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要获得所有实例属性，无论是否可以枚举，则可以使用Object.getOwnPropertyNames()</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">let keys = <span class="keyword">Object</span>.getOwnPropertyNames(person.prototype);</span><br><span class="line">console.log(keys)<span class="comment">//[&#x27;constructor&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, &#x27;job&#x27;]</span></span><br><span class="line">多了一个<span class="function"><span class="keyword">constructor</span>，是不可枚举属性</span></span><br></pre></td></tr></table></figure><p>除了getOwnPropertyNames()外，还有getOwnPropertySymbols()获得所有的symbol</p><p>for-in循环和keys的枚举顺序是不确定的。而getOwnProperty的顺序是先以升序枚举数值键，然后以插入顺序枚举字符串和符号键。</p><p><strong>对象迭代</strong></p><p>可以使用Object.values()或Object.entries()获得对象的属性值，例如</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const o = </span><br><span class="line">&#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    baz: <span class="number">1</span>,</span><br><span class="line">    qux: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">Object</span>.<span class="keyword">values</span>(o));//[<span class="string">&#x27;bar&#x27;</span>, <span class="number">1</span>, &#123;&#125;]</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">Object</span>.entries((o)));//[[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],[<span class="string">&#x27;baz&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;qux&#x27;</span>, &#123;&#125;]]</span><br></pre></td></tr></table></figure><p>符号属性会被忽略</p><p>此外，我们还可以使用对象字面量对原型进行赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = </span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    age: <span class="number">29</span>,</span><br><span class="line">    job: <span class="string">&#x27;engineer&#x27;</span>,</span><br><span class="line">    sayName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样有一个问题，在创建Person时原型就已经确定了，这时原型指向的是Person。而此时原型又被重新创建，虽然Person.prototype指向没有问题，但是Person.prototype.constructor不指向Person，而是指向Object.我们可以通过在定义时指向Person来解决这个问题</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype = &#123;</span><br><span class="line">    constructor: Person,<span class="comment">//定义constructor</span></span><br><span class="line">    ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>但是此时constructor变成了可枚举的了，如果想要把它变成不可枚举类型，可以使用defineProperty()</p><p>即使这样还可能出现问题</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line"> Person.prototype =</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">     ...</span><br><span class="line">     <span class="title">sayNmae</span>(<span class="params"></span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">friend.sayName()<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>报错的原因是虽然修改为新的原型，但是friend的prototype还指向老的原型。因此就没有sayName函数。</p><h1 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h1><h2 id="原型链"><a class="markdownIt-Anchor" href="#原型链"></a> 原型链</h2><p>js的继承是基于原型链的。例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();<span class="comment">//继承</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue());<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上面的代码关键是<code>SubType.prototype = new SuperType()</code>，通过创建一个父类的实例给子类的原型从而实现原型链的继承。现在子类的原型的原型就是<code>SuperType.protoType</code>.</p><p><img src="/images/js%E5%AF%B9%E8%B1%A12.jpg" alt="" /></p><p><strong>原型和实例的关系</strong></p><p>有两种方式确定原型和实例的关系，一种是使用instanceof操作符，如果一个实例的原型链中出现过相应的构造函数。则instanceof返回true</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>);//<span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType);//<span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SubType);//<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>第二种方法时使用<code>isPrototypeOf()</code>方法，这是给原型用的，只要原型链中包含这个原型就会返回true</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>prototype.is<span class="constructor">PrototypeOf(<span class="params">instance</span>)</span>;<span class="comment">//true</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">SuperType</span>.</span></span>prototype.is<span class="constructor">PrototypeOf(<span class="params">instance</span>)</span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>但是原型链也有它的问题，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);<span class="comment">//red, blue, green, black</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//red, blue, green, black</span></span><br></pre></td></tr></table></figure><p>它的问题就是所有子类的父类都是同一个，如果修改父类的属性那么对于所有子类都是有效的。也就是让本来不是原型属性的属性变成了原型属性。</p><p>另一个问题是，子类在实例化时不能给父类构造函数传参</p><h2 id="盗用构造函数"><a class="markdownIt-Anchor" href="#盗用构造函数"></a> 盗用构造函数</h2><p>为了解决原型链模式的一些问题，提出了一种盗用构造函数的方式。例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>);<span class="comment">//盗用构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isntance1.colors);<span class="comment">//red, blue, green, black</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//red, blue, green</span></span><br></pre></td></tr></table></figure><p>通过call()或apply()方法，这样相当于SuperType的构造函数在SubType中执行了，这样每个sub对象都有父类的实例属性。</p><p>call()方法是使用指定对象调用某个函数，第一个参数就是指定的对象，这里是this也就是SubType。也就是说SuperType中this.color变成了SubType.color，SubType上创建了color变量。</p><p>我们可以使用原型链和盗用构造方法结合的方式来进行继承</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>.age);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&#x27;a&#x27;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line">cnosole.log(instance1.colors);<span class="comment">//red, blue, green, black</span></span><br></pre></td></tr></table></figure><p>通过这两种方式的结合，我们在继承父类的方法和属性的同时也保存了隔离性</p><h2 id="寄生式组合继承"><a class="markdownIt-Anchor" href="#寄生式组合继承"></a> 寄生式组合继承</h2><p><strong>原型式继承</strong></p><p>例如:</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objec</span><span class="params">(o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是最开始说的原型链，这里用一个函数封装一下，并且这种模式还可以使用Object.create()代替,它的第一个参数是用来做原型的对象，另外一个参数时给新对象定义额外属性的对象，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person =</span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    friends: &#123;<span class="string">&#x27;shelby&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="built_in">Object</span>.create(person);<span class="comment">//继承自person</span></span><br><span class="line"><span class="keyword">let</span> thirdperson = <span class="built_in">Object</span>.create(person, &#123;<span class="attr">name</span>:&#123;<span class="attr">value</span>: <span class="string">&#x27;a&#x27;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>寄生式组合继承</strong></p><p>组合继承也存在效率问题，它的父类构造函数始终会调用两次，一次是创建子类原型时（prototype = new SuperType())，另一次是子类构造函数中（call调用）。</p><p>使用寄生式组合继承可以解决上面的问题</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">function</span> inheritProto<span class="keyword">type</span>(subType, superType)//使用这个代替原来的原型对象创建</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> proto<span class="keyword">type</span> = object(superType.protoType);//创建父类原型的副本</span><br><span class="line">    proto<span class="keyword">type</span>.constructor = subType;</span><br><span class="line">    subType.proto<span class="keyword">type</span> = prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);<span class="comment">//用来替换SubType.prototype = new SuperType();</span></span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h1><p><strong>定义</strong></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">mybaz</span>()&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">myQux</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的类其实是将上面的继承封装起来的一种语法糖，本质上还是上面的一套东西。类中可以包含构造方法、实例方法、get和set函数和静态方法。</p><p><strong>构造函数</strong></p><p>可以使用new对对象进行实例化，实例化会进行如下操作：</p><ol><li>在内存中创建一个新的对象</li><li>将新对象内部的[[Prototype]]指针赋值为构造函数的prototype属性</li><li>构造函数内部的this指向该对象</li><li>执行构造函数内部代码</li><li>如果构造函数返回非空对象，则返回该对象。否则返回新创建的对象</li></ol><p>如果构造函数没有定义，则默认会定义一个构造函数</p><p>类构造函数和普通构造函数的区别是，类构造函数必须要使用new，不使用会报错。而普通构造函数如果不使用new那么会将window作为this。</p><p>类中定义的constructor不会被当成构造函数，在对他使用instanceof操作符会返回false</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="title">constructor</span>(<span class="params">name, age</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;a&#x27;</span>, <span class="number">29</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person.constructor);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person.constructor(<span class="string">&#x27;b&#x27;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> Person.constructor);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上例也就说明了类的原型指向这个类而不是指向构造函数</p><h2 id="实例-原型和类成员"><a class="markdownIt-Anchor" href="#实例-原型和类成员"></a> 实例、原型和类成员</h2><p>所有构造函数中的属性和方法都不是共享的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.sayName = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.name === p2.name);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>在类块中定义的其他方法实际上都是定义于原型上的，都是共享的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    locate()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;prototype&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.locate();<span class="comment">//prototype</span></span><br></pre></td></tr></table></figure><p>类方法等同于对象属性，因此可以使用可计算值作为键</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>(<span class="string">&quot;symbolKey&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    stringKey()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;invoked stringKey&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [symbolKey]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;invoked symbolKey&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.stringKey();</span><br><span class="line">p[symbolKey]();</span><br></pre></td></tr></table></figure><p><strong>在类外部添加成员数据</strong></p><p>可以在类的外部手动添加属性，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    sayName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;Person.greeting&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.greeting = <span class="string">&#x27;My name is &#x27;</span>;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line">p.sayName(); <span class="comment">// My name is Jake</span></span><br></pre></td></tr></table></figure><h2 id="继承-2"><a class="markdownIt-Anchor" href="#继承-2"></a> 继承</h2><p>可以使用<strong>extends</strong>关键字，继承任何拥有[[Construct]]和原型的对象。这也就意味着它不仅可以继承类还可以继承构造函数。并且他会继承父类中所有属性和构造方法</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">let b = <span class="keyword">new</span> <span class="type">Bus</span>();</span><br><span class="line">console.log(b instanceof <span class="type">Bus</span>);<span class="comment">//true</span></span><br><span class="line">console.log(b instanceof <span class="type">Vehicle</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>可以使用super访问父类，可以使用super()调用父类的构造函数，但是使用时需要注意以下问题</p><ul><li>super只能在派生类构造函数和静态方法中使用</li><li>不能单独调用super，要么是用他的构造函数，要么使用它的构造方法</li><li>如果没有定义类构造函数，那么实例化子类时会调用super()</li><li>在构造函数中，不能再调用super()之前使用this</li><li>如果派生类中显示定义了构造函数，那么必须在其中调用super(),或者返回一个对象<br />例如： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> constructor()</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">this</span>.<span class="keyword">type</span> = () =&gt;&#123;console.log(<span class="keyword">this</span>);&#125;;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="symbol">&#x27;Vehicl</span>e&#x27;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> constructor()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b = <span class="keyword">new</span> <span class="type">Bus</span>();</span><br><span class="line">b.<span class="keyword">type</span>();</span><br><span class="line">console.log(b.name);</span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象基类"><a class="markdownIt-Anchor" href="#抽象基类"></a> 抽象基类</h3><p>虽然在js中并没有提供抽象类的关键字，但是我们可以手动实现</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehilce</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    constructor()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span>.target === <span class="type">Vehicle</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">&quot;can&#x27;t do this&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.foo)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">&quot;inheriting class must define foo()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    foo()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过在构造函数中使用new关键字进行检测new的目标是否是抽象类来组织抽象类的实现。我们同样可以检测是否有某个函数定义来限制必须定义某个函数（接口）</p><p><strong>类混入(继承多个类)</strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">let <span class="type">FooMixin</span> = (<span class="type">Superclass</span>) =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span></span>&#123; foo()&#123;console.log(<span class="symbol">&#x27;fo</span>o&#x27;);&#125;&#125;;</span><br><span class="line"></span><br><span class="line">let <span class="type">BarMixin</span> = (<span class="type">Superclass</span>) =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span></span>&#123; bar()&#123;console.log(<span class="string">&quot;bar&quot;</span>);&#125;&#125;;</span><br><span class="line"></span><br><span class="line">let <span class="type">BazMixin</span> = (<span class="type">Superclass</span>) =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span></span>&#123; baz()&#123;console.log(<span class="string">&quot;baz&quot;</span>);&#125;&#125;;</span><br><span class="line"></span><br><span class="line">function mix(<span class="type">BaseClass</span>, ...<span class="type">Mixins</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Mixins</span>.reduce((accumulator, current) =&gt; current(accumulator), <span class="type">BaseClass</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Mix</span>(<span class="params"><span class="type">Vehicle</span>, <span class="type">FooMixin</span>, <span class="type">BarMixin</span>, <span class="type">BaxMixin</span></span>)</span>&#123;&#125;</span><br><span class="line">let b = <span class="keyword">new</span> <span class="type">Bus</span>();</span><br><span class="line">b.foo();</span><br><span class="line">b.bar();</span><br><span class="line">b.baz();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js变量、作用域、内存</title>
    <link href="https://xinhecuican.github.io/post/fcee082f.html"/>
    <id>https://xinhecuican.github.io/post/fcee082f.html</id>
    <published>2021-05-22T12:20:00.000Z</published>
    <updated>2021-05-23T02:53:29.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="原始值和引用值"><a class="markdownIt-Anchor" href="#原始值和引用值"></a> 原始值和引用值</h1><p>原始值就是最简单的数据类型，而引用值就是对象。</p><p>原始值不能有属性，尽管给原始值添加属性不会报错</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">name</span> = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line"><span class="built_in">name</span>.age = <span class="number">27</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>.age);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>原始值赋给另一个值时，会在内存中复制一份，因此两份互不干扰</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> num<span class="number">1</span> = <span class="number">5</span>;</span><br><span class="line"><span class="attribute">let</span> num<span class="number">2</span> = num<span class="number">1</span>;</span><br><span class="line"><span class="attribute">num1</span> = <span class="number">3</span>;</span><br><span class="line"><span class="attribute">console</span>.log(num<span class="number">2</span>);//<span class="number">5</span></span><br></pre></td></tr></table></figure><p>把引用值从一个变量赋给另一个变量时，实际上是复制了指向这个对象的指针(对象本身在堆中)，因此一个变量对对象进行修改另一个也会修改。</p><p>js函数只存在值传递，也就是说参数是原变量复制一份传进去的，也就是说如果传递的是对象我们在函数中修改了对象的属性在函数外也是成立的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj.name = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//b</span></span><br><span class="line">---</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj.name = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">//如果是引用传递，那么函数外的obj的值也会随之更改，他将指向新的Object对象</span></span><br><span class="line">    obj.name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//b</span></span><br></pre></td></tr></table></figure><p>我们可以使用instanceof来判断具体的引用类型。使用方法为<code>variable instanceof constructor</code></p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);//person是<span class="built_in">Object</span>类型吗</span><br><span class="line"><span class="built_in">console</span>.log(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>);//colors是<span class="built_in">Array</span>类型吗</span><br></pre></td></tr></table></figure><h1 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h1><p>变量或函数的上下文决定了他们可以访问那些数据。每个上下文都有一个关联的<strong>变量对象</strong>，而这个上下文的所有变量和函数都存在于这个对象上，虽然无法直接访问对象，但是后台处理时会用到它。</p><p>全局上下文是最外层的上下文。在浏览器中，全局上下文是window对象，因此所有通过var定义的全局变量和函数都会成为window对象的属性和方法。let和const声明的全局变量不会挂在window对象中，因为他们声明的全局变量是无效的。</p><p>每个函数都有自己的上下文，他们在一个上下文栈中。上下文在所有代码被执行完后会销毁</p><p>例如：</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">color</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> anotherColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tempColor = anotherColor;</span><br><span class="line">        anotherColor = <span class="built_in">color</span>;</span><br><span class="line">        <span class="built_in">color</span> = tempColor;</span><br><span class="line">    &#125;</span><br><span class="line">    swapColors();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeColor();</span><br></pre></td></tr></table></figure><p><img src="/images/js%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E5%86%85%E5%AD%981.jpg" alt="" /></p><p>上下文代码执行时，有一个变量的作用域链，如图所示。里层可以访问外层，而外层不能访问里层。</p><p>with和catch都会变更上下文，catch会创建一个新的上下文。而with会添加到作用域链的尾部</p><h2 id="变量声明"><a class="markdownIt-Anchor" href="#变量声明"></a> 变量声明</h2><p><strong>var</strong></p><p>使用var时，会自动添加到最接近的上下文。在函数中，最接近的上下文是函数局部上下文。</p><blockquote><p>如果变量未经声明直接赋值，那么会被自动添加到全局上下文</p></blockquote><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1, num2)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2;<span class="comment">//直接赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">//30</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">sum</span>);<span class="comment">//30，因为它是全局上下文，所以在外部可以访问到</span></span><br></pre></td></tr></table></figure><p><strong>let</strong>和<strong>const</strong>作用域都是块级的，也就是说是由最近的一队<code>&#123;&#125;</code>决定的。</p><h1 id="垃圾回收"><a class="markdownIt-Anchor" href="#垃圾回收"></a> 垃圾回收</h1><p>js和java一样，都是使用垃圾回收机制。垃圾回收是自动回收的。基本思路是每隔一定时间会自动执行看那些变量不再使用。</p><p><strong>标记清理</strong></p><p>js最常用的垃圾回收策略是标记清理。只有在上下文中的变量才有可能被清理，不再上下文中的变量因为其他的上下文还可能使用因此永运不应该释放他们的内存。</p><p>给变量加标记的方法有多种，例如当变量进入上下文时，反转某一位，或者维护在上下文或不在上下文的列表。</p><p>垃圾回收程序运行时，会标记内存中存储的所有变量，之后会将所有在上下文以及被上下文引用的变量的标记去掉，在此之后再被标记就是待删除的了。</p><p>现在大多数浏览器都是使用这种方法。这种方式的好处是在上下文结束后会释放相关变量</p><p><strong>引用计数</strong></p><p>引用计数的思路是每个值都记录被引用的次数。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="class"><span class="keyword">object</span> </span>= <span class="keyword">new</span> <span class="type">Object</span>();<span class="comment">//引用一次</span></span><br><span class="line"><span class="keyword">var</span> objectb = <span class="class"><span class="keyword">object</span></span>;<span class="comment">//引用两次</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> </span>= <span class="literal">null</span>;<span class="comment">//引用一次</span></span><br></pre></td></tr></table></figure><p>但是有时候会导致内存泄露，例如</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objecta = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">let</span> objectb = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    </span><br><span class="line">    objecta.otherobject = objectb;</span><br><span class="line">    objectb.otherobject = objecta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在objecta和objectb都有两个引用并且是相互引用，也就是说他们永运都不会释放。</p><h2 id="内存泄露及应对"><a class="markdownIt-Anchor" href="#内存泄露及应对"></a> 内存泄露及应对</h2><p>下面是一些内存泄露的情况</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    name = <span class="string">&#x27;Jake&#x27;</span>;<span class="comment">//没类型，是全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);<span class="comment">//定时器会一直运行</span></span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">只要outer变量存在，那么name就不会被清除。</span><br></pre></td></tr></table></figure><p><strong>静态分配和对象池</strong></p><p>浏览器决定何时运行回收程序的一个标准就是对象更替的速度，如果有很多对象初始化，然后又一下子超出作用域，那么就会更频繁的调用垃圾回收程序。</p><p>例如：</p><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">function addVector(a, b)</span><br><span class="line">&#123;</span><br><span class="line">    let resultant = new Vector();</span><br><span class="line">    resultant.<span class="symbol">x</span> = a.<span class="symbol">x</span> + b.<span class="symbol">x</span>;</span><br><span class="line">    resultant.<span class="symbol">y</span> = a.<span class="symbol">y</span> + b.<span class="symbol">y</span>;</span><br><span class="line">    <span class="keyword">return</span> resultant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数是两个向量相加，其中的临时变量resultant会很快创建又被清除，造成了浪费。</p><p>解决这个问题的方法是不要创建临时变量，而始终用一个变量</p><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">function addVector(a, b, resultant)</span><br><span class="line">&#123;</span><br><span class="line">    resultant.<span class="symbol">x</span> = a.<span class="symbol">x</span> + b.<span class="symbol">x</span>;</span><br><span class="line">    resultant.<span class="symbol">y</span> = a.<span class="symbol">y</span> + b.<span class="symbol">y</span>;</span><br><span class="line">    <span class="keyword">return</span> resultant;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是从外部传入的变量那么在函数结束之后就不会被清除。但是这样的话resultant需要自己控制释放，不然可能多个结果引用同一个对象</p><p>我们可以使用对象池来管理一组对象，需要时可以使用它，不需要时释放控制权，但是只是提交给对象池，并不代表这个对象被销毁。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> v<span class="number">1</span> = vectorPool.allocate();</span><br><span class="line"><span class="attribute">let</span> v<span class="number">2</span> = vectorPool.allocate();</span><br><span class="line"><span class="attribute">let</span> v<span class="number">3</span> = vectorPool.allocate();</span><br><span class="line"></span><br><span class="line"><span class="attribute">v1</span>.x = <span class="number">10</span>;</span><br><span class="line"><span class="attribute">v1</span>.y = <span class="number">5</span>;</span><br><span class="line"><span class="attribute">v2</span>.x = -<span class="number">3</span>;</span><br><span class="line"><span class="attribute">v2</span>.y = -<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">addVector</span>(v<span class="number">1</span>, v<span class="number">2</span>, v<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="attribute">console</span>.log(v<span class="number">3</span>.x, v<span class="number">3</span>.y);//<span class="number">7</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">vectorPool</span>.free(v<span class="number">1</span>);</span><br><span class="line"><span class="attribute">vectorPool</span>.free(v<span class="number">2</span>);</span><br><span class="line"><span class="attribute">vectorPool</span>.free(v<span class="number">3</span>);</span><br></pre></td></tr></table></figure><pre class="highlight"><code class=""></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;原始值和引用值&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基础语法</title>
    <link href="https://xinhecuican.github.io/post/6e47d1b5.html"/>
    <id>https://xinhecuican.github.io/post/6e47d1b5.html</id>
    <published>2021-05-20T12:56:00.000Z</published>
    <updated>2021-05-26T11:36:03.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="html中使用javascript"><a class="markdownIt-Anchor" href="#html中使用javascript"></a> html中使用javascript</h1><p>将js插入html主要是用<code>&lt;script&gt;</code>元素，这个元素有八个属性</p><ul><li>async: 表示应该立即下载脚本，但是不阻止其它页面动作（如加载页面，加载其他脚本等），只对外部脚本有效.async标记的脚本之间没有前后顺序关系。</li><li>charset： 指定字符集，但是很少用</li><li>crossorigin： 配置相关请求的CORS（跨源资源共享）设置。<code>crossorigin=&quot;anonymous&quot;</code>表示配置文件请求不必设置凭据标识，而use-credentials表示出站请求会包含凭据</li><li>defer： 表示文档解析和显示完成后再执行脚本也是可以的，即推迟执行。有时候会在DOMContentLoaded事件之前执行（此时已经解析完<code>&lt;/html&gt;</code>了)，并且推迟执行的脚本也会按顺序执行。但是都不是绝对的。</li><li>integrity： 允许比对接收到的资源和指定的加密签名来验证子资源完整性</li><li>src： 表示包含的外部文件地址</li><li>type： 这个值始终是&quot;text/javascript&quot;</li></ul><p>使用script时，一般把<code>&lt;script&gt;</code>元素放在<code>&lt;head&gt;</code>标签内，但是他会在文档载入前解析，如果解析很慢就会感觉载入时间很长。</p><p>插入脚本的方式有：</p><ol><li>直接在html中插入<br />例如<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>需要注意在代码块中不能使用<code>&lt;/script&gt;</code>即使时在log中用引号包围也不行，想要使用必须是<code>&lt;\/script&gt;</code></li><li>外部引入<br />使用方法为<code>&lt;script src=&quot;example.js&quot;&gt;&lt;/script&gt;</code>.解释外部script时和解释行内script一样，也会阻塞。</li><li>使用js语句加载<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> script =<span class="built_in"> document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">&#x27;gibberish.js&#x27;</span>;</span><br><span class="line"><span class="type">document</span><span class="built_in">.head</span>.appendChild(script);</span><br></pre></td></tr></table></figure>这种方式加载的script自带async属性。但是这种加载方式对浏览器预加载器是不可见的，这会严重影响它在资源队列中的优先级。如果想让预加载器知道这些动态请求文件的存在，可以显式声明。例如：<code>&lt;link rel=&quot;preload&quot; href=&quot;gibberish.js&quot;&gt;</code></li></ol><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><p>基础语法和c语言类似，并且变量命名添加了<code>$</code>.并且操作符语法和python类似</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><h3 id="var"><a class="markdownIt-Anchor" href="#var"></a> var</h3><p>变量和c语言有很大不同。在c语言中，变量有int，long，short，char等类型。但是在js中并不区分这些类型，而统一使用var代替，他和python一样都是弱类型语言。</p><p>例如：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">var message = <span class="string">&quot;hi&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">message</span> = <span class="number">100</span><span class="comment">;//合法，但不推荐</span></span><br></pre></td></tr></table></figure><p>var表示的就是一个变量，它并不会随着赋值而将类型确定。</p><p>此外var声明时会自动提升到函数的顶部，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">这个可以运行，他相当于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="let"><a class="markdownIt-Anchor" href="#let"></a> let</h3><p>let和var都是声明变量，不同在于let只作用于某个块，而var作用于整个函数，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//输出a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">26</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//出错</span></span><br></pre></td></tr></table></figure><p>也就是说，let与c语言中的局部变量类似。</p><p>此外let不允许在同一个块中出现两次声明，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;<span class="comment">//允许</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age;<span class="comment">//出错</span></span><br><span class="line">如果不在同一个作用域中就没有问题了</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);<span class="comment">//26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">这里和c语言还有点不一样，外层变量可以传递到里层，而里层变量对外层没有任何影响</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//30</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);<span class="comment">//26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//30</span></span><br></pre></td></tr></table></figure><p>此外，let和var声明的其实是相同类型的变量，只是作用域不同，因此这两个的变量名不能相同</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span>;</span><br><span class="line">let <span class="keyword">name</span>;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p>并且let声明的变量不会再作用域中提升，并且不能使用let进行全局声明</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);<span class="comment">//&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>条件声明</strong></p><p>因为let作用于块作用域，所以无法检测前面是否使用了同名变量，但是由于var会自动提升变量，所以它可以在首部合并为一个声明，例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> age = <span class="number">26</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> name = <span class="string">&#x27;b&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> age = <span class="number">20</span>;<span class="comment">//出错，前面已经声明过</span></span></span><br></pre></td></tr></table></figure><blockquote><p>let经常用于for循环中</p></blockquote><p>在let出现之前，使用var进行循环变量定义有时候会出现问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(i), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出为<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line">为什么结果不是<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>呢？因为在退出循环时，i中保存的是<span class="number">5</span>，在之后的执行中会一直输出<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(i), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">输出<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line">这是因为js会为每次迭代生成一个新的<span class="keyword">let</span>变量，这样就会输出期望的值了</span><br></pre></td></tr></table></figure><h3 id="const"><a class="markdownIt-Anchor" href="#const"></a> const</h3><p>const和let基本相同，但是它在声明时必须同时初始化变量，并且禁止修改const声明的变量，否则会报错。</p><p>但是const声明限制只适用于变量的引用。也就是说，如果修改一个对象内部变量，它是管不了的</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="comment">&#123;&#125;</span>;</span><br><span class="line">person.<span class="keyword">name</span> = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//可以</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p>我们可以使用<strong>typeof操作符</strong>来查看数据类型，typeof会返回这些类型</p><ul><li>undefined: 表示值未定义.也就是var或let声明但没有初始化时的值</li><li>boolean：</li><li>string： 可以通过num.tostring()转换为字符串.可以使用单引号(’), 双引号(&quot;),反引号(`)表示。其中反引号可以跨行定义字符串，跨行字符串会保留反引号内部的空格</li><li>number： 数值,可以表示整型和浮点型，并且表示范围几乎无穷大</li><li>object： 表示值是对象或null（null表示空对象，但是null == undefined会返回true)。我们还可以使用<code>instanceof</code>来具体判断是哪种对象</li><li>function：</li><li>symbol： 表示值是符号</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;string&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(message));<span class="comment">//string</span></span><br></pre></td></tr></table></figure><p><strong>字符串插值与模板字面量</strong></p><p>他和linux中echo的用法类似，使用<code>$&#123;&#125;</code>将一个其他类型的值转换成字符串并插入某一个字符串中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> exponent = <span class="string">&#x27;second&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> interpolatedString = value + <span class="string">&#x27; to the &#x27;</span> + exponent +<span class="string">&#x27; power is &#x27;</span> + (value * value);</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">let</span> interpolatedTemplateLiteral = </span><br><span class="line"><span class="string">`<span class="subst">$&#123; value &#125;</span> to the <span class="subst">$&#123; exponent &#125;</span> power is <span class="subst">$&#123; value * value &#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>此外，模板也可以插入之前的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    value = <span class="string">`<span class="subst">$&#123;value&#125;</span>abc`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">append();<span class="comment">//abc</span></span><br><span class="line">append();<span class="comment">//abcabc</span></span><br><span class="line">append();<span class="comment">//abcabcabc</span></span><br></pre></td></tr></table></figure><p>此外，我们使用模板自变量传参时还可以让他每个插入当成一个参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, aValExpression, b, sum</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(strings);</span><br><span class="line"><span class="built_in">console</span>.log(aValExpression);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a+b&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> tag_result = simpleTag<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a+b&#125;</span>`</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">[ &#x27;&#x27;, &#x27; + &#x27;, &#x27; = &#x27;, &#x27;&#x27; ]</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//6 + 9 = 15</span></span><br><span class="line"><span class="built_in">console</span>.log(tag_result);<span class="comment">//foobar</span></span><br></pre></td></tr></table></figure><p>我们可以使用String.raw标签函数来获取原始的模板字面量内容</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(`first <span class="built_in">line</span>\nsecond <span class="built_in">line</span>`);</span><br><span class="line"><span class="comment">//first line</span></span><br><span class="line"><span class="comment">//second line</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">String</span>.raw`first <span class="built_in">line</span>\nsecond <span class="built_in">line</span>`);</span><br><span class="line"><span class="comment">//first line\nsecond line</span></span><br><span class="line"></span><br><span class="line">但是对于实际的换行符不会转义</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">String</span>.raw`first <span class="built_in">line</span></span><br><span class="line"><span class="built_in">second</span> <span class="built_in">line</span>`);</span><br><span class="line"><span class="comment">//first line</span></span><br><span class="line"><span class="comment">//second line</span></span><br></pre></td></tr></table></figure><p><strong>Symbol</strong></p><p>符号是原始值，并且符号实例是唯一且不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><p>定义： 使用Symbol()函数初始化</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">//foo是对符号的描述，可以通过这个字符串调试代码，但是这个参数和符号定义和标志无关</span></span><br><span class="line"></span><br><span class="line">也可以不传参数</span><br><span class="line"><span class="keyword">let</span> bar = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以通过Symbol.for()创建全局符号</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(symbol));<span class="comment">//symbol</span></span><br></pre></td></tr></table></figure><p>这个函数会将符号添加到全局符号表中，如果没有那么它会创建这个符号，如果有将会直接引用</p><p>并且全局符号和局部符号不等同</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> local_symbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> global_symbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(local_symbol == global_symbol);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>可以使用<code>Symbol.keyFor()</code>查询全局符号.例如<code>Symbol.keyFor(123);</code></p><p>Symbol的作用就是标识属性，下面来看一下它的使用场景</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = </span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> People =</span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, Person, People);</span><br><span class="line"><span class="built_in">console</span>.log(target);<span class="comment">//&#123; name: &#x27;b&#x27; &#125;a的name消失了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Symbol</span></span><br><span class="line"><span class="keyword">let</span> Person = </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;name&#x27;</span>)]: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> People =</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;name&#x27;</span>)]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, Person, People);</span><br><span class="line"><span class="built_in">console</span>.log(target);<span class="comment">//&#123; [Symbol(name)]: &#x27;a&#x27;, [Symbol(name)]: &#x27;b&#x27; &#125;</span></span><br><span class="line">这样合并时就可以保存两个对象的同名属性了，因为<span class="built_in">Symbol</span>之间必定不相同，所以不会冲突</span><br></pre></td></tr></table></figure><h2 id="循环和with语句"><a class="markdownIt-Anchor" href="#循环和with语句"></a> 循环和with语句</h2><p>基础的循环语句和c语言相同，</p><p><strong>for-in</strong></p><p>for-in是一种严格的迭代语句，用于枚举对象中非符号键属性（遍历一个对象中的属性）</p><p>语法： <code>for(property in expression)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> <span class="built_in">window</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用for-in遍历了window的所有属性，这里的const不是必须的，但是为了保证局部变量不被修改，推荐使用const</p><blockquote><p>对象的属性是无序的，所以多次遍历可能每次结果都不同</p></blockquote><p><strong>for-of</strong></p><p>这个是用来遍历多个对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> e <span class="keyword">of</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of会使用可迭代对象的next()方法按顺序迭代多个元素</p><p>此外，for循环中的break和continue可以使用标号，作用相当于goto,但是它不能任意跳转，只能跳出某个循环</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">out://表示第一层<span class="keyword">for</span>循环，<span class="built_in">break</span> out就是跳出这层循环</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">num</span>);</span><br></pre></td></tr></table></figure><p><strong>with</strong></p><p>with作用是把代码作用域设定为特定的对象.<strong>严格模式不允许使用with</strong></p><p>例如</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span>(location)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">qs</span> = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">hostName</span> = hostname;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">url</span> = href;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">否则要写</span><br><span class="line"><span class="keyword">let</span> <span class="attr">qs</span> = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hostName</span> = hostname;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">url</span> = href;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;html中使用javascript&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    <category term="js" scheme="https://xinhecuican.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow</title>
    <link href="https://xinhecuican.github.io/post/1b09f60c.html"/>
    <id>https://xinhecuican.github.io/post/1b09f60c.html</id>
    <published>2021-05-16T12:26:00.000Z</published>
    <updated>2021-05-30T12:58:11.630Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book">本篇博客基于此</a>。感谢龙龙老师提供的免费资料</p><p><a href="https://tensorflow.google.cn/api_docs/python/tf/keras/Sequential?hl=zh-cn">tensorflow函数文档</a></p><div class="btns rounded grid5">            <a class="button" href='https://cdn.jsdelivr.net/gh/xinhecuican/xinhecuican.github.io/pdf/TensorFlow深度学习.pdf' title='下载文档'><i class='fas fa-download'></i>下载文档</a>          </div><h1 id="tensorflow基础"><a class="markdownIt-Anchor" href="#tensorflow基础"></a> tensorflow基础</h1><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><ul><li>标量（Scaler): 单个实数，例如1.2,3.4等，维度为0，shape为[]</li><li>向量（Vector): 相当于数组，n个实数集合,维度为1， shape为[n]</li><li>矩阵（Matrix): n行m列。维度为2， shape为[n, m]</li><li>张量（Tensor): 所有维度大于2的都可以叫张量（其实上面的也可以是）， 张量的每个维度也可以称作轴（Axis)。tf的运算时基于张量的，constant和Variable函数产生的都是张量</li></ul><p>例如：</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span> = tf.constant(<span class="number">1</span>) #创建标量</span><br><span class="line"><span class="attribute">x</span> = tf.constant([<span class="number">1</span>. ,<span class="number">2</span> , <span class="number">3</span>]) #创建向量</span><br><span class="line"><span class="attribute">print</span>(x)#输出为&lt;tf.Tensor: id=<span class="number">165</span>, shape=(<span class="number">3</span>,), dtype=float<span class="number">32</span>, numpy=array([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>], type=float<span class="number">32</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="attribute">m</span> = tf.constant([[<span class="number">1</span>, <span class="number">2</span>],<span class="meta"> [3, 4]])#创建矩阵</span></span><br><span class="line"><span class="meta">constant是创建一个常量，</span></span><br></pre></td></tr></table></figure><p>tf.Variable()创建的是一个可以优化的张量。他在基础数据类型上添加了name, traiable等属性来支持计算图的创建</p><ul><li>string: 我们也可以创建字符串类型的常量或变量,同时也可以使用tensorflow提供的字符串处理函数如join(), lower(), length(), split()等</li></ul><p>例如：</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">a</span> = tf.<span class="built_in">constant</span>(<span class="string">&#x27;Hello, Deep Learning.&#x27;</span>)</span><br><span class="line">print(<span class="keyword">a</span>)</span><br><span class="line">&lt;tf.Tensor: id=<span class="number">17</span>, shape=(), dtype=<span class="keyword">string</span>, numpy=b<span class="string">&#x27;Hello, Deep Learning.&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">tf.<span class="keyword">string</span>.<span class="built_in">lower</span>(<span class="keyword">a</span>)</span><br></pre></td></tr></table></figure><ul><li>Boolean: 可以使用上面类似的方式创建Boolean类型，注意tf的bool和python的bool并不等价</li></ul><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">a</span> = tf.<span class="built_in">constant</span>(True) <span class="comment"># 创建 TF 布尔张量</span></span><br><span class="line"><span class="keyword">a</span> is True <span class="comment"># TF 布尔类型张量与 python 布尔类型比较</span></span><br><span class="line"><span class="keyword">a</span> == True <span class="comment"># 仅数值比较</span></span><br><span class="line"></span><br><span class="line">前面一个是<span class="literal">false</span>，后面一个输出<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="精度"><a class="markdownIt-Anchor" href="#精度"></a> 精度</h3><p>常用的精度有<code>tf.int16, tf.int32, tf.float16, tf.float32, tf.float64(double)</code></p><p>我们可以在创建张量时指定数据类型，例如<code>tf.constant(3.14, dtype=tf.float16)</code></p><p>我们可以通过dtype属性来读取精度。并且可以使用cast进行精度转换</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(a.dtype)</span></span> <span class="selector-id">#tf</span>.float32</span><br><span class="line"><span class="selector-tag">a</span> = tf.cast(<span class="selector-tag">a</span>, tf.float64)#转换精度</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a.dtype)</span></span> <span class="selector-id">#tf</span>.float64</span><br></pre></td></tr></table></figure><h2 id="张量的创建"><a class="markdownIt-Anchor" href="#张量的创建"></a> 张量的创建</h2><ul><li>tf.convert_to_tensor(list): 从数组或列表中创建</li><li>tf.zero(shape): 创建全零张量，例如tf.zero([3, 2]) 创建一个3 * 2的张量</li><li>tf.ones(shape): 创建全一张量</li><li>tf.fill(shape, value): 创建初始值全是某一个值的张量</li><li>tf.random.normal(shape， mean=0.0, stddev=1.0): 创建正态分布的张量,mean是均值，stddev是标准差</li><li>tf.random.uniform(shape, minval=0, maxval=none, dtype=tf.float32): 创建从minval到maxval均匀分布的张量</li><li>tf.range(limit, delta=1):创建[0, limit)，步长为1的整型序列</li></ul><p>可以使用start/:end/:step的方式进行切片，例如<code>x[:,0:28:2,0:28:2,:]</code>,这是一个四维张量</p><p>此外，可以使用<code>...</code>省略若干维度的数据。例如<code>x[0:2,...,1:]</code></p><h2 id="更改维度"><a class="markdownIt-Anchor" href="#更改维度"></a> 更改维度</h2><p>我们知道，数据在内存中多个维度，都是一维线性存储的，我们平常使用的多个维度只是为了方便访问。例如x = tf.range(96)创建了一个96个数据的一维数组，但是如果shape是[2, 4, 4, 3]在内存中和这个数组完全相同。基于这点，我们可以进行reshape</p><ul><li><p>tf.reshape(data, newshape): 注意newshape的数据总量和原张量的数据总量要相同。以上面的数据为例，2 * 4 * 4 * 3 = 96，因此可以变换。</p></li><li><p>tf.expend_dims(x, axis): 在指定维度之前插入一个新的维度,但是并不会改变数据的存储。例如最开始的维度是[28, 28], tf.expend_dims(x, axis=2)后，维度为[28, 28, 1].</p></li><li><p>tf.squeeze(data, axis): 只能删除长度为1的维度</p></li><li><p>tf.transpose(x, perm=[…]): 交换维度，perm是现在的维度顺序(最开始是[0, 1,…]<br />和前面的reshape不同的是这里的维度数量没变，但是顺序改变，在内存中的位置实际上是变化的。例如，原来是[2, 32, 32, 3]的数据（例如这是图片数据，3是通道数），现在想变成[2, 3, 32, 32]，可以tf.transpose(x, [0, 3, 1, 2])</p></li><li><p>tf.tile(x, multiples=): 复制数据，multiples是复制的次数，等于1表示不复制.返回值是一个新的张量<br />例如</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}b_1\\b_2\\b_3\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过tf.expand_dims(x, axis=0),变成</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}b_1 &amp; b_2 &amp; b_3\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p>之后<code>tf.tile(x, multiple=[2, 1])</code>变成</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}b_1 &amp; b_2 &amp; b_3\\b_1 &amp; b_2 &amp; b_3\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p></li><li><p>tf.broadcast_to(x, multiples=): 这也是复制数据的方法，但是和上面一个不同的是它并不会立刻复制，只有在需要的时候才会复制，这样可以使用一些优化手段避免不必要的数据io，提高了速度。</p><p>在不同维度的张量相加时隐式的有这个函数。例如shape为[2, 3]和shape为[3]的张量相加结果不会出错。这是因为shape为[3]的隐式使用了broadcast_to进行数据的复制，变成了[2, 3]。</p><p>自动扩展的方式是普适性。对于长度为1的维度，默认这个数据适合于当前维度的其他位置。对于新的维度，可以先扩展处长度为1的维度然后进行拓展。但是形如[32, 2]等有多个维度不是1的情况就无法自动扩展</p><p>对齐的方式是将维度向右对齐。然后将不存在的维度扩展为1，之后用已经存在的维度进行填充。<img src="/images/tensorflow1.PNG" alt="" /></p></li></ul><h2 id="运算"><a class="markdownIt-Anchor" href="#运算"></a> 运算</h2><p>加减乘除运算已经重载（乘是直接相乘而不是矩阵乘法）</p><ul><li>tf.math.log(x): 自然对数，如果是其他log可以使用换底公式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi><mo>=</mo><mfrac><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>e</mi></msub><mi>x</mi></mrow><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>e</mi></msub><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\log_{a}x = \frac{\log_{e}x}{\log_{e}a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.513324em;vertical-align:-0.5311079999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.982216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.04167428571428572em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.496108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.04167428571428572em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5311079999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><code>@</code>: 矩阵相乘运算符。此外还可以使用tf.matmul(a, b)。tensorflow的矩阵相乘可以是批量的形式，也就是当两个数的维度大于2时，会选择最后两个维度进行运算，前面的维度视为batch维度。a和b可以相乘的条件是a的倒数第一个维度必须和b的倒数第二个维度相等。</li></ul><h1 id="tensorflow进阶"><a class="markdownIt-Anchor" href="#tensorflow进阶"></a> tensorflow进阶</h1><h2 id="合并与分割"><a class="markdownIt-Anchor" href="#合并与分割"></a> 合并与分割</h2><p>合并指的是在某个维度上合并为一个张量。例如原来有一张照片它的shape为[1, 28, 28, 3]，第一个维度是照片数目，第二个和第三个指像素点数目，第四个是三个通道。现在我想把它加入其他的一堆照片中[102, 28, 28, 3]。</p><p>合并可以使用拼接(concatenate)或堆叠(stack),拼接不会产生新的维度，而堆叠会产生新的维度。</p><ul><li><p>tf.concat(tensors, axis): 按照axis维度进行合并，除了axis维度不同外，其他维度都必须相同，以上面的例子说明<code>tf.concat([a, b], axis=0)</code>.</p></li><li><p>tf.stack(tensors, axis): 堆叠会创建一个新的维度，axis指定创建新维度的位置。堆叠的张量的维度必须相同。它的作用如把两张照片合并成一个相册。</p></li><li><p>tf.split(x, num_of_size_splits, axis): num_of_size_splits是分割方案，可以直接输入一个数字表示分割为几份，也可以输入一个列表具体的控制划分方式</p><p>例如我要把十份数据划分，可以直接num_of_size_splits=10,表示划分成10份，每份大小是1，如果原来是[10, 20, 5],那么现在是[1, 20, 5].如果num_of_size_splits=[4, 2, 2, 2],那么会产生4份，第一份有四个小块[4, 20, 5],后面三个都是两小块</p></li></ul><h2 id="数据统计"><a class="markdownIt-Anchor" href="#数据统计"></a> 数据统计</h2><p><strong>向量范数</strong></p><p>向量范数是一种表示向量长度的方法，有以下几种范数</p><ol><li>L1范数：所有数的绝对值之和<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mn>1</mn></msub><mo>=</mo><munder><mo>∑</mo><mi>i</mi></munder><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||x||_1 = \sum_i |x_i |</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p></li><li>L2范数： 所有数的平方和再开根号<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mn>2</mn></msub><mo>=</mo><msqrt><mrow><munder><mo>∑</mo><mi>i</mi></munder><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">||x||_2 = \sqrt{\sum_i |x_i |^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.5199570000000002em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5200429999999998em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.4800429999999998em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702c3.3,-7.3,9.3,-11,18,-11H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80H400000v40H1017z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5199570000000002em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>-范数： 所有数的绝对值中的最大值<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∞</mi></msub><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">||x||_{\infty} = max_i(|x_i |)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p></li></ol><p>可以通过tf.norm(x, ord)求得范数，其中ord=1,2分别是l1, l2范数，ord是np.inf时是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>范数</p><p>可以使用tf.reduce_max, tf.reduce_min, tf.reduce_mean, tf.reduce_sum求最大值，最小值，均值，和。</p><p>例如：</p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">x</span> = tf.random<span class="meta">.normal(</span>[4,10])</span><br><span class="line">tf.reduce<span class="meta">_max(</span><span class="meta">x</span>,axis=1)</span><br></pre></td></tr></table></figure><p><strong>比较</strong></p><p>使用tf.equal()判断两个向量是否相等，他会返回一个和两个向量shape相同的向量，用true和false表示对应位置的数是否相同，然后使用tf.reduce_sum()就可以知道相同的个数了</p><h2 id="填充和限制"><a class="markdownIt-Anchor" href="#填充和限制"></a> 填充和限制</h2><ul><li>tf.pad(x, list): list是每个维度填充的数目，例如<code>[[0,0], [2,1], [1,2]]</code>表示第0个维度不填充,第一个维度左边填充2个，右边填充1个。第2个维度左边填充1个，左边填充两个</li><li>tf.maximum(x, a): 将数据x的上限限制为a，同理还有tf.minimum(x, a)</li><li>tf.clip_by_value(x, a, b): 下限为a，上限为b</li></ul><h1 id="tensorflow实现神经网络"><a class="markdownIt-Anchor" href="#tensorflow实现神经网络"></a> tensorflow实现神经网络</h1><p><a href="https://xinhecuican.github.io/post/7ca31f7.html">神经网络的一些基础</a></p><ul><li><p>tensorflow.keras.layers.Dense(nodes, activation=): 这个函数会自动创建隐藏层的w和b，并且会自动进行矩阵计算。nodes是输出节点个数，activation是激活函数.我们可以使用类内部成员kernel和bias获得w和b</p></li><li><p>tensorflow.keras.Sequential(): 一个容器，可以在里面创建多个层，只需要传入参数就可以自动计算</p></li><li><p>tf.keras.losses.categorical_crossentropy(y_true, y_pred, from_logits=true): softmax和交叉熵一起进行计算。y_true是真实值进行one_hot编码之后的值，y_pred是预测值，from_logits=true表示y_pred未经过softmax，为false表示经过了softmax（就不需要再进行一次softmax了），<a href="#loss">例子</a></p><p>在优化参数时，我们需要获得待优化的参数，可以使用Dense().trainable_variable获得</p></li></ul><p>首先来看全连接层。</p><p>假设我们有两个样本<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">]</mo><mo separator="true">,</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^{(1)} = [ x_1^{(1)}, x_2^{(1)}, x_3^{(1)}], x^{(2)} = [ x_1^{(2)}, x_2^{(2)}, x_3^{(2)}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>,权重如下图所示</p><p><img src="/images/tensorflow2.PNG" alt="" /></p><p>可以得知o1, o2为：</p><p><img src="/images/tensorflow3.PNG" alt="" /></p><p>即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>o</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>2</mn></msub><mo>+</mo><msub><mi>x</mi><mn>3</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>3</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">o_1 = x_1 * w_1 + x_2 * w_2 + x_3 * w_3 + b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的矩阵表示</p><p>用代码表示为：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">x = tf.normal(<span class="literal">[<span class="number">2</span>, <span class="number">784</span>]</span>)</span><br><span class="line">w1 = tf.<span class="constructor">Variable(<span class="params">tf</span>.<span class="params">random</span>.<span class="params">truncated_normal</span>([784, 256], <span class="params">stddev</span>=0.1)</span>)</span><br><span class="line">b1 = tf.<span class="constructor">Variable(<span class="params">tf</span>.<span class="params">zeros</span>([256])</span></span><br><span class="line"></span><br><span class="line">o1 = tf.matmul(x, w1) + b1</span><br><span class="line">o1 = tf.nn.relu(o1) #激活函数</span><br><span class="line"></span><br><span class="line">也可以是</span><br><span class="line">from tensorflow.keras import layers</span><br><span class="line">fc = layers.<span class="constructor">Dense(256, <span class="params">activation</span>=<span class="params">tf</span>.<span class="params">nn</span>.<span class="params">relu</span>)</span></span><br><span class="line">h1 = fc(x)</span><br></pre></td></tr></table></figure><p>如果是多个层</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">手打就是创建多个w, b, o</span><br><span class="line"></span><br><span class="line">from tensorflow.keras <span class="built_in">import</span> layers</span><br><span class="line"><span class="attr">fc1</span> = layers.Dense(<span class="number">256</span>, <span class="attr">activation=tf.nn.relu)</span></span><br><span class="line"><span class="attr">fc2</span> = layers.Dense(<span class="number">128</span>, <span class="attr">activation=tf.nn.relu)</span></span><br><span class="line"><span class="attr">fc3</span> = layers.Dense(<span class="number">64</span>, <span class="attr">activation=tf.nn.relu)</span></span><br><span class="line"><span class="attr">fc4</span> = layers.Dense(<span class="number">10</span>, <span class="attr">activation=None)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">h1</span> = fc1(x)</span><br><span class="line"><span class="attr">h2</span> = fc2(h1)</span><br><span class="line"><span class="attr">h3</span> = fc3(h2)</span><br><span class="line"><span class="attr">h4</span> = fc4(h3)</span><br><span class="line"></span><br><span class="line">如果使用Sequential容器</span><br><span class="line">from tensorflow.keras <span class="built_in">import</span> Sequential</span><br><span class="line"></span><br><span class="line"><span class="attr">model</span> = Sequential(</span><br><span class="line">    [layers.Dense(<span class="number">256</span>, <span class="attr">activation=tf.nn.relu),</span></span><br><span class="line">    layers.Dense(<span class="number">128</span>, <span class="attr">activation=tf.nn.relu),</span></span><br><span class="line">    layers.Dense(<span class="number">64</span>, <span class="attr">activation</span> = tf.nn.relu),</span><br><span class="line">    layers.Dense(<span class="number">10</span>, <span class="attr">activation=None)]</span></span><br><span class="line">)</span><br><span class="line"><span class="attr">out</span> = model(x)</span><br></pre></td></tr></table></figure><p><span id="loss">输出层</span></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">out</span> = tf.random.normal([<span class="number">2</span>, <span class="number">10</span>])<span class="comment">#假设这是输出</span></span><br><span class="line"><span class="attr">y_onehot</span> = tf.constant([<span class="number">1</span>, <span class="number">3</span>])<span class="comment"># 结果是1， 3</span></span><br><span class="line"><span class="attr">y_onehot</span> = tf.<span class="literal">on</span>e_hot(y_onehot, depth = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">loss</span> = keras.losses.categorical_crossentropy(y_onehot, out, from_logits=<span class="literal">True</span>)</span><br><span class="line"><span class="attr">loss</span> = tf.reduce_mean(loss)<span class="comment">#计算平均交叉熵损失</span></span><br></pre></td></tr></table></figure><p>反向传播可以自动求导，也就是</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.<span class="constructor">GradientTape()</span> <span class="keyword">as</span> tape:</span><br><span class="line">    上面的所有计算过程</span><br><span class="line">    grads = tape.gradient(loss, <span class="literal">[所有变量]</span>)</span><br><span class="line">    变量.assign<span class="constructor">_sub(<span class="params">l</span> <span class="operator">*</span> <span class="params">grads</span>[0])</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="keras"><a class="markdownIt-Anchor" href="#keras"></a> keras</h1><h2 id="层layers"><a class="markdownIt-Anchor" href="#层layers"></a> 层(layers)</h2><p>在tensorflow.keras.layers下有许多常见网络层类，例如全连接层，激活函数层，池化层，卷积层等，</p><ul><li>tf.keras.layers.Dense(units, activation, use_bias, kernel_initializer, bias_initializer): Dense是全连接层，units是神经元数量，activation是激活函数，kernel_initializer和bias_initializer是初始化器。默认是<code>tf.glorot_uniform_initializer</code>，可以使用<code>tf.zeros_initializer</code><br />例如： <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">self.dense = tf.keras.layers.Dense(</span><br><span class="line">         <span class="attribute">units</span>=1,</span><br><span class="line">         <span class="attribute">activation</span>=None,</span><br><span class="line">         <span class="attribute">kernel_initializer</span>=tf.zeros_initializer(),</span><br><span class="line">         <span class="attribute">bias_initializer</span>=tf.zeros_initializer()</span><br><span class="line">     )</span><br></pre></td></tr></table></figure></li><li>tf.keras.layers.Flatten(): 将input_shape变成一维的，例如input_shape是[28, 28]，经过这个函数之后变成[784]</li></ul><h2 id="容器sequential"><a class="markdownIt-Anchor" href="#容器sequential"></a> 容器(Sequential)</h2><p>容器是将多个多个层整合成一个层方便使用，它的原型是:</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">tf.keras.Sequential(</span><br><span class="line">    <span class="attr">layers=None,</span> <span class="attr">name=None</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="attr">network</span> = Sequential([ <span class="comment"># 封装为一个网络</span></span><br><span class="line">layers.Dense(<span class="number">3</span>, <span class="attr">activation=None),</span> <span class="comment"># 全连接层，此处不使用激活函数</span></span><br><span class="line">layers.ReLU(),<span class="comment">#激活函数层</span></span><br><span class="line">layers.Dense(<span class="number">2</span>, <span class="attr">activation=None),</span> <span class="comment"># 全连接层，此处不使用激活函数</span></span><br><span class="line">layers.ReLU() <span class="comment">#激活函数层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>它可以使用add()动态添加layers，例如:<code>network.add(layers.Dense(3))</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dragen1860</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>A*搜索与博弈树</title>
    <link href="https://xinhecuican.github.io/post/19899506.html"/>
    <id>https://xinhecuican.github.io/post/19899506.html</id>
    <published>2021-05-07T07:59:00.000Z</published>
    <updated>2021-05-30T01:07:18.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="8数码问题"><a class="markdownIt-Anchor" href="#8数码问题"></a> 8数码问题</h1><p>8数码问题是在一个九宫格上有8个数，初始中间一个空缺，外围随机排布，最终要8个数按顺序排列</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始</span><br><span class="line">328</span><br><span class="line">1 4</span><br><span class="line">567</span><br><span class="line"></span><br><span class="line">中间的格子可以利用，也就是说可以</span><br><span class="line">328</span><br><span class="line"> 14</span><br><span class="line">567</span><br><span class="line"></span><br><span class="line">最终</span><br><span class="line">123</span><br><span class="line">8 4</span><br><span class="line">765</span><br></pre></td></tr></table></figure><p>可以使用广度优先搜索进行遍历，那么第一层有四种情况（将上下左右4个移动到中间)，然后第二层有8种</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二层的一个例子</span><br><span class="line">328</span><br><span class="line"> 14</span><br><span class="line">567</span><br><span class="line"></span><br><span class="line">第一种</span><br><span class="line"> 28</span><br><span class="line">314</span><br><span class="line">567</span><br><span class="line">或者</span><br><span class="line">328</span><br><span class="line">514</span><br><span class="line"> 67</span><br></pre></td></tr></table></figure><p>然后就这样不断遍历，直到找到最终结果</p><p>但是这样的复杂度明显太高，我们可以定义一个函数预先判断走那条路可能得到更好的结果。</p><p>定义<code>f(n) = g(n) + h(n)</code>.</p><p>其中g(n)表示现在是第几层的搜索，h(n)表示现在和最终结果还有多少不同</p><p>拿上面的例子</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">假设现在到了</span><br><span class="line"> <span class="number">28</span></span><br><span class="line"><span class="number">314</span></span><br><span class="line"><span class="number">567</span></span><br><span class="line">则g(<span class="built_in">n</span>) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">他和最终结果</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">8</span> <span class="number">4</span></span><br><span class="line"><span class="number">765</span></span><br><span class="line">有<span class="number">2</span>个相同，因此h(<span class="built_in">n</span>) = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>然后根据上面的这个式子，每次选取最小的进行搜索，这样相比于盲目的搜索更快</p><h1 id="a算法"><a class="markdownIt-Anchor" href="#a算法"></a> A*算法</h1><p>通过上面的例子，我们对A<em>算法有了初步的了解。A</em>算法的关键就是定义</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = g(n) + h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><ul><li>g(n): 表示当前已经花费的代价。也可以说是距起点的代价</li><li>h(n): 预计到终点所需要花费的代价。也就是启发函数</li></ul><p>求解的关键就是寻找一个合适的h(n),假设从该点到终点的真实代价为r(n)</p><ul><li>h(n)始终小于r(n): 表示我们一定可以找到一条最小路径，但是如果h(n)小的越多，所遍历的点就越多，速度也就越慢</li><li>h(n) &gt; r(n): 速度很快，但是不保证可以到达终点</li><li>h(n) = r(n): 将找到最佳路径并且速度很快</li></ul><h2 id="图中hn的选择"><a class="markdownIt-Anchor" href="#图中hn的选择"></a> 图中h(n)的选择</h2><p><strong>曼哈顿距离</strong></p><p>h(n) = dis = |<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1 - x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> | + |<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_1 - y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>|</p><p><strong>对角线距离</strong></p><p>允许斜着走的时候可以考虑对角线距离.也就是允许从(0, 0)直接走到(1, 1)</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">假设走一格的代价为D， 从对角线走代价为D2</span><br><span class="line">一般可以让D2 = <span class="built_in">sqrt</span>(<span class="number">2</span>) * D(对角线是根号<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> delta_x = <span class="built_in">abs</span>(x1 - x2);</span><br><span class="line"><span class="keyword">double</span> delta_y = <span class="built_in">abs</span>(y1 - y2);</span><br><span class="line"><span class="keyword">double</span> ans = (delta_x + delta_y) * D + (D2 - <span class="number">2</span> * D) * <span class="built_in">min</span>(dx, dy)</span><br><span class="line"></span><br><span class="line">这个式子后面的含义是减去走对角线更快的那部分。因为D2 - <span class="number">2</span> * D一般是负数</span><br></pre></td></tr></table></figure><p><strong>欧几里得距离</strong></p><p>两点之间距离公式,上下也可以移动的时候可以试试这个</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">distance = \sqrt{(x_1 - x_2 )^2 + (y_1 - y_2 )^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.25612499999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.983875em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9438750000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25612499999999994em;"><span></span></span></span></span></span></span></span></span></span></p><h1 id="博弈树"><a class="markdownIt-Anchor" href="#博弈树"></a> 博弈树</h1><h2 id="博弈理论基础"><a class="markdownIt-Anchor" href="#博弈理论基础"></a> 博弈理论基础</h2><p>博弈有三个要素：博弈的参与人员、策略集和收益。博弈的目标就是为了获得尽可能多的收益。当然收益并不是指狭隘的输赢，存在双输和双赢的情况。</p><p>博弈的假设有三点，满足三点才可以进行下面的推导</p><ol><li>理性人： 博弈者足够聪明，可以选择对自己最有利的判断并执行</li><li>规则透明： 相互了解对方的策略集（例如打牌就不是，你不知道对方的牌就不知道对方接下来会怎么出牌）</li><li>自我利益最大化</li></ol><p>博弈的一个典型例子**“囚徒困境”**</p><p>警察抓到了两个嫌疑犯，但是没有证据，现在需要诱供。他对两个嫌疑犯说，如果两个人都抵赖，那么没有证据抓你们，但是我可以找一个由头给你们判一年。如果你坦白他抵赖，那么他判十年你释放。如果两个人都坦白，那么只需要判四年。</p><p><img src="/images/%E5%8D%9A%E5%BC%88%E6%A0%914.PNG" alt="" /></p><p>如上图如果a坦白，b抵赖，那么a获得好处比抵赖更多，如果b坦白，a也坦白获得的价值比抵赖更多。现在就很简单了，无论b如何选择，a选择坦白都可以获得更好的结果。于是两人都会这样选择，最后两个人都会坦白。</p><p>从直观上理解，两个人都抵赖最终可能结果会更好，但是基于完全理性人的假设却让他们避开了这个结果，最终获得双输的局面。</p><p>这其实是规则设计者精心设计的，警察想尽办法让选择坦白更为有利。此外还有旁观者（学者）视角和当事人视角进行观察。从当事人视角，选择坦白更为有利，从旁观者视角，选择抵赖更为有利。</p><p><strong>博弈的求解</strong></p><p>博弈最终就是要寻求均衡，也就是博弈参与人都不想改变当前情况。可以使用收益矩阵进行刻画并求得均衡情况。</p><ul><li>严格占优策略： 无论你如何选择，我这样选择总是最优</li><li>严格最佳应对： 如果你这样做，我这样做才可以收益最大。</li></ul><p>如果双方都有严格占优策略那么毫无疑问均衡情况就是两个都选严格占优策略的情况。</p><p>如果一方有严格占优策略那么该方必定会选严格占优策略，那么另一方也必定会选择严格最佳应对，那么此时也可以达到均衡。</p><p>但是有时候比一定有严格占优策略。例如，两个人去约会结果迷路了，他们实现指定了学校门口和车站两个地点进行集合，则此时收益矩阵为<img src="/images/%E5%8D%9A%E5%BC%88%E6%A0%915.PNG" alt="" /></p><p>这个时候我们就需要使用均衡的定义去判断均衡情况了。如果两个人都在车站或门口显然他们不想改变当前状况。如果一个在车站一个在门口那么无疑任何一个人移动位置可以得到更高的收益，于是他们此时还想变更选择，因此不是均衡情况。</p><p>可以得知上迷昂有两个均衡情况。并且可能会选择哪个是随机的。但是至少我们可以缩减选择的范围。</p><h2 id="博弈树-2"><a class="markdownIt-Anchor" href="#博弈树-2"></a> 博弈树</h2><p>例： 一字棋问题</p><p>设有一个3行3列的棋盘,如图4.5所示。两个棋手轮流走每个棋手走步时往空格上摆一个自己的棋子,谁先使自己的棋子成三子一线为赢。设MAX方的棋子用×标记。MIN方的棋子用O标记,并规定MIN方先走步。</p><p>MAX是要让结果朝有利于自己的方向发展，因此他会选评估函数最大的值，而MIN会选最小的值</p><p><img src="/images/%E5%8D%9A%E5%BC%88%E6%A0%911.png" alt="" /></p><p>定义评估函数为：</p><ul><li>若P是MAX的必胜局，则e§ = +<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></li><li>若P是MIN的必胜局， 则e§ = -<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></li><li>否则，e§ = e(+P) - e(-P).其中e(+P)是棋局上可能使x成三子的数目，e(-P)是可能使O成三子的数目。</li></ul><p>例如上图中e§ = 9 - 4 = 5</p><p>它的生成树为<img src="/images/%E5%8D%9A%E5%BC%88%E6%A0%912.PNG" alt="" /></p><p>这种直接展开状态空间树显然太大，因此需要使用一定的剪枝技术。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="bold-italic">α</mi><mo mathvariant="bold-italic">−</mo><mi mathvariant="bold-italic">β</mi><mi mathvariant="bold-italic">剪</mi><mi mathvariant="bold-italic">枝</mi></mrow></mrow><annotation encoding="application/x-tex">\boldsymbol{\alpha - \beta 剪枝}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin mathbf">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord boldsymbol" style="margin-right:0.03403em;">β</span><span class="mord cjk_fallback">剪</span><span class="mord cjk_fallback">枝</span></span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>剪枝： 任何MIN节点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>值小于等于先辈节点(MAX节点)的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>值，则该节点可以停止继续展开。因为MIN节点是要找小的，而MAX是要找大的，现在MIN节点已经小到MAX一定不会选了，MIN继续展开也只可能越来越小，因此无需展开</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>剪枝： 任何MAX节点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>值大于等于先辈节点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>值，则该节点可以停止展开。</li></ul><p>例：<img src="/images/%E5%8D%9A%E5%BC%88%E6%A0%913.PNG" alt="" /></p><ol><li>深度优先搜索找到k的值是4，然后向上到f再向下找到l的值是8，同理m的值是6。然后F是min节点，因此它的值是4</li><li>然后f节点向上，c节点得知f节点的值，现在c节点需要&gt;4的值才会更新。然后c向下到g再到n。n往上更新g为1，现在由于g小于c现在的值4，再继续找g也只会比1更小，但是c一定不会选用，没有意义，因此停止更新g。</li><li>a的值暂时为4并且他现在要比4小才会更新。然后D的值经过更新之后为5，由于D只会越来越大而A现在需要找比4小的，因此更新D没有意义，停止更新。</li></ol><p>井字棋问题求解代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> player 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ai 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNCONFIRM 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> board[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">char</span> player_side, ai_side;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_board</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; board[i][k] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">3</span>)</span><br><span class="line">            ans[i] = board[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; <span class="number">6</span>)</span><br><span class="line">            ans[i] = board[<span class="number">0</span>][i -  <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">6</span>)</span><br><span class="line">            ans[i] = board[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[i] = board[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ;k&lt;<span class="number">8</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k] != board[k][i])</span><br><span class="line">                    ans[k] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k &lt; <span class="number">6</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k] != board[i][k<span class="number">-3</span>])</span><br><span class="line">                    ans[k] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">6</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k] != board[i][i])</span><br><span class="line">                    ans[k] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k] != board[i][<span class="number">2</span>-i])</span><br><span class="line">                    ans[k] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans[i] == <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][k] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prune</span><span class="params">(<span class="keyword">int</span> owner, <span class="keyword">int</span> parent_score)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_score = UNCONFIRM;</span><br><span class="line">    <span class="keyword">int</span> ans = check();</span><br><span class="line">    <span class="keyword">if</span>(ans == ai_side)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans == player_side)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][k] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                board[i][k] = owner == player ? player_side : ai_side;</span><br><span class="line">                <span class="keyword">int</span> temp = prune(!owner, m_score);</span><br><span class="line">                <span class="keyword">if</span>(m_score == UNCONFIRM)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_score = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(owner &amp;&amp; temp &gt; m_score)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_score = temp;</span><br><span class="line">                        <span class="keyword">if</span>(m_score &gt; parent_score &amp;&amp; parent_score != UNCONFIRM)</span><br><span class="line">                        &#123;</span><br><span class="line">                            board[i][k] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                            <span class="keyword">return</span> m_score;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!owner &amp;&amp; temp &lt; m_score)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_score = temp;</span><br><span class="line">                        <span class="keyword">if</span>(m_score &lt; parent_score &amp;&amp; parent_score != UNCONFIRM)</span><br><span class="line">                        &#123;</span><br><span class="line">                            board[i][k] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                            <span class="keyword">return</span> m_score;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                board[i][k] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">round</span><span class="params">(<span class="keyword">int</span> owner)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(owner == player)</span><br><span class="line">    &#123;</span><br><span class="line">        print_board();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你的回合，请输入位置(x, y)[起点为(0, 0)]: &quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x &lt; <span class="number">0</span> || x &gt;=<span class="number">3</span> || y &lt; <span class="number">0</span> || y &gt;= <span class="number">3</span> || board[x][y] != <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">&quot;输入错误，请重新输入: &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        &#125;</span><br><span class="line">        board[x][y] = player_side;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m_score = UNCONFIRM;</span><br><span class="line">        <span class="keyword">int</span> loc_x=<span class="number">0</span>, loc_y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][k] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    board[i][k] = ai_side;</span><br><span class="line">                    <span class="keyword">int</span> temp = prune(!owner, m_score);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(temp &lt; m_score)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_score = temp;</span><br><span class="line">                        loc_x = i;</span><br><span class="line">                        loc_y = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    board[i][k] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        board[loc_x][loc_y] = ai_side;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][k] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;你想先下吗(y/n)&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> is_first;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; is_first;</span><br><span class="line">    <span class="keyword">int</span> beginner = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_first == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        player_side = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        ai_side = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">        beginner = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(is_first == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        player_side = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">        ai_side = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入错误，结束&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> check_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((check_sum = check()) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        round(beginner);</span><br><span class="line">        beginner = !beginner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(check_sum == ai_side)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ai win&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(check_sum == player_side)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;player win&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;平局&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;8数码问题&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="算法" scheme="https://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>支配、覆盖、独立、匹配</title>
    <link href="https://xinhecuican.github.io/post/fc31ea9a.html"/>
    <id>https://xinhecuican.github.io/post/fc31ea9a.html</id>
    <published>2021-05-01T05:40:00.000Z</published>
    <updated>2021-06-12T12:18:05.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="支配"><a class="markdownIt-Anchor" href="#支配"></a> 支配</h1><ul><li>支配集： 挑选出一些顶点组成支配集，使得所有其他的点都和这个集合中的点相连。</li><li>极小支配集： 支配集删去任意顶点之后不是支配集</li><li>最小支配集： 支配集中顶点数量最小的</li><li>只配速： 最小支配集中点的个数</li></ul><p><img src="/images/%E6%94%AF%E9%85%8D1.PNG" alt="" /></p><p>例如图中两个都是极小支配集，其中第一个是最小支配集。</p><p>定理： 无向图无孤立点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V_1^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>是极小支配集，则存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>V</mi><mn>2</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V_2^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>也是极小支配集，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup><mo>∩</mo><msubsup><mi>V</mi><mn>2</mn><mo>∗</mo></msubsup><mo>=</mo><mo>⊘</mo></mrow><annotation encoding="application/x-tex">V_1^* \cap V_2^* = \oslash</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">⊘</span></span></span></span></p><p>证明：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V_1^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>是支配集，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>−</mo><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V - V_1^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>也是支配集<br />反证： 如果不是支配集，那么存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi><mi>u</mi><mo>∈</mo><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>v</mi><mo>∈</mo><mi>V</mi><mo>−</mo><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∉</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">\exists u \in V_1^* , \forall v \in V - V_1^* , (u, v) \notin E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9425479999999999em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>, 因为u不是孤立点，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup><mo>−</mo><mo stretchy="false">{</mo><mi>u</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V_1^* - \{u\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">u</span><span class="mclose">}</span></span></span></span>还是支配集。所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>−</mo><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V - V_1^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>是极小支配集</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>−</mo><msubsup><mi>V</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">V - V_1^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>是支配集，那么它的子集中必定存在极小支配集</li></ol><h2 id="求最小支配集"><a class="markdownIt-Anchor" href="#求最小支配集"></a> 求最小支配集</h2><p><img src="/images/%E6%94%AF%E9%85%8D2.PNG" alt="" /></p><p>例如求上图的最小支配集</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">Ψ</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>6</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>v</mi><mn>1</mn></msub><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><msub><mi>v</mi><mn>6</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><msub><mi>v</mi><mn>6</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\Psi (v_1 , v_2 , v_3 , v_4 , v_5 , v_6 ) &amp;= (v_1 + v_2 + v_3 + v_4 )(v_2 + v_1 + v_4 )(v_3 + v_1 + v_4 )\\&amp;(v_4 + v_1 + v_2 + v_3 + v_5 + v_6 )(v_5 + v_4 + v_6 )(v_6 + v_4 + v_5)\\&amp;= v_1 v_5 + v_1 v_6 + v_4 + v_2 v_3 v_5 + v_2 v_3 v_6\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Ψ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>每一项的含义是该项是否在最小支配集中，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是否在支配集中，如果在就为真。</p><p>这个式子每个括号中以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">v_1 , v_2 ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>开头，并且括号中的其他项就是和开头的那个有连接的项。</p><p>例如： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">v_2 , v_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有连接，因此他们三个在第一个括号中</p><blockquote><p>每个括号中的含义可以表示为要么开头那项在支配集中，要么他可以被其他项支配（因为每个括号中其他项都和第一项有连接）。</p></blockquote><p>因此这个等式如果为真就表示所有顶点都可以被支配。但是求这个式子还需要化简</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(a + b)</span><span class="comment">(a + c)</span> = a + bc</span><br><span class="line">a<span class="comment">(a + b)</span> = a<span class="comment">//吸收率</span></span><br><span class="line">根据上面两个式子就可以进行化简了</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>6</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi mathvariant="normal">（</mi><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>6</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>v</mi><mn>4</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>1</mn></msub><msub><mi>v</mi><mn>6</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><msub><mi>v</mi><mn>5</mn></msub><mo>+</mo><msub><mi>v</mi><mn>2</mn></msub><msub><mi>v</mi><mn>3</mn></msub><msub><mi>v</mi><mn>6</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;(v_1 + v_2 + v_3 + v_4 )(v_2 + v_1 + v_4 )(v_3 + v_1 + v_4 )(v_4 + v_1 + v_2 + v_3 + v_5 + v_6 )(v_5 + v_4 + v_6 )(v_6 + v_4 + v_5 )\\&amp;= （v_1 + v_2 + v_4 )(v_1 + v_3 + v_4 )(v_4 + v_5 + v_6 )\\&amp;= (v_1 + v_4 + v_2 v_3 )(v_4 + v_5 + v_6 )\\&amp;= v_4 + (v_1 + v_2 v_3 )(v_5 + v_6)\\&amp;= v_4 + v_1 v_5 + v_1 v_6 + v_2 v_3 v_5 + v_2 v_3 v_6\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.500000000000002em;vertical-align:-3.5000000000000018em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.499999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.9999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">（</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.1599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.6599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="覆盖"><a class="markdownIt-Anchor" href="#覆盖"></a> 覆盖</h1><h2 id="点覆盖"><a class="markdownIt-Anchor" href="#点覆盖"></a> 点覆盖</h2><p>覆盖是选取一些点，它与所有边关联。</p><p>他也有极小点覆盖，最小点覆盖等概念。</p><p><img src="/images/%E6%94%AF%E9%85%8D3.PNG" alt="" /></p><p>例如图中都是极小点覆盖，其中第一个是最小点覆盖，点覆盖数是4</p><blockquote><p>点覆盖一定是支配集，但是极小点覆盖不一定是极小支配集</p></blockquote><p><strong>求最小点覆盖集</strong></p><p><img src="/images/%E6%94%AF%E9%85%8D4.png" alt="" /></p><ul><li>意义： 我们可以把括号中第一个点称为覆盖点（随便说的名字），每个括号的含义是覆盖点在覆盖集中或它可以被其他点覆盖。注意这里是乘而不是加，因为所有其他点合起来才可以覆盖覆盖点的每一条边。这个式子为真则表示存在一个覆盖集</li><li>化简： 可以看到每一个括号中只有两项，所以直接乘开即可。</li></ul><h2 id="边覆盖"><a class="markdownIt-Anchor" href="#边覆盖"></a> 边覆盖</h2><p>边覆盖是选取一个边的子集使得任意一个点都可以和子集中的边相连。</p><p><img src="/images/%E6%94%AF%E9%85%8D5.PNG" alt="" /></p><h1 id="独立集"><a class="markdownIt-Anchor" href="#独立集"></a> 独立集</h1><p>独立集是一个顶点的子集，子集中的任意两个点都没有边相连。</p><p>和前面不同独立集是点越多越难找，因此存在最大独立集和极大独立集</p><ul><li>极大独立集： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是独立集，但是任意再加一个点都不是独立集</li><li>最大独立集： 独立集中点数目最多的。</li></ul><p><img src="/images/%E6%94%AF%E9%85%8D6.PNG" alt="" /></p><p><strong>定理</strong>：无向图无孤立点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是极大独立集，那么他也是极小支配集</p><p>证明：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是极大独立集，那么它一定是支配集<br />反证： 如果他不是支配集，也就表示有点和集合中的任意一点都不相连，那么把这一点添加到集合中还是独立集，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是极大独立集矛盾</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是极小支配集<br />反证： 如果它不是极小支配集，那么存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup><mo>−</mo><mo stretchy="false">{</mo><mi>u</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V^* - \{u\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.772026em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">u</span><span class="mclose">}</span></span></span></span>也是支配集，那么存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>∈</mo><msup><mi>V</mi><mo>∗</mo></msup><mo>−</mo><mo stretchy="false">{</mo><mi>u</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">v \in V^* - \{u\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.772026em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">u</span><span class="mclose">}</span></span></span></span>，(u, v)中存在一条边相连，和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">V^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>是独立集相矛盾</li></ol><p>但是它的逆命题不一定成立，极小支配集不一定是极大独立集。</p><p><strong>定理</strong>： 无向图无孤立点， 如果一个集合是点覆盖，那么它的补集是独立集。</p><p>证明： 如果它的补集不是独立集，也就表示补集中有边相连，那么原集合就没有覆盖到这条边，与该集合是点覆盖相矛盾。</p><p>这条定理的逆命题也成立。<strong>根据这条定理，可以把求极大独立集的问题变成求极小点覆盖的问题</strong>。</p><h2 id="团"><a class="markdownIt-Anchor" href="#团"></a> 团</h2><p>团是图中的完全子图，也就是所有点都相互连接。</p><ul><li>极大团： 再加一个点就不是团</li><li>最大团： 点数最多的团</li></ul><p><strong>定理</strong>： 无向图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>是图G的团 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>是G的补集的独立集</p><p>推论： 如果是最(极)大团，对应着最(极)独立集</p><h1 id="匹配"><a class="markdownIt-Anchor" href="#匹配"></a> 匹配</h1><p>匹配是边的集合，并且集合中任意两条边都不相邻（顶点不重合）</p><p>他也是匹配数量越多越困难，因此存在极大匹配和最大匹配。</p><p><img src="/images/%E6%94%AF%E9%85%8D7.PNG" alt="" /></p><ul><li>饱和点： v是M（M是一个匹配集）中的边的顶点</li><li>不饱和点：…</li><li>交错路径： 在M和E-M中交替取边的路径。例如上面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>e</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>e</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">e_3 , e_4 , e_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一个交错路径</li><li>可增广交错路径： 两端都是非饱和点的交错路径</li><li>完美匹配： 没有非饱和点的匹配</li></ul><p>求解最大匹配：</p><ul><li>从一个匹配开始</li><li>逐一检查非饱和点，对每一个不饱和点寻找增广路径</li><li>得到更大匹配</li><li>递归直到没有不饱和点或增广路径</li></ul><p><img src="/images/%E6%94%AF%E9%85%8D8.PNG" alt="" /></p><p>上面是求解二部图匹配的一种算法。关键在于if语句中的判断条件。看看对面是否已经匹配或者和对面匹配的人能否换个位置。</p><p>以图中的二部图为例：</p><ul><li>首先是1进行选择，它选择了5并且将1和5的饱和置1.</li><li>然后轮到2进行选择，2发现5已经饱和了，与他它想让5匹配的点挪个位置和别人组队，这样他就可以和5进行组队了。</li><li>和5组队的是1,1再运行path发现还可以和6组队，于是他和6组队并且清除原来的标记，然后2和5组队，结束。</li><li>之后是3进行选择，3直接选择4匹配结束。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;支配&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="数学" scheme="https://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop和Spark</title>
    <link href="https://xinhecuican.github.io/post/8ecb5fd.html"/>
    <id>https://xinhecuican.github.io/post/8ecb5fd.html</id>
    <published>2021-04-22T00:12:00.000Z</published>
    <updated>2021-06-22T03:14:17.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="mapreduce"><a class="markdownIt-Anchor" href="#mapreduce"></a> Mapreduce</h1><p>mapreduce是一种编程模型，它的基本思想就是分而治之。</p><p>map()负责将一个任务分解成若干个小的任务，这些小的任务可以交给不同的计算节点去处理，Reduce()负责把这些计算结果进行合并。</p><p>例如统计词频：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">a</span> <span class="selector-tag">a</span></span><br><span class="line"><span class="selector-tag">aa</span> </span><br><span class="line"><span class="selector-tag">aaa</span></span><br><span class="line"><span class="selector-tag">bc</span></span><br><span class="line"><span class="selector-tag">de</span></span><br><span class="line"><span class="selector-tag">bc</span></span><br><span class="line"><span class="selector-tag">abc</span></span><br><span class="line"><span class="selector-tag">abc</span></span><br><span class="line">想要统计这些次出现的次数</span><br><span class="line"></span><br><span class="line">首先进行<span class="selector-tag">map</span>，例如有<span class="selector-tag">4</span>个工作节点，我们可以把每两行给一个工作节点，然后这些工作节点就会进行词频统计，最后得到</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;bc&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;de&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;bc&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;abc&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">之后把这些计算结果发给主节点，然后主节点进行<span class="selector-tag">reduce</span>， 也就是把各个工作节点产生的结果组合到一起。</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;aaa&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;bc&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;de&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;abc&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>map和reduce都可以并行化执行，也就是说map结果可以发给多个节点，然后多个节点每个处理部分工作。</p><h1 id="hadoop"><a class="markdownIt-Anchor" href="#hadoop"></a> hadoop</h1><p>hadoop是mapreduce思想的具体实现，它有自己专门的文件管理系统和任务分配系统。</p><h2 id="分布式文件系统hdfs"><a class="markdownIt-Anchor" href="#分布式文件系统hdfs"></a> 分布式文件系统（HDFS)</h2><p><img src="/images/Hadoop1.jpg" alt="" /></p><ul><li>block： hdfs中数据存储的基本单位事一个block，一般来说block的大小是64mb。块大小这么大的好处有： （1） 减少磁盘寻道时间，增加读取效率 （2）减少namenode存储开销 （3） 减少建立网络的连接成本。 但是如果里面全是小文件的话，会造成大量的空间浪费</li><li>NameNode: namenode是数据的管理者，它存储着文件的metadata<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="存储着块位置，块大小和块权限信息">[1]</span></a></sup>。一个block对应着namenode中的一条记录。并且他会不定时的存储到本地磁盘上，但不保存metadata的位置信息，而是由datanode上传这些信息</li><li>datanode： 具体存储block数据。它负责数据的读写操作。datanode会定时发送心跳报告存储的数据块信息</li><li>client： 需要获取文件的应用程序</li></ul><p>写入文件过程：</p><ol><li>client向namenode发起文件写入请求</li><li>namenode创建一个文件，并且把blockid和要写入的datanode列表发给client</li><li>client接收到信息后，会把文件写入datanodes<ol><li>客户端写入第一个datanodes</li><li>第一个datanodes写入第二个datanodes，以此类推。每次写入都会发送确认给前一个datanode，最后第一个datanode发送给客户端确认信息</li><li>客户端给namenode发送确认信息</li></ol></li></ol><p><img src="/images/dadoop2.png" alt="" /></p><p>读取文件过程：</p><ol><li>客户端向namenode发送请求</li><li>namenode返回该文件的所有block和block所在的datanodes</li><li>客户端直接读取</li></ol><p>hdfs还有一些安全策略，如检验和，副本（一般是三个副本），心跳检测，机架感知等等</p><h2 id="资源管理系统yarn"><a class="markdownIt-Anchor" href="#资源管理系统yarn"></a> 资源管理系统（yarn）</h2><p>旧有的资源管理系统</p><p><img src="/images/hadoop3.jpg" alt="" /></p><ul><li>Jobtracker: 负责资源管理，跟踪资源消耗和可用性，作业生命周期管理（调度作业任务，跟踪进度，为任务提供容错）</li><li>tasktracker: 加载或关闭任务，报告任务状态</li></ul><p>但是他有一些问题：</p><ul><li>Jobtracker存在单点故障，如果它出问题整个系统都不能运行</li><li>jobtracker完成了太多任务</li><li>tasktracker将任务强制划分成了map slot和reduce slot。如果系统中只有map或reduce就会带来资源的浪费</li></ul><p>yarn针对这些问题做出了一些改进，他将jobtracker的职责进行了拆分，分成了资源管理和任务调度两个部分。</p><p><img src="/images/hadoop4.jpg" alt="" /></p><ul><li>ResourceManager: 全局资源调度</li><li>NodeNamager： 单个节点的资源管理</li><li>ApplicationManager： 单个作业管理。主要是创建一系列的监控进程来跟踪作业的进度，同时获取输入分片，为每一个分片创建一个 Map task 和相应的 reduce task Application Master 还决定如何运行作业，如果作业很小（可配置），则直接在同一个 JVM 下运行</li><li>container： 资源申请的单位和任务运行的容器</li></ul><p>具体步骤</p><ol><li>Job submission： 从ResourceManager中获得一个Application ID来检测作业输出配置，计算输入分片，拷贝作业资源（job jar， 配置文件， 分片信息）到HDFS， 以便后面任务的执行</li><li>Job initialization： ResourceManager把作业递交给schedule并且schedule分配一个<strong>container</strong>， 然后ResourceManager加载一个<strong>ApplicationManager</strong>并且给<strong>nodeManager</strong></li><li>taskAssignment： ApplicationManager向Resource Manager申请资源</li><li>task execution: ApplicationMaster 根据 ResourceManager 的分配情况，在对应的 NodeManager 中启动 Container 从 HDFS 中读取任务所需资源（job jar，配置文件等），然后执行该任务</li><li>定时将任务的进度和状态报告给 ApplicationMaster Client 定时向 ApplicationMaster 获取整个任务的进度和状态。client也会定时检测整个作业是否完成，会清空临时文件，目录等。</li></ol><h2 id="mapreduce-2"><a class="markdownIt-Anchor" href="#mapreduce-2"></a> mapreduce</h2><p>大致流程<br /><img src="/images/hadoop6.png" alt="" /></p><p>首先通过inputformat决定数据类型，然后拆分成一个个inputsplit，每一个inpusplit交给一个map执行，RecoderReader读取inputsplit提交给map</p><p><strong>inputformat</strong></p><p>功能：</p><ul><li>验证文件的正确性</li><li>将输入文件进行逻辑分片</li><li>提供RecoderReader的实现，读取inputsplit提交给mapper</li></ul><p>一般是每一行代表一个记录</p><p><strong>inputsplit</strong></p><p>inputsplit并没有真正分片，只是提供了分片的方法，也就是location和length</p><p><strong>map</strong></p><p>当RecoderReader真正将文件分片并且提交到每一个mapper后，mapper开始工作。</p><p>每一个mapper都有循环内存缓冲区（默认100mb），当缓存内容达到80%后，后台线程开始百内容写到文件，同时mapper还可以使用剩下20%的内存。</p><p>每次写文件时都是产生一个新的文件进行写入，并且在写入文件前还会按照reduce的要求进行分区和排序，之后在map结束之后会把这些文件进行合并。合并完成之后reduce就可以来拷贝数据了。</p><p><strong>reduce</strong></p><p>reduce的输入数据就是map的输出数据，这些数据是分布在集群中的，所以只要有任务完成，reduce就会把数据进行拷贝，默认拷贝线程为5.</p><p>当所有map的数据都获得之后，就会开始归并，这个阶段可能要进行多次。例如每次把十个文件归并成1个，如果总共50个文件，那么第一次归并成5个文件，但是第二次就不会再归并了，直接提交给reduce函数。</p><h1 id="spark"><a class="markdownIt-Anchor" href="#spark"></a> spark</h1><p>hadoopmap中间结果需要存入硬盘，即使使用了循环内存缓冲区，但是速度还是很慢。而spark中间结果存储在内存中，并且采用了先进的架构，因此它的速度比hadoop<strong>快十倍到百倍不等</strong>。</p><p>spark支持python和java两种语言，并且它实际上是hadoop的补充，因此也可以用在hadoop上</p><h2 id="rdd"><a class="markdownIt-Anchor" href="#rdd"></a> RDD</h2><p><a href="https://www.cnblogs.com/qingyunzong/p/8899715.html">RDD主要是从这篇博客中学习的</a></p><p>RDD叫弹性分布式数据集，是spark中对数据的抽象，这些数据可以全部或者部分缓存在内存中，在多次计算之间重复利用。</p><p>RDD属性：</p><ul><li>分片（Partition）： 是数据集的基本单位。每一个分片都会当做一个计算任务处理。用户可以在创建RDD时指定分片数目。如果没有指定，其数目为程序所分配的cpu数目。</li><li>计算函数： 每个分片都会运行这个函数</li><li>依赖关系： RDD每次转换都会产生新的RDD，在分区数据丢失时，RDD通过这个依赖关系恢复数据。</li><li>分片函数： 只有(key, value)类型的才会有分片函数。分片函数可以是哈希也可以是一个range</li></ul><p><img src="/images/spark1.png" alt="" /></p><p><strong>创建</strong></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">data_from_file</span> = sc.textfile(filename)//从文件中创建</span><br><span class="line"><span class="attr">data</span> = sc.parallelize(array)<span class="comment">; //从集合中创建（可以是数据，也可以是map）</span></span><br></pre></td></tr></table></figure><p><strong>RDD持久化</strong></p><p>如果一个rdd被多次使用，则需要考虑持久化</p><p>持久化之后，下次查询rdd时，就可以被快速访问，不需要计算</p><p>可以使用persist或cache方法进行持久化</p><h2 id="rdd的操作"><a class="markdownIt-Anchor" href="#rdd的操作"></a> RDD的操作</h2><p><img src="/images/spark2.PNG" alt="" /></p><p>RDD的任何transform都是惰性的，也就是说transform时并不会真正执行，只有运行action后才会真正执行。</p><h3 id="transform"><a class="markdownIt-Anchor" href="#transform"></a> transform</h3><p>transform作用在一个RDD上，产生一个新的RDD</p><ul><li>map(func): 返回一个新的rdd，新的rdd中每一个元素都由func转化得来</li><li>filter(func): 新rdd中元素由func计算得true而来</li><li>mapPartitions(func): 类似于map，但是独立的在每一个分片上进行</li><li>mapPartitionsWithIndex(func)</li><li>sample(withReplacement, fraction, seed): 按照fraction比例进行采样，可以指定是否使用随机数进行替换，seed是随机数种子</li><li>union(otherDataset): 合并</li><li>intersection(otherDataset): 交集</li><li>distinct([numtasks]): 补集</li><li>groupByKey([numtasks]): 在一个（K， V）的RDD上调用，返回一个（K，Iterator(V))的RDD</li><li>sortByKey([ascending], [numtasks]): ascending是排序方式，</li><li>sortBy(func, [ascending], [numtasks]):</li><li>join(otherDataset, [numtasks]): 在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素对在一起的(K,(V,W))的RDD  相当于内连接（求交集）</li><li>pipe(command, [envVars]): 调用外部程序</li><li>reparation(num): 重新分区，num是分区数量</li></ul><h3 id="action"><a class="markdownIt-Anchor" href="#action"></a> Action</h3><ul><li>reduce(func): 通过func</li><li>collect(): 以数组形式返回所有元素</li><li>count(): 返回元素个数</li><li>first(): 返回第一个元素</li><li>take(n): 返回前n个元素</li><li>takesample(): 和上面一样</li><li>saveAsTextFile(filepath):</li><li>countByKey(): 返回一个(K, int)类型的map</li><li>foreach(func): 在数据集每一个元素上，运行func进行更新</li><li>reduce(func): 并行整理RDD中的每个元素，例如RDD中元素为(1, 2, 3, 3),则<code>rdd.reduce((x, y) =&gt; x + y);</code>结果为9</li></ul><h2 id="spark执行过程"><a class="markdownIt-Anchor" href="#spark执行过程"></a> spark执行过程</h2><p>spark的执行可以看成一个DAG（有向无环图）</p><p><img src="/images/spark3.PNG" alt="" /></p><p>我们可以把这些RDD之间的依赖关系分为两种，宽依赖和窄依赖</p><ul><li>窄依赖： 一个父RDD最多被一个子RDD调用，例如map，fliter，union等</li><li>宽依赖： 指子RDD分区依赖于父RDD的所有分区。例如grouByKey, reduceByKey, sort等</li></ul><p><img src="/images/spark4.PNG" alt="" /></p><p>根据依赖关系的不同，spark将一个job分解成不同的stage，stage之间的依赖关系就形成了DAG图。</p><p>一般遇到了宽依赖就划分一个新的stage<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">存储着块位置，块大小和块权限信息<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;mapreduce&quot;&gt;&lt;a class=&quot;markdownIt-A</summary>
      
    
    
    
    <category term="并行" scheme="https://xinhecuican.github.io/categories/%E5%B9%B6%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>时序逻辑设计</title>
    <link href="https://xinhecuican.github.io/post/30a5dc7e.html"/>
    <id>https://xinhecuican.github.io/post/30a5dc7e.html</id>
    <published>2021-04-20T10:40:00.000Z</published>
    <updated>2021-06-23T09:09:48.919Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>时序逻辑电路的输出是由上一刻的输出和这一刻的输入共同决定，也就是说时序电路带有记忆。</p><h1 id="锁存器和触发器"><a class="markdownIt-Anchor" href="#锁存器和触发器"></a> 锁存器和触发器</h1><h2 id="双稳态电路"><a class="markdownIt-Anchor" href="#双稳态电路"></a> 双稳态电路</h2><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A11.png" alt="" /></p><p>例如Q是1，则经过L1后变为0，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 为0，然后又给L2输入，再回到Q还是1。所以Q始终为1，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>始终为0，因此称为双稳态电路。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF2.png" alt="" /></p><p>这是它的等价形式，注意这张图是有问题的，L1和L2要变换位置。</p><h2 id="sr锁存器"><a class="markdownIt-Anchor" href="#sr锁存器"></a> SR锁存器</h2><p>上面的双稳态电路不方便输入，因此SR锁存器在双稳态电路上做了改进。<br /><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF3.png" alt="" /></p><p>如图，添加了R和S两个输入端，当R和S为下列值时，Q输出为</p><table><thead><tr><th>R(reset)</th><th>S(set)</th><th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">Q^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9657709999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>(Q下一时刻状态)</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>Q(保持)</td></tr><tr><td>0</td><td>1</td><td>1(置位)</td></tr><tr><td>1</td><td>0</td><td>0(复位)</td></tr><tr><td>1</td><td>1</td><td>x</td></tr></tbody></table><p>主要是<span id="不稳定">二者都为1</span>的情况。二者都为1时，Q和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>都是0，这就违背了Q和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>的本意。</p><p>并且在二者变成0（保持状态)之后，如果是同时变成0，那么Q和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>先同时变成1，然后同时变成0，这样来回震荡。</p><p>当然同时改变时不可能的，如果R先变成0，那么Q为1，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>为0。反之Q为0，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>为1.</p><p>因此二者同时为1时会造成电路不稳定，因此二者同时为一是禁止的。</p><h2 id="d锁存器"><a class="markdownIt-Anchor" href="#d锁存器"></a> D锁存器</h2><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF4.png" alt="" /></p><ul><li>CLK=0, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">Q^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9657709999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> = Q，也就是锁存器的值不会变化，锁存器是不透明的</li><li>CLK=1， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">Q^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9657709999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> = D, 这时候可以把它当成一根导线，锁存器是透明的（没有作用）。</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF5.png" alt="" /></p><p>这是他的原理图，他在SR锁存器上做了一些补充，避免了因为S和R同时为1导致的一些奇奇怪怪的现象。</p><h2 id="d触发器"><a class="markdownIt-Anchor" href="#d触发器"></a> D触发器</h2><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF6.png" alt="" /></p><p>D触发器时在CLK从0到1的瞬间对D进行采样，然后一直保持这个状态，知道下一次从0到1才会重新改变。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF7.png" alt="" /></p><p>当CLK=0时，主锁存器开启，也就是说D的状态就是N1的状态，但是从锁存器关闭，总的输出还是上一时刻的输出。</p><p>CLK=1，从0到1的一瞬间把主锁存器关闭，也就是说N1的状态就是D最后时刻的状态，然后从锁存器打开，N1的状态直接输出</p><h3 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h3><p>寄存器是由一个共享的CLK控制多个D触发器组成。<img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF8.png" alt="" /></p><h3 id="带使能端的触发器"><a class="markdownIt-Anchor" href="#带使能端的触发器"></a> 带使能端的触发器</h3><p>EN=0时，使能端处于保持状态（也就是CLK=0的状态）。EN=1时，不影响正常工作。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF9.png" alt="" /> <img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF10.png" alt="" /></p><p>如图是两种使能端的实现方式。看起来第二种方法要好，但实际上第一种方法更优。因为第二种方法会影响CLK工作（不同的与门所需时间不同），可能导致原本的同步电路变成异步电路（如上面的寄存器）</p><h3 id="带复位或置位功能的触发器"><a class="markdownIt-Anchor" href="#带复位或置位功能的触发器"></a> 带复位或置位功能的触发器</h3><p>当复位为1时，触发器被置0, 复位为0时不影响电路正常工作。</p><p>复位分为两种形式：</p><ul><li>同步复位： 只在上升沿复位</li><li>异步复位： 只要reset位置1就进行复位</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF11.png" alt="" /><br />如图是一种同步复位的实现方式。</p><p>而置位就是将触发器置为1，和复位大致相同。</p><h1 id="同步时序电路"><a class="markdownIt-Anchor" href="#同步时序电路"></a> 同步时序电路</h1><p>同步时序电路中有一个时钟输入，时钟的上升沿表示电路发生改变的时间。当前状态称为<strong>现态</strong>，下一个状态称为<strong>次态</strong>。</p><p>同步时序电路的组成规则</p><ul><li>电路中的模块是寄存器或组合逻辑电路</li><li>模块中至少包含一个寄存器</li><li>所有寄存器都共用一个信号</li><li>电路的每个环路都至少包含一个寄存器</li></ul><p>例如<img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF12.png" alt="" />是同步时序电路，而</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF13.png" alt="" />不是时序逻辑电路，因为它是锁存器不是触发器</p><p>两种常见的同步时序电路： 有限状态机和流水线</p><h2 id="有限状态机"><a class="markdownIt-Anchor" href="#有限状态机"></a> 有限状态机</h2><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF14.png" alt="" /></p><p>这两种有限状态机都受时钟信号的控制，寄存器前面是用来决定下一个状态的，它由输入和当前状态共同决定。而触发器后面就是处理信号模块。</p><p>moore机的输出信号不由输入信号直接决定，并且它只有在时钟上升沿才会发生改变。</p><p>mealy机的输出信号直接由输入信号决定，并且它在任意时刻输出都有可能改变。</p><p>例如： 交通信号灯的设计</p><p>输入： 两个交通传感器 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>A</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">T_A , T_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.当有人经过时返回True</p><p>输出，两个交通信号灯<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>A</mi></msub><mo separator="true">,</mo><msub><mi>L</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">L_A , L_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.他们都有红绿黄三种状态</p><p>有一个5s的时钟，当时钟到达时，根据传感器的情况进行改变。此外还有一个复位键。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF15.png" alt="" /></p><ul><li>画状态转换图.如果当前是绿灯并且有行人通过不做改变，如果没有行人通过就变成黄灯，5s后变成红灯</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF16.PNG" alt="" /></p><ul><li>画出状态转换图纸后，将其转换为状态转换表</li></ul><table>   <tr>     <td colspan="2">现态</td>     <td colspan="2">输入</td>     <td colspan="2">次态</td>   </tr>   <tr>     <td>S1</td>     <td>S0</td>     <td>Ta</td>     <td>Tb</td>      <td>S1'</td>     <td>S0'</td>   </tr>   <tr>     <td>0</td>     <td>0</td>     <td>0</td>     <td>x</td>     <td>0</td>     <td>1</td>   </tr>   <tr>     <td>0</td>     <td>0</td>     <td>1</td>     <td>x</td>     <td>0</td>     <td>0</td>   </tr>   <tr>     <td>0</td>     <td>1</td>     <td>x</td>     <td>x</td>     <td>1</td>     <td>0</td>   </tr>   <tr>     <td>1</td>     <td>0</td>     <td>x</td>     <td>0</td>     <td>1</td>     <td>1</td>   </tr>   <tr>     <td>1</td>     <td>0</td>     <td>x</td>     <td>1</td>     <td>1</td>     <td>0</td>   </tr>   <tr>     <td>1</td>     <td>1</td>     <td>x</td>     <td>x</td>     <td>0</td>     <td>0</td>   </tr></table><p>我们认为00是S0状态，01是S1状态，以此类推。也就是说四种状态需要两个二进制位，需要两个触发器。</p><p>同理，我们可以画出输出的状态转换表</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF18.png" alt="" /></p><p>由于输出有红绿黄三种状态，所以同样需要两位输出表示状态。用00表示绿，01表示黄，10表示红。</p><ul><li>化简</li></ul><p>当我们把真值表画出来后，就可以用卡诺图或者直接进行化简了。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msubsup><mi>S</mi><mn>1</mn><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>S</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msubsup><mi>S</mi><mn>0</mn><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>T</mi><mi>A</mi></msub><mo>+</mo><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>T</mi><mi>B</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mrow><mi>A</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mrow><mi>A</mi><mn>0</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mrow><mi>B</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mrow><mi>B</mi><mn>0</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S_1^{&#x27;} &amp;= S_1 \oplus S_0\\S_0^{&#x27;} &amp;= S_1 S_ 0 T_A + S_1 S_0 T_B\\L_{A1} &amp;= S_1\\L_{A0} &amp;= S_1 S_0\\L_{B1} &amp;= S_1\\L_{B0} &amp;= S_1 S_0\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.304960000000001em;vertical-align:-4.40248em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.902480000000001em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9924799999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.25752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9924799999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.7575200000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.2575200000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.7575200000000009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.7424799999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.40248em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.902480000000001em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.25752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.7575200000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.2575200000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.7575200000000009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.7424799999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.40248em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>例2：</p><p>一个蜗牛在一条写满0和1的纸带上爬行。当它爬过的最后两位是01时，蜗牛会对着你微笑。请设计一个Mealy型状态机来模拟蜗牛的行为。</p><ul><li>状态转换图</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF19.PNG" alt="" /></p><p>除号左边是当前输入，右边是输出。例如在状态S0时输入0，输出为0，如果输入一直是0那么转到状态S1.</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF20.png" alt="" /></p><h2 id="从电路导出状态机"><a class="markdownIt-Anchor" href="#从电路导出状态机"></a> 从电路导出状态机</h2><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF21.png" alt="" /></p><p>上图是一个开锁器的电路，我们需要根据这个电路导出状态转换图。</p><ul><li>首先得出次态方程和输出方程：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msubsup><mi>S</mi><mn>1</mn><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>0</mn></msub><mover accent="true"><msub><mi>A</mi><mn>1</mn></msub><mo>ˉ</mo></mover><msub><mi>A</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msubsup><mi>S</mi><mn>2</mn><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mover accent="true"><msub><mi>S</mi><mn>1</mn></msub><mo>ˉ</mo></mover><mover accent="true"><msub><mi>S</mi><mn>0</mn></msub><mo>ˉ</mo></mover><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>U</mi><mi>n</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S_1^{&#x27;} &amp;= S_0 \bar{A_1} A_0\\S_2^{&#x27;} &amp;= \bar{S_1} \bar{S_0} A_1 A_0\\Unlock &amp;= S_1\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80496em;vertical-align:-2.15248em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65248em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9924799999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.00752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9924799999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.50752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15248em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65248em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.00752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.50752em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15248em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>之后根据方程写出状态转换表</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF22.png" alt="" /></p><p>可以看到其他三个状态中没有任何一个次态会转到11，也就是11状态不可达，因此可以直接把11状态删去</p><p>因此一共有三个状态00， 01， 10,然后根据状态转换表在这三种状态中进行转换即可</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF23.PNG" alt="" /></p><h1 id="时序问题"><a class="markdownIt-Anchor" href="#时序问题"></a> 时序问题</h1><p>在时钟信号到来时有一段时间内输入信号是不可以改变的，贸然改变可能会导致如<a href="#%E4%B8%8D%E7%A8%B3%E5%AE%9A">前面</a>那样的不稳定状态。</p><ul><li>建立时间： 在时钟信号到来前输入信号需要稳定的时间</li><li>保持时间： 在时钟信号到来后需要保持稳定的时间。</li><li>孔径时间： 也就是总的需要保持稳定的时间，等于<strong>建立时间+保持时间</strong></li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF24.PNG" alt="" /></p><ul><li>最小延迟(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>c</mi><mi>c</mi><mi>q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{ccq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)： 在时钟有效沿到达后后面的器件开始改变的最小时间</li><li>传播延迟(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>c</mi><mi>q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pcq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)： 改变的最大时间</li></ul><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF25.png" alt="" /></p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF26.png" alt="" /></p><p>首先<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>c</mi><mi>q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pcq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是寄存器<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的传播延迟. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>可以看成中间的组合逻辑电路的传播延迟，而最后的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{setup}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是建立时间。</p><p>也就是说一个时钟周期的时间最少为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>c</mi><mi>q</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>p</mi><mi>d</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pcq} + t_{pd} + t_{setup}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,假设时钟周期为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">T_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>d</mi></mrow></msub><mo>≤</mo><msub><mi>T</mi><mi>c</mi></msub><mo>−</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mrow><mi>p</mi><mi>c</mi><mi>q</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{pd} \le T_c - (t_{pcq} + t_{setup})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">T_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是由研发总监和市场部提出，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>c</mi><mi>q</mi></mrow></msub><mi mathvariant="normal">和</mi><msub><mi>t</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pcq}和t_{setup}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是由采购的硬件决定，这两个都没有办法改变，因此只有缩短<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>才能保证没有不稳定状态。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF27.PNG" alt="" /></p><p>这里指的是传播延迟，可能存在寄存器和组合电路的最小延迟之和小于保持时间，这会导致还没有过保持时间但是D2已经开始改变。因此</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>𝑡</mi><mrow><mi>h</mi><mi>𝑜</mi><mi>𝑙</mi><mi>𝑑</mi></mrow></msub><mo>≤</mo><msub><mi>𝑡</mi><mrow><mi>𝑐</mi><mi>𝑐</mi><mi>𝑞</mi></mrow></msub><mo>+</mo><msub><mi>𝑡</mi><mrow><mi>𝑐</mi><mi>𝑑</mi></mrow></msub><mspace linebreak="newline"></mspace><msub><mi>𝑡</mi><mrow><mi>𝑐</mi><mi>𝑑</mi></mrow></msub><mo>≥</mo><msub><mi>𝑡</mi><mrow><mi>h</mi><mi>𝑜</mi><mi>𝑙</mi><mi>𝑑</mi></mrow></msub><mi mathvariant="normal">−</mi><msub><mi>𝑡</mi><mrow><mi>𝑐</mi><mi>𝑐</mi><mi>𝑞</mi></mrow></msub></mrow><annotation encoding="application/x-tex">𝑡_{ℎ𝑜𝑙𝑑}≤𝑡_{𝑐𝑐𝑞}+𝑡_{𝑐𝑑}\\𝑡_{𝑐𝑑}≥𝑡_{ℎ𝑜𝑙𝑑}−𝑡_{𝑐𝑐𝑞}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><h1 id="时序逻辑建模always_ff"><a class="markdownIt-Anchor" href="#时序逻辑建模always_ff"></a> 时序逻辑建模(always_ff)</h1><p>always过程块的结构如下</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">always <span class="meta">@(sensitivity</span> list)</span><br><span class="line">    statements;</span><br><span class="line"><span class="meta">@后面的是敏感事件列表，只有触发敏感事件才会激活always块</span></span><br></pre></td></tr></table></figure><p>always_ff用来表示触发器，例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> flop ( <span class="keyword">input</span>   <span class="keyword">logic</span>          clk, </span><br><span class="line">                      <span class="keyword">input</span>   <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  d, </span><br><span class="line">                      <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  q);</span><br><span class="line">  <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">          q &lt;= d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>它的输出为：<img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A128.png" alt="" /></p><p>可以看到，通过这种建模结果会有寄存器出现。</p><ul><li>posedge: 表示这个变量会在上升沿触发</li><li>&lt;=: 非阻塞性赋值，也就是说这些语句都是并发的，会一起执行。这就需要通过寄存器进行同步了，例如下面这个例子</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> syncgood( <span class="keyword">input</span>  <span class="keyword">logic</span>  clk,</span><br><span class="line">                              <span class="keyword">input</span>  <span class="keyword">logic</span>  d,</span><br><span class="line">                              <span class="keyword">output</span> <span class="keyword">logic</span> q);</span><br><span class="line">    <span class="keyword">logic</span> n1;</span><br><span class="line">    <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        n1 &lt;= d;  <span class="comment">// 非阻塞赋值</span></span><br><span class="line">        q   &lt;= n1; <span class="comment">// 非阻塞赋值</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>输出为<br /><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A129.png" alt="" /></p><p>我们可以把它当成一个次态方程，每一次触发时右边的值都会同步的赋值给左边的值。</p><p>而如果不使用非阻塞性赋值</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> syncbad(<span class="keyword">input</span>  <span class="keyword">logic</span> clk,</span><br><span class="line">                <span class="keyword">input</span>  <span class="keyword">logic</span> d,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> q);</span><br><span class="line">    <span class="keyword">logic</span> n1;</span><br><span class="line">    <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        n1 = d;  <span class="comment">// 阻塞赋值</span></span><br><span class="line">        q   = n1; <span class="comment">// 阻塞赋值</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A130.png" alt="" /></p><p>我们也可以添加reset位</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> flopr ( <span class="keyword">input</span>   <span class="keyword">logic</span>          clk,</span><br><span class="line">          <span class="keyword">input</span>   <span class="keyword">logic</span>          reset, </span><br><span class="line">          <span class="keyword">input</span>   <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  d, </span><br><span class="line">          <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  q);</span><br><span class="line">         <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">             <span class="keyword">if</span> (reset)   q &lt;= <span class="number">4&#x27;b0</span>;<span class="comment">//同步复位</span></span><br><span class="line">             <span class="keyword">else</span>          q &lt;= d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> flopr ( <span class="keyword">input</span>   <span class="keyword">logic</span>          clk,</span><br><span class="line">                        <span class="keyword">input</span>   <span class="keyword">logic</span>          reset, </span><br><span class="line">                        <span class="keyword">input</span>   <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  d, </span><br><span class="line">                        <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">3</span>:<span class="number">0</span>]  q);</span><br><span class="line">         <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> reset)<span class="comment">//异步复位</span></span><br><span class="line">             <span class="keyword">if</span> (reset)   q &lt;= <span class="number">4&#x27;b0</span>;</span><br><span class="line">             <span class="keyword">else</span>          q &lt;= d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="时序逻辑建模的应用"><a class="markdownIt-Anchor" href="#时序逻辑建模的应用"></a> 时序逻辑建模的应用</h2><p><strong>移位计数器</strong></p><p>功能：在每一个时钟内，每一个寄存器的内容都向右移动一位，最前面的位移入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>作用： 可以把并行变成串行，可以用在网络传输中。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A131.png" alt="" /></p><p>我们可以对他稍作改进，可以一次性输入这么多位</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A132.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>D</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">D_0 , D_1 , ... , D_{N-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>是输入，而Load决定是否需要输入。每过一个时钟周期所有寄存器都会接受前一个的输入。建模语句为：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> shiftreg #(<span class="keyword">parameter</span> N=<span class="number">8</span>)</span><br><span class="line">                            ( <span class="keyword">input</span>  <span class="keyword">logic</span>                 clk,</span><br><span class="line">                              <span class="keyword">input</span>  <span class="keyword">logic</span>                 reset, load,</span><br><span class="line">                              <span class="keyword">input</span>  <span class="keyword">logic</span>                 sin,</span><br><span class="line">                              <span class="keyword">input</span> <span class="keyword">logic</span>    [N-<span class="number">1</span>: <span class="number">0</span>]  q                              </span><br><span class="line">                              <span class="keyword">output</span> <span class="keyword">logic</span> [N-<span class="number">1</span>: <span class="number">0</span>]  q</span><br><span class="line">                              <span class="keyword">output</span> <span class="keyword">logic</span>               sout );</span><br><span class="line">    <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> reset)</span><br><span class="line">        <span class="keyword">if</span> (reset)             q &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (load)      q &lt;= d;</span><br><span class="line">        <span class="keyword">else</span>                    q  &lt;= &#123; q[N-<span class="number">2</span> : <span class="number">0</span>], sin &#125;;</span><br><span class="line">    <span class="keyword">assign</span> sout = q[N-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>有限状态机的建模</strong></p><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A133.png" alt="" /></p><p>这是一个典型的moore型状态机，它的建模语句为</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> divideby3FSM ( <span class="keyword">input</span>  <span class="keyword">logic</span>  clk, </span><br><span class="line">                                      <span class="keyword">input</span>  <span class="keyword">logic</span>  reset, </span><br><span class="line">                                      <span class="keyword">output</span> <span class="keyword">logic</span> q);</span><br><span class="line">   <span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="keyword">logic</span> [<span class="number">1</span>:<span class="number">0</span>] &#123;S0, S1, S2&#125;  statetype;</span><br><span class="line">   statetype [<span class="number">1</span>:<span class="number">0</span>] state, nextstate;  </span><br><span class="line">   <span class="comment">// 寄存器</span></span><br><span class="line">   <span class="keyword">always_ff</span> @ (<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> reset)</span><br><span class="line">      <span class="keyword">if</span> (reset)   state &lt;= S0;</span><br><span class="line">      <span class="keyword">else</span>          state &lt;= nextstate;</span><br><span class="line">   <span class="comment">// 次态逻辑</span></span><br><span class="line">   <span class="keyword">always_comb</span></span><br><span class="line">      <span class="keyword">case</span> (state)</span><br><span class="line">         S0:        nextstate = S1;</span><br><span class="line">         S1:        nextstate = S2;</span><br><span class="line">         S2:        nextstate = S0;</span><br><span class="line">         <span class="keyword">default</span>: nextstate = S0;</span><br><span class="line">      <span class="keyword">endcase</span></span><br><span class="line">   <span class="comment">// 输出逻辑</span></span><br><span class="line">   <span class="keyword">assign</span> q = (state == S0);</span><br><span class="line"><span class="keyword">endmodule</span> </span><br><span class="line"></span><br><span class="line">输出逻辑和寄存器并列是因为输出是时时刻刻受到寄存器的输出影响的，只要寄存器输出改变，他就会改变</span><br></pre></td></tr></table></figure><p><strong>存储器阵列</strong></p><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A134.png" alt="" /></p><p>Address是地址总线，有n位最多可以取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>个数据。而Data是数据总线，表示一次可以取多少位数据。</p><p>例如Address=10, 那么我们可以取100，或者将101写入地址10处。</p><p><img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A135.png" alt="" /></p><p>将上述逻辑展开就可以得到如图的结构了。其中字线如果为1就表示这条线可以读取或写入。其中每一个存储单元可以是DRAM存储单元或SRAM存储单元</p><table>    <tr>        <td ><center><img src="/images/时序逻辑设计36.png" >DRAM </center></td>        <td ><center><img src="/images/时序逻辑设计37.png">SRAM</center></td>    </tr></table><p>此外，如果想要同时实现读写的功能，可以在数据接口处使用<img src="/images/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A138.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;时序逻辑电路的输出是由上一刻的输出和这一刻的输入共同决定，也就是说时序电路带</summary>
      
    
    
    
    <category term="逻辑电路" scheme="https://xinhecuican.github.io/categories/%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Unity旋转</title>
    <link href="https://xinhecuican.github.io/post/bcf345af.html"/>
    <id>https://xinhecuican.github.io/post/bcf345af.html</id>
    <published>2021-04-11T01:28:00.000Z</published>
    <updated>2021-04-11T13:05:49.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="向量旋转"><a class="markdownIt-Anchor" href="#向量旋转"></a> 向量旋转</h1><p>首先我们需要知道旋转的角度，设为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></p><p><img src="/images/Unity%E6%97%8B%E8%BD%AC1.PNG" alt="" /></p><p>例如把AB旋转到AC，设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∠</mi><mi>X</mi><mi>A</mi><mi>B</mi><mo>=</mo><mi>σ</mi></mrow><annotation encoding="application/x-tex">\angle XAB = \sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>, B的坐标(x, y), C的坐标(a, b),半径为R,则</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>A</mi><mi>B</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><mo>=</mo><mfrac><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mi>y</mi><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>A</mi><mi>C</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><mo>=</mo><mfrac><mi>a</mi><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo>+</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mi>b</mi><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo>+</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo>+</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>R</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow></mfrac><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mfrac><mi>y</mi><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow></mfrac><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>x</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>y</mi><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>b</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo>+</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>y</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}AB =&amp; R = \frac{x}{cos(\sigma)} = \frac{y}{sin(\sigma)}\\AC =&amp; R = \frac{a}{cos(\sigma + \theta)} = \frac{b}{sin(\sigma + \theta)}\\a =&amp; R * cos(\sigma + \theta) = R * cos(\sigma)cos(\theta) - R * sin(\sigma)sin(\theta)\\ =&amp; \frac{x}{cos(\sigma)} cos(\sigma)cos(\theta) - \frac{y}{sin(\sigma)}sin(\sigma)sin(\theta)\\ =&amp; x \times cos(\theta) - y \times sin(\theta)\\ b =&amp; R * cos(\sigma + \theta) = R * sin(\sigma)cos(\theta) + R * cos(\sigma)sin(\theta)\\ =&amp; y \times cos(\theta) + x \times sin(\theta)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.29456em;vertical-align:-6.39728em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.89728em;"><span style="top:-9.16116em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-6.55372em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-4.47772em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-2.7101599999999992em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-0.6341599999999996em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:0.8658400000000004em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:2.3658400000000004em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.39728em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.89728em;"><span style="top:-9.16116em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-6.55372em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.47772em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-2.7101599999999992em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-0.6341599999999996em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:0.8658400000000004em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:2.3658400000000004em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.39728em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由上式可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>x</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>y</mi><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mi>y</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a = x \times cos(\theta) - y \times sin(\theta), b = y \times cos(\theta) + x \times sin(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></p><p>也就是说我们可以用x来替换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cos(\sigma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span></span>, 用y来替换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sin(\sigma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span></span>，然后根据和角公式进行对应替换就可以了</p><p>如果AC角小于AB角也可以用同样的方法进行求解。结果为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>x</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>y</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mi>y</mi><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>x</mi><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a = x \times cos(\theta) + y \times cos(\theta), b = y \times cos(\theta) - x \times sin(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></p><p>在Unity中可以使用Quaternion.LookRotation的方法进行旋转，它的输入就是旋转之后的向量，其中y可以不变，只需要旋转x和z。</p><h1 id="欧拉角"><a class="markdownIt-Anchor" href="#欧拉角"></a> 欧拉角</h1><p><a href="https://blog.csdn.net/AndrewFan/article/details/60866636">欧拉角的定义</a></p><p><a href="https://blog.csdn.net/AndrewFan/article/details/60981437">欧拉角的万向节死锁</a></p><h1 id="transform"><a class="markdownIt-Anchor" href="#transform"></a> transform</h1><p><a href="https://linxinfa.blog.csdn.net/article/details/110005470">transform</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;向量旋转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="Unity" scheme="https://xinhecuican.github.io/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>MPI编程</title>
    <link href="https://xinhecuican.github.io/post/bb25e9a9.html"/>
    <id>https://xinhecuican.github.io/post/bb25e9a9.html</id>
    <published>2021-04-01T23:18:00.000Z</published>
    <updated>2021-04-24T12:22:23.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>MPI是一种编程规范，它的实现是一个库，主要在Fortran和c语言上实现。它的目的是实现进程间通讯。</p><h1 id="mpi基本函数"><a class="markdownIt-Anchor" href="#mpi基本函数"></a> MPI基本函数</h1><h2 id="开始与结束"><a class="markdownIt-Anchor" href="#开始与结束"></a> 开始与结束</h2><ul><li>MPI_Init(&amp;argc, &amp;argv): 利用输入进来的参数进行初始化</li><li>MPI_Finalize(): MPI终止时调用</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;err = MPI_Init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">    err = MPI_Finalize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line"></span><br><span class="line">mpirun -n <span class="number">4</span> ./hello.c</span><br></pre></td></tr></table></figure><h2 id="身份标识"><a class="markdownIt-Anchor" href="#身份标识"></a> 身份标识</h2><ul><li>MPI_COMM_WORLD: 获得通信域(也就是同一组内的进程，例如上面mpirun -4代表启动4个进程，他们属于同一组）</li><li>MPI_Comm_size(MPI_COMM_WORLD, &amp;size): 获得进程个数，赋值给size</li><li>MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank): 获得此进程在通信域内的编号，赋值给rank</li></ul><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p>基本数据类型有：<br /><img src="/images/MPI%E7%BC%96%E7%A8%8B6.PNG" alt="" /></p><p>自定义结构体：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">typedef <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">    double b<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">types<span class="literal">[<span class="number">0</span>]</span> = MPI_INT;</span><br><span class="line">length<span class="literal">[<span class="number">0</span>]</span> = <span class="number">4</span>;</span><br><span class="line">displacements<span class="literal">[<span class="number">0</span>]</span> = <span class="number">0</span>;</span><br><span class="line">types<span class="literal">[<span class="number">1</span>]</span> = MPI_DOUBLE;</span><br><span class="line">length<span class="literal">[<span class="number">1</span>]</span> = <span class="number">4</span>;</span><br><span class="line">displacements<span class="literal">[<span class="number">1</span>]</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="constructor">MPI_Type_struct(2, <span class="params">lengths</span>, <span class="params">displacements</span>, <span class="params">types</span>, &amp;<span class="params">buff_datatype</span>)</span>;</span><br><span class="line"><span class="constructor">MPI_Type_commit(&amp;<span class="params">buff_datatype</span>)</span>;</span><br><span class="line">然后就可以使用buff_dtattype这种类型了，这种类型也就表示了node </span><br></pre></td></tr></table></figure><h2 id="信息传递"><a class="markdownIt-Anchor" href="#信息传递"></a> 信息传递</h2><ul><li><p><code>int MPI_Send( void *buff, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)</code>：</p><ul><li>buff: 是存储消息缓存的起始地址（一般用数组）</li><li>count： 传递定义数据类型的多少项</li><li>datatype: 传递的数据类型</li><li>dest： 是目的进程的编号（由对方的MPI_Comm_rank获得的）</li><li>tag： 消息标签，接收方的消息标签要和发送方的消息标签相同才可以接受，一两位目的进程可能不知接收一条信息，它需要标签进行区分。</li><li>标识通信域，一般使用MPI_Comm_WORLD</li></ul></li><li><p><code>int MPI_Recv( void *buff, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status)</code>:</p><ul><li>buff： 用来接收消息的缓冲区</li><li>接收的最大项数</li><li></li><li>source： 消息来源进程编号</li><li>tag： 双方约定的信号量（这个源和目的地都应该相同，不然收不到）</li><li>status： 状态信息，包括消息的源进程标识，消息标签，包含的数据项个数等。Status.MPI_SOURCE, Status.MPI_TAG , MPI_Get_count(&amp;Status, MPI_INT, &amp;C)可以读出</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span> <span class="string">&quot;mpi.h&quot;</span></span><br><span class="line"><span class="built_in">int</span> foo(<span class="built_in">int</span> i)&#123;...&#125;</span><br><span class="line">main(<span class="built_in">int</span> argc,<span class="built_in">char</span>* argv<span class="literal">[]</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i, tmp, sum=<span class="number">0</span>, group_size, my_rank, N;</span><br><span class="line">    <span class="constructor">MPI_Init(&amp;<span class="params">argc</span>, &amp;<span class="params">argv</span>)</span>;</span><br><span class="line">    <span class="constructor">MPI_Comm_size(MPI_COMM_WORLD, &amp;<span class="params">group_size</span>)</span>;</span><br><span class="line">    <span class="constructor">MPI_Comm_rank(MPI_COMM_WORLD, &amp;<span class="params">my_rank</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (my_rank==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;Enter N:&quot;</span>);</span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;group_size;i++) </span><br><span class="line">            <span class="constructor">MPI_Send(&amp;N, 1, MPI_INT, <span class="params">i</span>, <span class="params">i</span>, MPI_COMM_WORLD)</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=my_rank;i&lt;N;i=i+group_size) </span><br><span class="line">            sum=sum+tmp;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;group_size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="constructor">MPI_Recv(&amp;<span class="params">tmp</span>,1,MPI_INT,<span class="params">i</span>,<span class="params">i</span>,MPI_COMM_WORLD,&amp;<span class="params">status</span>)</span>;</span><br><span class="line">            sum=sum+tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">&quot;\n The result = %d&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">MPI_Recv(&amp;N,1,MPI_INT,0,<span class="params">my_rank</span>,MPI_COMM_WORLD,&amp;<span class="params">status</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=my_rank;i&lt;N;i=i+group_size)  </span><br><span class="line">            sum=sum+foo(i);</span><br><span class="line">        <span class="constructor">MPI_Send(&amp;<span class="params">sum</span>,1,MPI_INT,0,<span class="params">my_rank</span>,MPI_COMM_WORLD)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="constructor">MPI_Finalize()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>int MPI_Sendrecv(void *sendbuf, int sendcount,MPI_Datatype sendtype, int ，dest, int sendtag, <code>void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status</code>): 它的作用是捆绑发送接收，他可以避免由于发送接收次序错误而造成的死锁。同时它可以接收单个MPI_Send发来的消息也可以呗：MPI_Recv接收到</p></li><li><p>MPI_PROC_NULL: 虚拟进程，当一个进程向这个进程发送消息时，会立刻成功返回，接收消息时也会立刻成功返回并且缓冲区没有任何改变。<strong>它可以写在source或dest中</strong></p></li></ul><h2 id="组通信"><a class="markdownIt-Anchor" href="#组通信"></a> 组通信</h2><ul><li>MPI_Bcast( void* data, int count, MPI_Datatype datatype, int root,MPI_Comm communicator): 标号为root的进程给其他所有进程发送消息，包括他自己，对于root来说，data即是发送缓冲又是接收缓冲</li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">MPI_Init( &amp;<span class="params">argc</span>, &amp;<span class="params">argv</span> )</span>;</span><br><span class="line"><span class="constructor">MPI_Comm_rank( MPI_COMM_WORLD, &amp;<span class="params">rank</span> )</span>;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (rank<span class="operator"> == </span><span class="number">0</span>) </span><br><span class="line">        scanf( <span class="string">&quot;%d&quot;</span>, &amp;value );</span><br><span class="line">    <span class="constructor">MPI_Bcast( &amp;<span class="params">value</span>, 1, MPI_INT, 0, MPI_COMM_WORLD )</span>;<span class="comment">//其他进程也要写，用来接收</span></span><br><span class="line">    printf( <span class="string">&quot;Process %d got %d\n&quot;</span>, rank, value );</span><br><span class="line">&#125; <span class="keyword">while</span> (value &gt;= <span class="number">0</span>);</span><br><span class="line"><span class="constructor">MPI_Finalize( )</span>;</span><br></pre></td></tr></table></figure><ul><li>MPI_Scatter(<br />void* send_data,<br />int send_count,<br />MPI_Datatype send_datatype,<br />void* recv_data,<br />int recv_count,<br />MPI_Datatype recv_datatype,<br />int root,<br />MPI_Comm communicator)<ul><li>root发送给每个分组缓冲区中的一部分信息，非root进程会忽略发送缓冲。它是将每个接收缓冲区填满之后才会发给下一个进程，而不是平均分。</li></ul></li></ul><p><img src="/images/MPI%E7%BC%96%E7%A8%8B1.png" alt="" /></p><ul><li>MPI_Gather(<br />void* send_data,<br />int send_count,<br />MPI_Datatype send_datatype,<br />void* recv_data,<br />int recv_count,<br />MPI_Datatype recv_datatype,<br />int root,<br />MPI_Comm communicator)<ul><li>只有root进程的recv_buf是有效的，其他可以随便传</li><li>它是接受所有进程的信息汇总到root进程中（包括它自己的信息).</li><li>接收信息是按照序号进行排列的，并且recv_count只需要填写一个进程接收的信息就可以了</li></ul></li></ul><p>例如：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> *recv_buf;</span><br><span class="line"><span class="keyword">if</span>(rank<span class="operator"> == </span><span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    recv_buf = (<span class="built_in">int</span>*)malloc(sizeof(<span class="built_in">int</span>)<span class="operator"> * </span>all<span class="operator"> * </span>all);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> *send_buf = (<span class="built_in">int</span>*)malloc(sizeof(<span class="built_in">int</span>)<span class="operator"> * </span>add_sum<span class="operator"> * </span>add_sum);</span><br><span class="line"><span class="built_in">int</span> beginx = rank<span class="operator"> / </span>sqrt_num<span class="operator"> * </span>add_sum;</span><br><span class="line"><span class="built_in">int</span> beginy = rank % sqrt_num<span class="operator"> * </span>add_sum;</span><br><span class="line"><span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=beginx; i&lt;beginx+add_sum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> k=beginy; k&lt;beigny+add_sum; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        send_buf<span class="literal">[<span class="identifier">flag</span><span class="operator">++</span>]</span> = i<span class="operator"> * </span>add_sum + k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="constructor">MPI_Gather(<span class="params">send_buf</span>, <span class="params">add_sum</span> <span class="operator">*</span> <span class="params">add_sum</span>, MPI_INT, <span class="params">recv_buf</span>, <span class="params">add_sum</span> <span class="operator">*</span> <span class="params">add_sum</span>, MPI_INT, 0, MPI_COMM_WORLD)</span>;</span><br></pre></td></tr></table></figure><ul><li>MPI_Allgather(<br />void* send_data,<br />int send_count,<br />MPI_Datatype send_datatype,<br />void* recv_data,<br />int recv_count,<br />// v: int* recvcnt, int* disp<br />MPI_Datatype recv_datatype,<br />MPI_Comm communicator):<ul><li>每个进程都把自己的信息发给其他所有进程，完成之后所有进程都有信息的聚合</li></ul></li></ul><p><img src="/images/MPI%E9%80%9A%E4%BF%A12.png" alt="" /></p><ul><li>MPI_Reduce(inbuf,result,count,datatype,op,root,comm): 进行聚合之后还进行了一次归约操作，归约操作有MAX, MIN, SUM, PROD, LAND, BAND(按位与), LOR, BOR, LXOR, BXOR, MAXLOC, MINLOC等。这是每一个数据每一个数据进行归约</li><li>MPI_AllReduce: 和MPI_Reduce类似，没有root参数</li><li>MPI_Reduce_Scattar(void* send_data, void* recv_data, int recvcounts, Op, Comm): 对数据进行归约之后再分给每个进程。</li><li>MPI_Scan(void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm): 每个进程都对它前面的进程进行归约，类似前缀和</li></ul><p><img src="/images/MPI%E7%BC%96%E7%A8%8B4.PNG" alt="" /></p><ul><li>int MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype senddatatype, void *recvbuf, int recvcount, MPI_Datatype recvdatatype, MPI_Comm comm): 每个进程把第i块数据发送给第i个进程，又从第j个进程接收数据到自己的第j块中。</li></ul><p>例如： 进程1把自己第二块数据发送给进程2， 进程2接收到来自进程1的数据放到 第一块中，类似于矩阵转置。</p><ul><li>MPI_Comm(Comm): 等待同一群组中所有进程到达屏障时候才进行下一步操作</li></ul><p><img src="/images/MPI%E7%BC%96%E7%A8%8B5.PNG" alt="" /></p><h1 id="多线程mpi"><a class="markdownIt-Anchor" href="#多线程mpi"></a> 多线程MPI</h1><ul><li><code>MPI_INIT_THREAD(int *argc, char ***argv, int required, int *provided)</code><ul><li>required: 是线程的需求级别，它决定了那些线程可以进行MPI通信<ul><li>MPI_THREAD_SINGLE: 单线程</li><li>MPI_THREAD_FUNNELED: 只有主线程可以进行MPI通信</li><li>MPI_THREAD_SERIALIZED: 同一时刻只有一个线程可以进行MPI通信</li><li>MPI_THREAD_MULTIPLE: 任何线程都可以随意进行通信</li></ul></li><li>provided： 可以提供的线程</li><li>设定了级别之后就可以在MPI内部用多线程了</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="并行" scheme="https://xinhecuican.github.io/categories/%E5%B9%B6%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>硬件描述语言</title>
    <link href="https://xinhecuican.github.io/post/b75632a1.html"/>
    <id>https://xinhecuican.github.io/post/b75632a1.html</id>
    <published>2021-03-24T13:00:00.000Z</published>
    <updated>2021-06-19T08:20:46.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="硬件描述语言hdl大致功用"><a class="markdownIt-Anchor" href="#硬件描述语言hdl大致功用"></a> 硬件描述语言(HDL)大致功用</h1><p>硬件描述语言和逻辑电路之间的关系类似于c语言和机器代码。c语言通过编译器编译成机器码，而硬件描述语言通过<strong>硬件描述语言综合器</strong>变成<strong>硬件电路网表文件</strong>。</p><p>硬件描述语言和高级语言的一大区别是硬件描述语言的基本运行逻辑是<strong>并行</strong>，而高级语言是顺序执行</p><blockquote><p>在HDL中，只有一部分是可以综合的，称为可综合的HDL。另外一部分主要用于仿真验证（例如等几秒后再进行下一步）</p></blockquote><p>综合器大致工作过程为：</p><ul><li>将RTL描述通过EDA工具翻译成未经过优化的设计约束</li><li>然后进行逻辑优化。去除冗余逻辑</li><li>之后根据工艺库实现逻辑电路及其布线。工艺库由中芯国际和台积电等公司提供</li></ul><h1 id="语法基础"><a class="markdownIt-Anchor" href="#语法基础"></a> 语法基础</h1><p>框架：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2(<span class="keyword">input</span> <span class="keyword">logic</span> D0, D1, sel, <span class="keyword">output</span> <span class="keyword">logic</span> y);</span><br><span class="line">    <span class="keyword">logic</span> a, b;</span><br><span class="line">    <span class="keyword">assign</span> a = D0 &amp; (~sel);</span><br><span class="line">    <span class="keyword">assign</span> b = D0 &amp; sel;</span><br><span class="line">    <span class="keyword">assign</span> y = a | b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><ul><li>module endmodule: 定义了一个模块，注意module后面有一个<code>;</code>,而endmodule后面没有</li><li><code>input/output/inout [类型] [位宽] 端口名1, 端口名2</code>: 这是模块的输入和输出。端口定义还可以有其他一些形式，如：</li></ul><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2(<span class="keyword">input</span> D0, <span class="keyword">output</span> <span class="keyword">logic</span> y);</span><br><span class="line">    <span class="keyword">logic</span> D0, y;</span><br><span class="line">    </span><br><span class="line">或</span><br><span class="line"><span class="keyword">module</span> mux2(D0, y);</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">logic</span> D0;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">logic</span> y;</span><br><span class="line">    </span><br><span class="line">推荐使用框架中的那种</span><br></pre></td></tr></table></figure><ul><li>内部变量定义： 类型 [位宽] 变量名1, 变量名2: 这和端口定义基本类似，除了没有input和output</li></ul><h1 id="变量-常量-运算符"><a class="markdownIt-Anchor" href="#变量-常量-运算符"></a> 变量、常量、运算符</h1><blockquote><p>注释和c语言相同，也是<code>//</code>和<code>/*</code></p></blockquote><h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h2><p>常量的格式为： <code>&lt;+/-&gt;&lt;位宽&gt;’&lt;进制&gt;&lt;数值&gt;</code></p><ul><li>+/-: 表示正负， EDA工具默认使用无符号数，也就是说加了<code>+</code>号和不加<code>+</code>号是不同的含义</li><li>位宽： 指的数据最多有多少个bit</li><li><code>'</code>： 位宽后面的标识</li><li>进制： b或B是二进制， o或O是八进制， d或D是十进制， h或H是十六进制.<strong>如果没有给出进制，默认为有符号数</strong></li><li>数值：数值间可以加下划线方便阅读。例如：<code>1100_0101</code></li></ul><p>例如：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">-<span class="number">4</span>&#x27;b<span class="number">0011</span>: 首先转换成补码，为<span class="number">1101</span>，然后是4位，所以结果就是<span class="number">1101</span></span><br><span class="line">-4&#x27;d10: 转换成补码为<span class="number">10110</span>（因为是负数，最高位一定是<span class="number">1</span>），之后取<span class="number">4</span>位，结果为<span class="number">0110</span>。和我们想要得到的结果不同</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p>大体上可以分为变量和线网两种类型。变量只能有一个驱动源，线网必须是多驱动源(也就是可能有多个输入碰到一起），线网通常被解释为连线，而变量既可以被解释为连线，也可以被解释为寄存器。<br /><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%801.PNG" alt="" /></p><p>线网类型主要有wire和tri。其中wire因为也是单驱动源，已经被废弃（端口信号可能是线网类型）。tri可以用于定义多驱动源信号。</p><p><strong>变量</strong></p><ul><li>logic: 格式为：<code>logic &lt;位宽&gt; &lt;signed&gt; 信号名1, 信号名2, …, 信号名n</code>.logic可以表示4中状态，0,1，x，z。</li></ul><blockquote><p>默认logic位宽是1</p></blockquote><p>例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">logic</span> [<span class="number">16</span> : <span class="number">0</span>] addrbus, databus;   <span class="comment">//定义了两个（无符号）的16位向量信号</span></span><br><span class="line"><span class="keyword">logic</span> [<span class="number">16</span> : <span class="number">0</span>] <span class="keyword">signed</span> addrbus;            <span class="comment">// 定义了两个（有符号）的16位向量信号</span></span><br><span class="line"><span class="keyword">logic</span> a, b;<span class="comment">//定义了两个1位标量信号，相当于logic [0 : 0] a, b;</span></span><br></pre></td></tr></table></figure><p>logic可以进行域选（即任意把一些位赋给另一些位）</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">logic temp = z;</span><br><span class="line">logic[<span class="number">7</span> : 0] <span class="keyword"><span class="keyword">out</span></span>, <span class="keyword"><span class="keyword">in</span></span>;</span><br><span class="line">assign <span class="keyword">out</span>[<span class="number">7</span> : 4] = <span class="keyword"><span class="keyword">in</span></span>[3 : 0];</span><br><span class="line">assign <span class="keyword">out</span>[<span class="number">3</span>] = <span class="keyword">in</span>[<span class="number">2</span> : 2];</span><br></pre></td></tr></table></figure><ul><li>bit: 和logic类似，但是他<strong>只有0,1两种取值，下面几种变量也都只有两种取值</strong></li><li>byte: 定义8位信号，但是它一次就赋8位，不能进行域选</li><li>shortint: 定义16位信号，和byte类型</li><li>int： 定义32位信号</li></ul><h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><p><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%802.PNG" alt="" /></p><p>大致和c语言相同，但是有一些还是略有区别。</p><p><strong>缩减运算</strong></p><p>例如：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">logic</span> [<span class="number">7</span> : <span class="number">0</span>] a;</span><br><span class="line"><span class="attribute">assign</span> &amp;a;</span><br></pre></td></tr></table></figure><p>等同于 a[0] &amp; a[1] &amp; a[2] &amp; a[3] &amp; a[4] &amp; a[5] &amp; a[6] &amp; a[7];(不全是1结果就是0）</p><p>assign ^a;</p><p>^是半加法器，也就是1的个数为偶数时结果为0，为奇数时结果为1.</p><p><strong>拼接和复制</strong></p><p>SystemVerilog允许将多个数据进行组合，合成为一个数据</p><p>格式：{ 信号1[n1 : m1],信号1[n2 : m2], …,信号n[nn : mn] }</p><p>并且这些信号必须是确定位数，因此不可以出现未确定位数的常数，如1。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">logic [<span class="number">1</span> : <span class="number">0</span>] B, C; <span class="regexp">//</span> 假设B = <span class="number">2</span>’b00，C = <span class="number">2</span>’b11，</span><br><span class="line">logic [<span class="number">3</span>: <span class="number">0</span>] Y;</span><br><span class="line">Y = &#123;B, C&#125;;<span class="regexp">//</span> 正确，结果Y = <span class="number">4</span>’b0011</span><br><span class="line">Y = &#123;B[<span class="number">0</span>], C[<span class="number">1</span>], <span class="number">2</span>’b10&#125;;<span class="regexp">//</span> 正确，结果Y = <span class="number">4</span>’b0110，注意，常数的位宽不能缺省</span><br><span class="line">Y = &#123;B, <span class="number">5</span>&#125;;<span class="regexp">//</span> 错误，因为常数<span class="number">5</span>的位宽不确定</span><br><span class="line">Y = &#123;<span class="number">2</span>&#123;C&#125;&#125;;<span class="regexp">//</span> 正确，结果Y = <span class="number">4</span>’b1111</span><br><span class="line">Y = &#123;B[<span class="number">0</span>], C[<span class="number">1</span>], &#123;<span class="number">2</span>&#123;B[<span class="number">1</span>]&#125;&#125;&#125;;<span class="regexp">//</span> 正确，结果Y = <span class="number">4</span>’b0100</span><br></pre></td></tr></table></figure><p>最后两个中出现了 数字加{C}的方式，这是将这个信号进行复制，格式为：<code>&#123;n&#123;A&#125;&#125;</code></p><h1 id="行为建模"><a class="markdownIt-Anchor" href="#行为建模"></a> 行为建模</h1><h2 id="持续性赋值语句的建模"><a class="markdownIt-Anchor" href="#持续性赋值语句的建模"></a> 持续性赋值语句的建模</h2><p>持续性赋值语句即使用<strong>assign</strong>的赋值语句，它是并行的，因此哪条语句在前哪条语句在后没有关系。它的使用方法如下：</p><blockquote><p>assign &lt;#延迟量&gt; 信号名 = 表达式,延迟量以纳秒为单位</p></blockquote><p>例如：<code>assign #5 out2 = ~(A&amp;B)</code></p><p>持续性赋值语句的含义是只要右侧变量发生变化，则立刻把该值赋给左侧变量，对应到电路就是输入输出的关系。此外<strong>延迟量仅用于仿真，不能被综合</strong>。</p><h2 id="基于过程块的建模"><a class="markdownIt-Anchor" href="#基于过程块的建模"></a> 基于过程块的建模</h2><p>过程块内部的基本逻辑是顺序执行，每条语句之间有逻辑上的前后顺序（但是实际综合的时候可能会影响顺序）</p><p>它由关键字initial或always定义，通过begin…end(相当于c语言中的{…})包围代码块。initial主要用于仿真验证。因此这里之间always</p><p>always表示总是，也就是这个代码块处于无限循环当中，只要条件改变就会导致变化（always包围的代码块和其他assign也是并行的）。</p><p>always可以看成c语言中的代码块，它的参数就是外面的输入和它所影响的输出。一旦外面对应数值发生改变里面也会立刻对应改变</p><h3 id="always_comb描述组合逻辑"><a class="markdownIt-Anchor" href="#always_comb描述组合逻辑"></a> always_comb（描述组合逻辑）</h3><p>模板：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">always_comb</span>   <span class="keyword">begin</span></span><br><span class="line">            过程赋值语句;</span><br><span class="line">            高级语言结构，如<span class="keyword">if</span>…<span class="keyword">else</span>, <span class="keyword">for</span>等</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      例如</span><br><span class="line">      <span class="keyword">module</span> mux2 (<span class="keyword">input</span>  <span class="keyword">logic</span> D0, D1, sel, </span><br><span class="line">                        <span class="keyword">output</span> <span class="keyword">logic</span> out);</span><br><span class="line">   <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">      <span class="comment">// 高级语言结构if…else</span></span><br><span class="line">      <span class="keyword">if</span> (sel == <span class="number">0</span>)</span><br><span class="line">         <span class="comment">// 过程赋值语句</span></span><br><span class="line">         out = D0;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         out = D1;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在过程赋值语句中，<code>=</code>表示阻塞性赋值，也就是这条语句没有完成不进行下一步。并且左边<strong>必须是变量类型，不能是线网类型</strong>，这一点可能会导致一些错误</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">module</span> <span class="title">adder</span> <span class="params">(input a, b, <span class="built_in">cin</span>, output [<span class="number">1</span> : <span class="number">0</span>] out)</span></span>; </span><br><span class="line">      logic half_sum, half_carry;</span><br><span class="line">      always_comb <span class="built_in">begin</span></span><br><span class="line">            half_sum = a ^ b ^ <span class="built_in">cin</span>;<span class="comment">// 正确</span></span><br><span class="line">            half_carry = a &amp; b | a &amp; ~b &amp; <span class="built_in">cin</span> | ~a &amp; b &amp; <span class="built_in">cin</span>;<span class="comment">// 正确</span></span><br><span class="line">            out = &#123;half_carry, half_sum&#125;;<span class="comment">//错误</span></span><br><span class="line">      <span class="built_in">end</span></span><br><span class="line">endmodule</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一个错误是因为out并没有赋予它类型，因此它是默认的wire类型，是一种线网类型。</p><p>=号只在逻辑上是阻塞，实际上不一定是串行。</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2 (<span class="keyword">input</span> <span class="keyword">logic</span> D0, D1, sel, <span class="keyword">output</span> <span class="keyword">logic</span> y)</span><br><span class="line">      <span class="keyword">logic</span> a, b;</span><br><span class="line">      <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">            a = D0 &amp; ~sel;<span class="comment">// 阻塞赋值</span></span><br><span class="line">            b = D1 &amp; sel;<span class="comment">// 阻塞赋值</span></span><br><span class="line">            y = a | b;<span class="comment">// 阻塞赋值</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">这是一个多路选择器，它的两个端口是 同时进行选择的，也就是说a和b是同时进行赋值的，但是这里使用阻塞性语句也可以综合成电路</span><br></pre></td></tr></table></figure><p><strong>分支结构</strong></p><p>SystemVerilog也支持if-else语句和case语句。如果其中有多行代码要使用begin-end<br />包围，尤其是case在c语言中不需要而在这里需要。</p><p>例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2 (<span class="keyword">input</span>  <span class="keyword">logic</span> D0, D1, sel, </span><br><span class="line">                        <span class="keyword">output</span> <span class="keyword">logic</span> y);</span><br><span class="line">   <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">      <span class="comment">// 高级语言结构if…else</span></span><br><span class="line">      <span class="keyword">if</span> (sel == <span class="number">0</span>)</span><br><span class="line">         y = D0;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         y = D1;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> mux2 (<span class="keyword">input</span>  <span class="keyword">logic</span> D0, D1, s, </span><br><span class="line">                         <span class="keyword">output</span> <span class="keyword">logic</span> y);</span><br><span class="line">   <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">case</span> (s)</span><br><span class="line">         <span class="number">1</span>’b0: y = D0;</span><br><span class="line">         <span class="number">1</span>’b1: y = D1;</span><br><span class="line">      <span class="keyword">endcase</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： if语句和case语句都尽量考虑到所有情况，否则将综合处带有锁存器的时序电路，效率大为降低。<img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%803.PNG" alt="" /></p><p>因此对于不完整分支，将剩下项补全，多余的项的内容可以随意设置。</p><p>在case语句中，可以使用?表示无关项，也就是该项即可以取零又可以取1.例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> dec2to4(<span class="keyword">input</span> <span class="keyword">logic</span> EN, <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">1</span> : <span class="number">0</span>] A, <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">3</span> : <span class="number">0</span>] Y);</span><br><span class="line">      <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">casez</span>(&#123;EN, A&#125;)</span><br><span class="line">                  <span class="number">3</span>’b100:      Y = <span class="number">4</span>’b0001;</span><br><span class="line">                  <span class="number">3</span>’b101:      Y = <span class="number">4</span>’b0010;</span><br><span class="line">                  <span class="number">3</span>’b110:      Y = <span class="number">4</span>’b0100;</span><br><span class="line">                  <span class="number">3</span>’b111:      Y = <span class="number">4</span>’b1000;</span><br><span class="line">                  <span class="number">3</span>’b0??:       Y = <span class="number">4</span>’b0000;</span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>循环结构</strong></p><ul><li>for语句：其用法是<code>for (循环变量初始化; 条件表达式; 修改循环变量表达式)语句块</code></li><li>repeat语句：一种预先指定循环次数的循环语句，其用法是<code>repeat (循环次数表达式) 语句块</code></li><li>while语句：其用法是<code>while (条件表达式) 语句块</code></li><li>forever语句：一种无限循环语句，其用法是<code>forever 语句块</code></li></ul><blockquote><p>在这四种语句中，只有for语句是可综合的</p></blockquote><p>例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> loop_demo(<span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">2</span> : <span class="number">0</span>] din, </span><br><span class="line">                                <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">1</span> : <span class="number">0</span>] out);</span><br><span class="line">      <span class="keyword">int</span> num_bits</span><br><span class="line">      <span class="keyword">always_comb</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            num_bits = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">begin</span></span><br><span class="line">                  <span class="keyword">if</span> (din[i] == <span class="number">1</span>) </span><br><span class="line">                        num_bits = numbits + <span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">else</span> num_bits = numbits;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">assign</span> out = num_bits;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="模块实例化"><a class="markdownIt-Anchor" href="#模块实例化"></a> 模块实例化</h3><p>创建模块之后可以在其他模块之中被调用，调用格式为：</p><p><code>模块名 实例化名 （信息列表）</code></p><ul><li>信息列表也就是参数列表，他有两种书写形式<ul><li>位置关联： 每个参数都依照模块定义时的接口进行填入</li><li>名称关联： 这种方法就可以不按顺序了。它的格式为<code>.端口号(信号)</code>, <code>.端口号</code><br />是模块端口的名字，而信号这传入的参数的名字</li><li>位置关联和名称关联一次只可以使用一种，不可以部分位置关联部分名称关联</li></ul></li></ul><p>例如：</p><figure class="highlight plain"><figcaption><span>mux2 (input  logic D0, D1, sel,</span></figcaption><table><tr><td class="code"><pre><span class="line">                        output logic y);</span><br><span class="line">   always_comb begin</span><br><span class="line">      if (sel &#x3D;&#x3D; 0)   out &#x3D; D0;</span><br><span class="line">      else   out &#x3D; D1;</span><br><span class="line">   end</span><br><span class="line">endmodule</span><br><span class="line">mux2 finalmux (low, high, sel[1], y);&#x2F;&#x2F;位置关联</span><br><span class="line">mux2 beginmux(.y(y), .D0(low), .D1(high), .sel(sel[1]));</span><br></pre></td></tr></table></figure><p>其中<code>mux2</code>是这个模块的名字，也就相当于类名，finalmux是实例化后的名字，注意实例化后就立刻开始执行，不需要写额外的代码。</p><p>模块和assign或者always语句是同一级别的，他们之间都是并行的</p><p>此外系统一般还会提供一些非常基础的模块，如and, or等，这些模块可以不写实例化名字</p><h3 id="参数化建模"><a class="markdownIt-Anchor" href="#参数化建模"></a> 参数化建模</h3><p><strong>参数化模块</strong></p><p>在SystemVerilog HDL中，可以使用<strong>parameter</strong>来标识一个常量，除此之外他还可以用作传入模块的一个预定义变量</p><p>例如：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2</span><br><span class="line">   #(<span class="keyword">parameter</span> WIDTH = <span class="number">8</span>)</span><br><span class="line">   (<span class="keyword">input</span> <span class="keyword">logic</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] D0, D1,   </span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">logic</span> s, </span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">logic</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> y = s? D0 : D1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> mux4_32</span><br><span class="line">        (<span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] D0, D1, D2, D3,    </span><br><span class="line">         <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">1</span>:<span class="number">0</span>] s, </span><br><span class="line">         <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] y);</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] low, hi;</span><br><span class="line">    mux2 <span class="variable">#(32) lowmux(D0, D1, s[0], low)</span>;</span><br><span class="line">    mux2 <span class="variable">#(32) himux(D2, D3, s[0], hi)</span>;</span><br><span class="line">    mux2 <span class="variable">#(32) outmux(low, hi, s[1], y)</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>注意后面的<code>mux2 #(32)</code>.这就是把<code>#(parameter WIDTH=8)</code>中的WIDTH进行修改，并用更改后的WIDTH当做模块的参数，和c++中的模板类类似。</p><p>此外还可以把parameter写入内部，当做一个常量使用</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2 (<span class="keyword">input</span> D0, D1, s,  </span><br><span class="line">                        <span class="keyword">output</span> y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> WIDTH = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">logic</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] D0, D1, y;</span><br><span class="line">    <span class="keyword">logic</span> s;</span><br><span class="line">    <span class="keyword">assign</span> y = s? D0 : D1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是引入常量还可以使用`define语句，它可以用`include导入</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">define</span> WIDTH 8   //结尾不需要“;”</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">define</span> ENABLE 1</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">define</span> INIT 16’h000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">include</span> “<span class="meta-keyword">define</span>.sv”</span></span><br><span class="line"><span class="keyword">module</span> mux2</span><br><span class="line">   (<span class="keyword">input</span> <span class="keyword">logic</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] D0, D1,   </span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">logic</span> s, </span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">logic</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> y = s? D0 : D1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>generate语句</strong></p><p>generate通常和for，if，case配合使用，它可以自动生成代码</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> andN #(<span class="keyword">parameter</span> WIDTH = <span class="number">4</span>) (<span class="keyword">input</span> <span class="keyword">logic</span> [WIDTH – <span class="number">1</span> : <span class="number">0</span>] a, <span class="keyword">output</span> <span class="keyword">logic</span> y);</span><br><span class="line">      <span class="keyword">genvar</span> i;</span><br><span class="line">      <span class="keyword">logic</span> [WIDTH – <span class="number">1</span> : <span class="number">0</span>] x;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">generate</span></span><br><span class="line">            <span class="keyword">assign</span> x[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; WIDTH; i = i+<span class="number">1</span>) <span class="keyword">begin</span> : forloop</span><br><span class="line">                  <span class="keyword">assign</span> x[i] = a[i] &amp; x[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">endgenerate</span></span><br><span class="line">             <span class="keyword">assign</span> y = x[WIDTH - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>注意想要使用generate，在for语句中必须写上begin和end，并且begin后面还要加上forloop.并且循环变量的类型是genvar.</p><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><p>例如：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">`timescale <span class="number">1</span>ns/<span class="number">1</span>ns// 预编译指令，定义时间单位和时间精度</span><br><span class="line"><span class="keyword">module</span> sillyfunction_tb ( )<span class="comment">;   // 测试程序没有输入/输出端口</span></span><br><span class="line">   logic a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="keyword">c</span><span class="punctuation">,</span> y<span class="comment">;</span></span><br><span class="line">   sillyfunction dut (.a(a)<span class="punctuation">,</span> .b(b)<span class="punctuation">,</span> .<span class="keyword">c</span>(<span class="keyword">c</span>)<span class="punctuation">,</span> .y(y))<span class="comment">;   // 实例化待测模块</span></span><br><span class="line">   initial <span class="keyword">begin</span>// 给出激励信号</span><br><span class="line">      a <span class="operator">=</span> <span class="number">0</span><span class="comment">; b = 0; c = 0; #10;</span></span><br><span class="line">      <span class="keyword">c</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">; #10;</span></span><br><span class="line">      b <span class="operator">=</span> <span class="number">1</span><span class="comment">; c = 0; #10;</span></span><br><span class="line">      <span class="keyword">c</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">; #10;</span></span><br><span class="line">      a <span class="operator">=</span> <span class="number">1</span><span class="comment">; b = 0; c = 0; #10;</span></span><br><span class="line">      <span class="keyword">c</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">; #10;</span></span><br><span class="line">      b <span class="operator">=</span> <span class="number">1</span><span class="comment">; c = 0; #10;</span></span><br><span class="line">      <span class="keyword">c</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">; #50;</span></span><br><span class="line">      $finish</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   initial <span class="keyword">begin</span>// 输出结果，否则只产生波形</span><br><span class="line">      $monitor ($time<span class="punctuation">,</span> “a <span class="operator">=</span> <span class="variable">%a</span><span class="punctuation">,</span> b <span class="operator">=</span> <span class="variable">%b</span><span class="punctuation">,</span> <span class="keyword">c</span> <span class="operator">=</span> <span class="variable">%c</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="variable">%y</span>”<span class="punctuation">,</span> a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="keyword">c</span><span class="punctuation">,</span> y)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="initial语句"><a class="markdownIt-Anchor" href="#initial语句"></a> initial语句</h2><p>initial语句广泛应用于测试程序之中，它的特点就是所有语句都只会执行一次。</p><p>但是需要注意的是多个initial语句时并发执行，如果有某一时刻两个initial语句对用一个变量进行赋值那么就会产生错误。</p><h2 id="通过文件给予激励"><a class="markdownIt-Anchor" href="#通过文件给予激励"></a> 通过文件给予激励</h2><p>我们可以把输入输出放到一个文件之中，然后程序从文件中获得激励信号并进行比对。</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> sillyfunction_tb ( )<span class="comment">;</span></span><br><span class="line">   logic a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="keyword">c</span><span class="punctuation">,</span> y<span class="comment">;</span></span><br><span class="line">   logic [<span class="number">2</span> : <span class="number">0</span>] stim [<span class="number">7</span> : <span class="number">0</span>]<span class="comment">;// 声明一个logic类型的数组</span></span><br><span class="line">   int i<span class="comment">;</span></span><br><span class="line">   sillyfunction dut (.a(a)<span class="punctuation">,</span> .b(b)<span class="punctuation">,</span> .<span class="keyword">c</span>(<span class="keyword">c</span>)<span class="punctuation">,</span> .y(y))<span class="comment">; </span></span><br><span class="line">   initial <span class="keyword">begin</span></span><br><span class="line">      $readmemb (“testvector.txt”<span class="punctuation">,</span> stim)<span class="comment">;// 将所有激励读入数组stim</span></span><br><span class="line">      for (i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; 8; i = i + 1) begin</span></span><br><span class="line">            &#123;a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="keyword">c</span>&#125; <span class="operator">=</span> stim[i]<span class="comment">;   #10;// 依次测试各个激励</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   initial <span class="keyword">begin</span></span><br><span class="line">      $monitor ($time<span class="punctuation">,</span> “a <span class="operator">=</span> <span class="variable">%a</span><span class="punctuation">,</span> b <span class="operator">=</span> <span class="variable">%b</span><span class="punctuation">,</span> <span class="keyword">c</span> <span class="operator">=</span> <span class="variable">%c</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="variable">%y</span>”<span class="punctuation">,</span> a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="keyword">c</span><span class="punctuation">,</span> y)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p><strong>输入文件格式</strong></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0110</span>_0001 <span class="number">0011</span>_0010</span><br><span class="line"><span class="regexp">//</span> 地址<span class="number">3</span>~<span class="number">255</span>没有定义</span><br><span class="line">@<span class="number">100</span> <span class="regexp">//</span> hex</span><br><span class="line"><span class="number">1111</span>_1100</span><br><span class="line"><span class="regexp">//</span>地址<span class="number">257</span>~<span class="number">1022</span>没有定义</span><br><span class="line">@<span class="number">3</span>FF</span><br><span class="line"><span class="number">1110</span>_0010</span><br></pre></td></tr></table></figure><ul><li>可以使用<code>_</code>进行分隔，便于观察</li><li>使用空格或者换行来区分单个数据</li><li>使用<code>@+地址</code>来表示之后从第几位开始，注意这里不是第几个bit，而是第几个数据</li></ul><h2 id="系统任务函数"><a class="markdownIt-Anchor" href="#系统任务函数"></a> 系统任务（函数）</h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>$time</td><td>显示仿真时间，也就是第几十纳秒</td></tr><tr><td>$stime</td><td>返回32位时间</td></tr><tr><td>$realtime</td><td>显示实数的时间（有小数）</td></tr><tr><td>$display</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy="false">(</mo><mi mathvariant="normal">“</mi><mi mathvariant="normal">显</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">格</mi><mi mathvariant="normal">式</mi><mi mathvariant="normal">控</mi><mi mathvariant="normal">制</mi><mi mathvariant="normal">符</mi><mi mathvariant="normal">”</mi><mo separator="true">,</mo><mo>&lt;</mo><mi mathvariant="normal">输</mi><mi mathvariant="normal">出</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">列</mi><mi mathvariant="normal">表</mi><mo>&gt;</mo><mo stretchy="false">)</mo><mo separator="true">;</mo><mo separator="true">,</mo><mi mathvariant="normal">例</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">‘</mi></mrow><annotation encoding="application/x-tex">display (“显示格式控制符”, &lt;输出变量（信号）列表&gt;);,例如`</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">“</span><span class="mord cjk_fallback">显</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">格</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">符</span><span class="mord">”</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">表</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">如</span><span class="mord">‘</span></span></span></span>display ($time, &quot; a = %b b = %b c = %b y = %b&quot;, a, b, c, y);``%`</td></tr><tr><td>$moniter</td><td>和display作用类似，都是输出到控制台，不同的是display只有运行到display语句才会执行，而moniter只要显示的量改变就会执行</td></tr><tr><td>$finish / $finish(n)</td><td>中断仿真， n是中断仿真的时间</td></tr><tr><td>$stop</td><td>和finish用法相同</td></tr><tr><td>$readmemb</td><td>从文件中读取二进制数据，$readmemb (“数据文件名”, 数组（存储器）名, &lt;起始地址&gt;, &lt;结束地址&gt;);</td></tr><tr><td>$readmemb</td><td>从文件中读取十六进制数据</td></tr><tr><td>$fopen</td><td>$fopen(“文件名“, “操作模式“); 打开文件，操作模式有w,w+, a, a+。fopen会返回一个int型值，可以被fclose用来关闭文件</td></tr><tr><td>$fclose</td><td>关闭文件</td></tr></tbody></table><p><strong>打开文件将控制台输入导入文件示例</strong></p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">int MCD;</span><br><span class="line">MCD = <span class="symbol">$</span>fopen(“文件名“, “操作模式“);</span><br><span class="line"><span class="meta"><span class="meta-keyword">$fdisplay</span>( MCD, “显示格式控制符”, &lt;输出变量（信号）列表&gt;);</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$fmonitor</span>( MCD, “显示格式控制符”, &lt;输出变量（信号）列表&gt;);</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$fclose</span>( MCD);</span></span><br></pre></td></tr></table></figure><p>display的<code>%</code>后面的参数可以为</p><table><thead><tr><th>%h</th><th>%o</th><th>%d</th><th>%b</th><th>%c</th><th>%s</th><th>%t</th><th>%m</th></tr></thead><tbody><tr><td>16进制</td><td>8</td><td>10</td><td>2</td><td>ASCII</td><td>字符串</td><td>时间</td><td>模块名</td></tr></tbody></table><h1 id="算术电路"><a class="markdownIt-Anchor" href="#算术电路"></a> 算术电路</h1><h2 id="加法器"><a class="markdownIt-Anchor" href="#加法器"></a> 加法器</h2><p><strong>半加法器</strong></p><p>半加法器很容易想到使用异或操作，但是半加法器也有一个进位的输出，它的真值表为：</p><table><thead><tr><th>A</th><th>B</th><th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th><th>S</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">S</span> = A ^ B</span><br><span class="line"><span class="attr">C_out</span> = A &amp; B //只有两个都是<span class="number">1</span>才会进位</span><br></pre></td></tr></table></figure><p><strong>全加器</strong></p><p>全加器相比于半加器还把上一个加法器来的进位考虑进去了<br /><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%806.png" alt="" /></p><p>它的表达式为：</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">S = <span class="keyword">A</span> ^ B ^ C</span><br><span class="line">C_out = <span class="keyword">A</span> &amp; B + (<span class="keyword">A</span> ^ B) &amp; C_in<span class="comment">;</span></span><br><span class="line"><span class="keyword">A</span> &amp; B表示a和b同时为<span class="number">1</span>时产生进位。 </span><br><span class="line"><span class="keyword">A</span> ^ B表示<span class="keyword">A</span>，B有一个为<span class="number">1</span>时结果为<span class="number">1</span>，与上C_in就表示<span class="keyword">A</span>和B中有一个为<span class="number">1</span>并且C_in为<span class="number">1</span>就进位。</span><br><span class="line"></span><br><span class="line">其实(<span class="keyword">A</span> | B) &amp; C_in也可以，但是前面已经有一个<span class="keyword">A</span> ^ B了，在电路中我们可以直接拉一根导线然后和C_in相与，这样就少了一个或的器件</span><br></pre></td></tr></table></figure><h3 id="行波进位加法器"><a class="markdownIt-Anchor" href="#行波进位加法器"></a> 行波进位加法器</h3><p>这是一种最为朴素的多位加法器，就是上一个加法器计算完成之后将进位给下一个加法器，直到最后一个加法器计算完成。</p><p><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%807.PNG" alt="" /></p><p>如图是一个四位的行波进位加法器，每个方框代表一个加法器，而红色部分代表关键路径</p><h3 id="先行进位加法器"><a class="markdownIt-Anchor" href="#先行进位加法器"></a> 先行进位加法器</h3><p>先行进位比行波进位更为快速，但消耗的硬件资源更多。</p><p>公式推导</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">可以把S = <span class="keyword">A</span> &amp; B 看成 G</span><br><span class="line">把(<span class="keyword">A</span> ^ B) 看成P</span><br><span class="line">于是 C_out = G + P C_in<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>3</mn></msub><mo>+</mo><msub><mi>P</mi><mn>3</mn></msub><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>2</mn></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>1</mn></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>1</mn></msub><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>0</mn></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>0</mn></msub><mo>+</mo><msub><mi>P</mi><mn>1</mn></msub><msub><mi>C</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>3</mn></msub><mo>+</mo><msub><mi>P</mi><mn>3</mn></msub><mo stretchy="false">(</mo><msub><mi>G</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>G</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>G</mi><mn>0</mn></msub><mo>+</mo><msub><mi>P</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>G</mi><mn>3</mn></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>G</mi><mn>3</mn></msub><mo>+</mo><msub><mi>P</mi><mn>3</mn></msub><mo stretchy="false">(</mo><msub><mi>G</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>G</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>1</mn></msub><msub><mi>G</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>P</mi><mn>3</mn></msub><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}C_{out3} =&amp; G_3 + P_3 C_{out2}\\C_{out2} =&amp; G_2 + P_2 C_{out1}\\C_{out1} =&amp; G_1 + P_1 C_{out1}\\C_{out0} =&amp; G_0 + P_1 C_{in}\\C_{out3} =&amp; G_3 + P_3 (G_2 + P_2 (G_1 + P_1 (G_0 + P_0 C_{in})))\\G_3 =&amp; G_3 + P_3 (G_2 + P_2 (G_1 + P_1 G_0 ))\\P_3 =&amp; P_3 P_2 P_1 P_0\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.500000000000004em;vertical-align:-5.000000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em;"><span style="top:-7.660000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-3.1599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:1.3400000000000016em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em;"><span style="top:-7.660000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.1599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:1.3400000000000016em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过上面我们可以看到，先行进位可以通过计算G和P快速得到进位。</p><p><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%808.PNG" alt="" /></p><p>这是先行进位加法器的电路图。例如把32位的加法器分成8组，每组四个加法器。</p><ul><li>一旦开始通电，则每组的G和P都可以并行计算得到，总共需要的时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>(这是计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">G_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">G_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>…所需要的时间，也就是一个与门或者是或门所需要的时间。还有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pg\_block}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.98208em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span></span></span></span>,这段时间是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mn>3</mn><mo>:</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">G_{3:0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mrel mtight">:</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>所需要的时间，也就是6个与或门所需要的时间</li><li>一旦上一个先行进位计算完成，就可以传输到下一个先行进位计算器，到最后一个先行进位计算器所需要的时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>g</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>p</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi></mrow></msub><mo>+</mo><mn>7</mn><mo>∗</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>n</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pg} + t_{pg\_block} + 7 * t_{and\_or}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.98208em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.98208em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span></span></span></span>.前面两个是第一段计算G和P的时间，因为是同步计算，所以第一组行波进位器计算完G和P的时候其他的也计算完了。其他的只需要等待进位到来就可以计算。而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>n</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{and\_or}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.98208em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mi mathvariant="normal">到</mi><msub><mi>C</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{in}到C_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">到</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>那一段。</li><li>最后一个先行进位计算完成之后，给最后一组四个加法器进行计算，加法器内部使用的是行波进位，我们可以把行波进位时间设为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>F</mi><mi>A</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{FA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>因此总时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>p</mi><mi>g</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>p</mi><msub><mi>g</mi><mi>b</mi></msub><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi></mrow></msub><mo>+</mo><mn>7</mn><mo>∗</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>n</mi><msub><mi>d</mi><mi>o</mi></msub><mi>r</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mrow><mi>F</mi><mi>A</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{pg} + t_{pg_block} + 7 * t_{and_or} + t_{FA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.86518em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="移位器"><a class="markdownIt-Anchor" href="#移位器"></a> 移位器</h2><p>移位器也就是左移右移操作。</p><p><img src="/images/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF9.PNG" alt="" /></p><p>图中是右移移位，它使用了4个多路选择器进行选。如果控制信号是00，那么不需要移位，4个选择器的00分别接对应输出位的输入。如果是01，那么最高位是0，Y3的01位也就是0.</p><h2 id="乘法器"><a class="markdownIt-Anchor" href="#乘法器"></a> 乘法器</h2><p>乘法器可以使用移位和加法实现。</p><p><img src="/images/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%809.PNG" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A_3 , A_2 , A_1 , A_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是4个二进制位，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A_0 B_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是两个二进制位相与</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;硬件描述语言hdl大致功用&quot;&gt;&lt;a class=&quot;markdown</summary>
      
    
    
    
    <category term="逻辑电路" scheme="https://xinhecuican.github.io/categories/%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
