<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinhecuican&#39;s Blog</title>
  
  
  <link href="http://xinhecuican.github.io/atom.xml" rel="self"/>
  
  <link href="http://xinhecuican.github.io/"/>
  <updated>2020-12-27T07:19:29.333Z</updated>
  <id>http://xinhecuican.github.io/</id>
  
  <author>
    <name>星河璀璨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存管理</title>
    <link href="http://xinhecuican.github.io/post/41e39f2b.html"/>
    <id>http://xinhecuican.github.io/post/41e39f2b.html</id>
    <published>2020-12-26T07:28:00.000Z</published>
    <updated>2020-12-27T07:19:29.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="段式管理"><a class="markdownIt-Anchor" href="#段式管理"></a> 段式管理</h1><p>段指的是一些有相似功能的程序集合（不是准确描述），例如程序段，代码段，全局变量段等。</p><h2 id="段的分配算法"><a class="markdownIt-Anchor" href="#段的分配算法"></a> 段的分配算法</h2><h3 id="固定分区法"><a class="markdownIt-Anchor" href="#固定分区法"></a> 固定分区法</h3><p>事先把磁盘分为大小固定的分区，之后有进程来了就将它放入可以容纳的分区中。每个分区大小可以不一样，如4k,8k等。</p><p>这种方法最大的问题就是会产生很大的内碎片。例如没有空间使用了，然后来了一个大小为1k的进程，这时一块16k的分区释放了，这个进程只能进这个空间，于是浪费了15k的空间。</p><p>还可以对每个大小的分区使用一个列表。列表中存放的是可以被这个空间容纳的进程。进程先是按照大小分配到这些列表中，然后再进行运行。</p><p>这种方法可以减小每个分区的内碎片，但是不一定能提高系统总的空间利用率，因为可能进程集中于某一个大小的分区，这样其他的分区就没有得到充分利用。</p><h3 id="可变分区法"><a class="markdownIt-Anchor" href="#可变分区法"></a> 可变分区法</h3><p>可变分区法就是开始不分区，等进程来了之后再分配它需要的大小给他。这种方法可以使用一个链表进行维护，每次来了一个进程就记录内存起始位置和终止位置。</p><ul><li>最先适配：从一个方向进行扫描，找到第一个可以容纳的空间放入进程</li><li>下次适配：从上次分配的地方开始扫描，实际上差别并不大</li></ul><p>此外还有两种有两种策略，最好匹配和最差匹配。最好匹配指的是每次都把这个进程分配到最大的空间中，而最差匹配是指每次都把它分配到可分配区域的最小区域中。</p><p>但是这两种分配方法都无法解决外碎片的问题。但操作系统运行一段时间后，内存中的可用区间的大小会越来越小，虽然合并起来有空间但是无法使用。这时候就需要将这些外碎片整合到一起，叫做<strong>内存紧缩</strong>。内存整理需要大量的时间。</p><h2 id="交换技术"><a class="markdownIt-Anchor" href="#交换技术"></a> 交换技术</h2><p>交换技术指的是将暂时不需要使用的<strong>进程</strong>送到外存中，空出足够的空间给需要的进程使用。</p><p>请求式分段技术和缺页替换类似。请求式分段技术和交换技术的区别是</p><blockquote><p>交换技术需要交换整个进程，而请求式分段技术只需要交换一个段。</p></blockquote><h2 id="覆盖技术"><a class="markdownIt-Anchor" href="#覆盖技术"></a> 覆盖技术</h2><p>覆盖技术交换同一个进程中的段的技术，它按照时间先后顺序依次替换某些段。在需要时就由程序员控制进行替换。</p><p>这种技术和请求式分段的最大区别是：</p><blockquote><p>请求式分段是操作系统进行的，而覆盖技术的段交换需要程序员自己把握。</p></blockquote><h1 id="页的分配方法"><a class="markdownIt-Anchor" href="#页的分配方法"></a> 页的分配方法</h1><p><a href="https://xinhecuican.github.io/post/f79e4123.html">虚拟内存</a></p><p><a href="https://xinhecuican.github.io/post/7d1c86da.html">缓存</a></p><h1 id="段分配和页分配比较"><a class="markdownIt-Anchor" href="#段分配和页分配比较"></a> 段分配和页分配比较</h1><p>段式管理的优点：</p><ul><li>分段比分页更有逻辑性，将同类的或相关的内容放在一个段内，这样不会由于页面置换算法选择不当而形成“抖动”现象。</li><li>同类内容划分在一个段内，可以实现段的保护，如代码段设置为只读，数据段设置为读写</li><li>公共代码段可以通过映射共享到多个进程。</li></ul><p>段式管理的缺点：</p><ul><li>段体积大，在内存中无法不连续存储，易形成内存外碎片，降低内存利用率。</li></ul><p>页式管理的优点：</p><ul><li>没有外部碎片，最后一页可能有内碎片但不大;程序不必连续存放;便于改变程序占用空间大小</li></ul><p>页式管理的缺点：</p><ul><li>逻辑地址空间划分只简单依靠页面大小，缺乏内在逻辑性，导致一方面相关内容被分散 到多页上，页面置换不当时容易造成内存抖动，另一方面不同性质的内容被分到同一页中，使得页面 权限保护设置困难</li></ul><p>段页式内存管理是将逻辑地址分成三个部分，分别是段号，页号和页内偏移。有一个段表记录了每个段包含页的起始地址。</p><p>进行地址变换时，首先通过段表找到页表起始地址，然后再通过页表找到物理地址。这种方法和IA-32的保护机制实际上是不一样的。IA-32实际上进行了两步操作（线性地址翻译和物理地址翻译），但是这里实际上是一步操作（地址翻译）。</p><p>段页式管理：</p><ul><li>先分段再分页，以段为单位调入调出，以页为单位在内存中不连续存储，既保证了相关内容 同时进出内存，便于设置权限保护，又可以充分利用内存空间。 段页式结构复杂，实现起来效率低，所以没有被广泛采用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;段式管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>c++函数指针备忘</title>
    <link href="http://xinhecuican.github.io/post/9954ba8e.html"/>
    <id>http://xinhecuican.github.io/post/9954ba8e.html</id>
    <published>2020-12-20T00:47:00.000Z</published>
    <updated>2020-12-20T08:07:28.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><p>返回值 (*指针名) (参数列表)</p><p>例：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> (*func)(<span class="built_in">int</span> a, <span class="built_in">int</span> b);</span><br><span class="line">    func = <span class="keyword">add</span>;</span><br><span class="line">    cout&lt;&lt; <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出： <span class="number">3</span></span><br><span class="line"></span><br><span class="line">这里将<span class="keyword">add</span>的函数首地址传给了这个函数指针，现在这个指针就指代这个函数，传入参数就可以使这个函数执行。</span><br></pre></td></tr></table></figure><blockquote><p>注意：int(*)(int a, int b)是一个函数指针类型，和int，double类似。而func相当与int a的a。</p></blockquote><p>根据上面这一条，我们可以用typedef测试一下</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">typedef <span class="built_in">int</span>(*<span class="function"><span class="keyword">Func</span>)<span class="params">(int a, int b)</span>;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">Func</span> <span class="title">fn</span> = <span class="title">add</span>;</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">可以运行</span><br></pre></td></tr></table></figure><p>我们也可以直接赋值并运行：<code>(void(*)(void))eip()</code>。这条语句前面是一个void(*)(void)的函数指针，它的值是eip.后面的括号表示运行它</p><h1 id="函数指针在类中的使用"><a class="markdownIt-Anchor" href="#函数指针在类中的使用"></a> 函数指针在类中的使用</h1><p>我们是不可以直接用函数指针指向类中的函数的，因为成员函数在创建时会隐式添加一个this参数。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(Adder::* Fm)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function">Adder <span class="title">adder</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">Fm f = &amp;Adder::Add;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (adder.*f)(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">这样可以运行</span><br><span class="line">它的签名实际上是<span class="keyword">int</span>(*)(Adder *<span class="keyword">const</span> <span class="keyword">this</span>, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br></pre></td></tr></table></figure><p>但是这样的话这个指针就只可以指向这一个类中的函数了，也就失去了函数指针的优势。</p><p>我们可以通过重载()运算符实现多个函数之间使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Adder(<span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiplier</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Multiplier(<span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b * c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">(T&amp; f, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r = f(a, b);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[]) &#123;</span><br><span class="line">    <span class="function">Adder <span class="title">adder</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    Do(adder, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//输出4</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Multiplier <span class="title">multiplier</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    Do(multiplier, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">//输出60</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="c++" scheme="http://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL语句速查</title>
    <link href="http://xinhecuican.github.io/post/d213fc7f.html"/>
    <id>http://xinhecuican.github.io/post/d213fc7f.html</id>
    <published>2020-12-18T08:02:00.000Z</published>
    <updated>2020-12-25T07:15:35.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础名词"><a class="markdownIt-Anchor" href="#基础名词"></a> 基础名词</h1><ul><li>数据库： 保存有组织数据的容器，一般是一个或一组文件</li><li>表： 表在数据库中，用来进行分类存储各式各样的信息。如果把数据库看为一个柜子，那么表就是一个个抽屉，里面装着一些文件。表在实际应用中可以是顾客清单，产品目录等。</li><li>列： 表是由列和行构成。例如一个城市信息表，它的列可以使地址，城市，州，邮政编码等等。</li><li>行： 行是表中的一个记录。例如一个学生信息表，一个行包含一个学生的名字、年龄、性别等信息。</li><li>主键： 是一列，这一列可以唯一的标识每一个行。例如身份证号可以唯一的标识每一个人，而姓名不可以。因此身份证号可以作为主键。</li></ul><h1 id="use和show"><a class="markdownIt-Anchor" href="#use和show"></a> USE和SHOW</h1><ul><li>USE 数据库名：<ul><li>使用某个数据库</li></ul></li><li>SHOW DATABASES：<ul><li>返回可用数据库的列表</li></ul></li><li>SHOW TABLES：<ul><li>展示数据库内列表的信息</li></ul></li><li>SHOW COLUMNS FROM 列表名：<ul><li>DESCRIBE 列表名作用与它相同</li><li>展示数据列（表头）的信息.下面是一个输出样例<img src="/images/MySQL%E8%AF%AD%E5%8F%A5%E9%80%9F%E6%9F%A51.PNG" alt="" /></li></ul></li><li>SHOW STATUS：<ul><li>用于显示服务器状态信息</li></ul></li><li>SHOW CREATE DATABASE和 SHOW CREATE TABLE<ul><li>分别用来显示创建特定数据库或表</li></ul></li><li>SHOW GRANTS：<ul><li>用来显示用户的安全权限</li></ul></li><li>SHOW ERRORS和SHOW WARNINGS：<ul><li>用来显示服务器错误或警告信息</li></ul></li></ul><h1 id="select"><a class="markdownIt-Anchor" href="#select"></a> SELECT</h1><ul><li>SELECT 列名 FROM 表名：<ul><li>展示某个表中某一列的详细信息</li><li>列名可以有多个，同时检索多个列</li><li>列名前可以添加表名，表名前可以添加数据库名进行限定。</li><li>列名可以用<code>*</code>代替来检索所有列</li><li>可以通过DISTINCT来排除相同的行（这时不能同时检索多个列）。例如<code>SELECT DISTINCT order_num FROM orderitems;</code></li></ul></li><li>LIMIT子句可用于限制结果行数。例如 SELECT prod_name FROM products LIMIT 5;限制为5行。LIMIT 5, 5;只显示从第五行开始的五行。<strong>注意</strong>：下标也是从0开始。</li></ul><h2 id="order-by子句排序"><a class="markdownIt-Anchor" href="#order-by子句排序"></a> ORDER BY子句（排序）</h2><ul><li>ORDER BY + 要排序的列;<ul><li>以升序进行排序。 例如<code>SELECT cust_address FROM customers ORDER BY cust_address;</code></li><li>要排序的列可以有多个，这时先对第一个列进行排序，然后对第二个列进行排序。</li><li>可以在后面加上 DESC表明是降序排序。例如<code>SELECT cust_address, cust_name FROM customers ORDER BY cust_address DESC, cust_name;</code></li></ul></li></ul><h2 id="where子句过滤数据"><a class="markdownIt-Anchor" href="#where子句过滤数据"></a> where子句（过滤数据）</h2><p>where子句挑选出满足限制条件的行。</p><p>例：<code>SELECT prod_name, prod_price FROM products WHERE prod_price=2.50;</code></p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>…</td></tr><tr><td>&gt;=</td><td>…</td></tr><tr><td>BETWEEN</td><td>在指定的两个值之间，还要加上AND，例如<code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 1 AND 2.5;</code></td></tr><tr><td>IS NULL</td><td>检测是否是空值,例如<code>SELECT cust_id FROM customers WHERE cust_email IS NULL</code></td></tr></tbody></table><p>进行比较的数据也可以是char型。例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name = <span class="string">&#x27;Fuses&#x27;</span>;</span><br><span class="line"></span><br><span class="line">输出: Fuses3.42</span><br></pre></td></tr></table></figure><p>MySQL默认是不区分大小写的，但是有的软件会帮助区分。</p><h3 id="组合操作符andor-in-not"><a class="markdownIt-Anchor" href="#组合操作符andor-in-not"></a> 组合操作符（AND,OR， IN， NOT）</h3><p><strong>AND</strong></p><p>两个条件同时发生才为真。和c语言的&amp;&amp;作用类似。</p><p>例如：<br /><code>SELECT vend_id, prod_price FROM products WHERE vend_id=1003 AND prod_price &lt; 10;</code></p><p><img src="/images/MySQL%E8%AF%AD%E5%8F%A5%E9%80%9F%E6%9F%A52.PNG" alt="" /></p><p><strong>OR</strong></p><p>和上面一个相似</p><p><strong>AND，OR组合</strong></p><p>AND和OR都可以有无数个，并且这两个还可以组合使用。</p><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="number">1002</span> <span class="keyword">OR</span> vend_id = <span class="number">1003</span> <span class="keyword">AND</span> prod_price &gt;= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Fuses 3.42</span><br><span class="line">Oil can 8.99</span><br><span class="line">Detonator 13.00</span><br><span class="line">Bird seed 10.00</span><br><span class="line">Safe  50.00</span><br><span class="line">TNT    10.00</span><br></pre></td></tr></table></figure><p>上面的输出竟然有两个是小于10的，这是由于优先级导致的</p><blockquote><p>AND的优先级比OR高，因此在写复杂表达式时最好用括号包围表达式</p></blockquote><p><strong>NOT</strong></p><p>NOT的作用就是否定它之后的条件。可以对IN， BETWEEN和EXISTS子句取反。</p><p>例如：<code>SELECT prod_name, prod_price FROM products WHERE vend_id NOT IN (1002, 1003);</code></p><p><strong>IN</strong>：</p><p>IN和BETWEEN类似，都是用来表示条件的范围，例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>);</span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">BETWEEN</span> <span class="number">1002</span> <span class="keyword">AND</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure><p>上面这两条语句的作用是相同的。</p><p>IN的优点如下：</p><ul><li>IN更方便、简洁；</li><li>IN比一般的OR执行更快；</li><li>IN中还可以包含其他SELECT语句。</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact <span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> orders</span><br><span class="line">                  <span class="keyword">FROM</span> orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                               <span class="keyword">FROM</span> orderitems</span><br><span class="line">                               <span class="keyword">WHERE</span> prod_id = <span class="string">&#x27;TNT2&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="select子句的顺序"><a class="markdownIt-Anchor" href="#select子句的顺序"></a> SELECT子句的顺序</h2><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>输出要返回的表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>在要从表中选择数据时使用</td></tr><tr><td>WHERE</td><td>过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组</td><td>否</td></tr><tr><td>HAVING</td><td>过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>排序</td><td>否</td></tr><tr><td>LIMIT</td><td>限制检索行数</td><td>否</td></tr></tbody></table><h2 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h2><ul><li>第一种就是上面所示用的IN中使用子查询</li><li>第二种是在SELECT后就使用</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_state,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(*)</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> orders.cust_id = customers.cust_id) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><h1 id="通配符与正则表达式"><a class="markdownIt-Anchor" href="#通配符与正则表达式"></a> 通配符与正则表达式</h1><blockquote><p>想要使用通配符，必须要使用<strong>LIKE</strong>操作符。LIKE后面加上搜索模式进行匹配。</p></blockquote><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配任意字符任意次数</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr></tbody></table><p>例如：<code>select cust_address FROM customers WHERE cust_address LIKE &quot;%Lane&quot;;</code></p><blockquote><p>使用正则表达式只需要将LIKE换成REGEXP即可。<a href="https://xinhecuican.github.io/post/26477.html">正则表达式语法可看这篇文章的正则表达式部分</a></p></blockquote><h1 id="拼接字段"><a class="markdownIt-Anchor" href="#拼接字段"></a> 拼接字段</h1><p>可以用Concat函数拼接不同的字段。例如：<code>Concat(vend_name, '(', vend_country, ')')</code>由四部分拼接而成。</p><p>有时候需要删除右侧多余的空格，可以使用<code>RTrim(str)</code>。如果想删除左侧空格或者两侧空格可以使用LTrim或Trim.</p><p>例：</p><p><code>SELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ') ') FROM vendors ORDER BY vend_name;</code></p><p>结果输出： ACME (USA)</p><p>可以使用<strong>AS</strong>关键字为拼接后的字段赋予别名。</p><p>例：<code>SELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ') ') AS vend_title FROM vendors ORDER BY vend_name;</code></p><p>输出</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vend_title</span></span><br><span class="line"><span class="selector-tag">ACME</span> (USA) </span><br><span class="line"><span class="selector-tag">Anvils</span> <span class="selector-tag">R</span> <span class="selector-tag">Us</span> (USA) </span><br><span class="line"><span class="selector-tag">Furball</span> <span class="selector-tag">Inc</span>. (USA) </span><br><span class="line"><span class="selector-tag">Jet</span> <span class="selector-tag">Set</span> (England) </span><br><span class="line"><span class="selector-tag">Jouets</span> <span class="selector-tag">Et</span> <span class="selector-tag">Ours</span> (France) </span><br><span class="line"><span class="selector-tag">LT</span> <span class="selector-tag">Supplies</span> (USA) </span><br></pre></td></tr></table></figure><p>除了让Concat结果赋予名字外，还可以对算术计算结果赋予名字。算术计算支持加减乘除。</p><p>例如：<code>quantity * item_price AS expanded_price</code></p><h1 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h1><h2 id="文本处理函数"><a class="markdownIt-Anchor" href="#文本处理函数"></a> 文本处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Left(str, len)</td><td>返回串左边的字符</td></tr><tr><td>Length(str)</td><td>返回串的长度</td></tr><tr><td>Locate(substr, str, begin_len)</td><td>找出一个串的子串</td></tr><tr><td>Lower(str)</td><td>将串变成小写</td></tr><tr><td>LTrim(str)</td><td>去掉左边的空格</td></tr><tr><td>Right(str, len)</td><td>返回串右边的字符</td></tr><tr><td>RTrim(str)</td><td>去掉串右边的空格</td></tr><tr><td>Soundex(str)</td><td>返回串的SOUNDEX值</td></tr><tr><td>SubString(str, pos, len)</td><td>返回子串的字符</td></tr><tr><td>Upper(str)</td><td>将串变成大写</td></tr></tbody></table><p>其中SOUNDEX是一个将字符串转化成按照语音表示的数字的算法。</p><p>例如：Y.lee和Y.lie虽然拼写不同但是读起来相同，这样他们的Soundex是相同的。</p><h2 id="日期和时间处理函数"><a class="markdownIt-Anchor" href="#日期和时间处理函数"></a> 日期和时间处理函数</h2><p>日期的格式是yyyy-mm-dd。例如2005-11-9.并且最好使用四位数的年份。</p><p>时间的格式是 hh:mm:ss</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AddDate(date, INTERVAL sum unit)</td><td>增加一个日期</td></tr><tr><td>AddTime()</td><td>增加一个时间</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>CurTime()</td><td>返回当前时间</td></tr><tr><td>Date(expr)</td><td>返回日期的日期部分</td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>更复杂的日期增加</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间</td></tr><tr><td>Day()</td><td>返回一个日期中的天数部分</td></tr><tr><td>DayOfWeek()</td><td>返回星期几</td></tr><tr><td>Hour()</td><td>返回时间的小时部分</td></tr><tr><td>Minute()</td><td>返回分钟</td></tr><tr><td>Month()</td><td>…</td></tr><tr><td>Now()</td><td>返回当前的日期和时间</td></tr><tr><td>Second()</td><td>…</td></tr><tr><td>Time</td><td>返回一个日期和时间的时间部分</td></tr><tr><td>Year()</td><td>…</td></tr></tbody></table><p>例如 ：<code>SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);</code></p><p>INTERVAL是经过的意思，也就是过31天。后面也可以加MONTH，YEAR，HOUR等。</p><p>expr就是标准的日期时间或只有日期。要注意日期都是字符串，都要加引号。</p><h2 id="数值处理函数"><a class="markdownIt-Anchor" href="#数值处理函数"></a> 数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Abs()</td><td>返回一个数的绝对值</td></tr><tr><td>Cos()</td><td>…</td></tr><tr><td>Exp()</td><td>返回一个数的指数</td></tr><tr><td>Mod()</td><td>返回一个数的余数，相当于 %</td></tr><tr><td>Pi()</td><td>返回圆周率</td></tr><tr><td>Rand()</td><td>返回随机数</td></tr><tr><td>Sin()</td><td>…</td></tr><tr><td>Sqrt()</td><td>返回平方根</td></tr><tr><td>Tan()</td><td>返回一个数的正切值</td></tr></tbody></table><h2 id="汇总数据函数"><a class="markdownIt-Anchor" href="#汇总数据函数"></a> 汇总数据函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG(column)</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数, COUNT(*)返回行数，无论是否有NULL行。而COUNT(column)忽略NULL行</td></tr><tr><td>MAX(column)</td><td>返回某列的最大值,如果是文本列，那么会返回最后一行</td></tr><tr><td>MIN()</td><td>…</td></tr><tr><td>SUM()</td><td>返回某列的和</td></tr></tbody></table><p><strong>AVG()</strong></p><p>例：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">as</span> avg_price <span class="keyword">FROM</span> products;</span><br><span class="line">输出：</span><br><span class="line">avg_price</span><br><span class="line">16.133571</span><br></pre></td></tr></table></figure><p>AVG()函数的参数只能是一行，不能是多行，也就是说如果想要分别求多行的平均值，就要用多个AVG</p><blockquote><p>可以使用DISTINCT排除相同数据，如AVG(DISTINCT prod_price)</p></blockquote><h2 id="分组数据"><a class="markdownIt-Anchor" href="#分组数据"></a> 分组数据</h2><p>GROUP BY子句可用于分组。</p><p>例如： <code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id</code></p><ul><li>GROUP BY子句可以包含任意数目的列。但是指定了多个列，那么这些列同时进行计算，也就是说只有这几个列都匹配才可以算成一组。</li><li>如果列中有NULL，那么NULL会单独分成一组。</li><li>ORDER BY要卸载GROUP BY的后面</li></ul><h3 id="过滤分组"><a class="markdownIt-Anchor" href="#过滤分组"></a> 过滤分组</h3><p>过滤分组也就是挑选需要的组。关键字是<strong>HAVING</strong>。它的作用和WHERE相同，它后面接的语法也相同。</p><p>例如：<code>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id HAVING COUNT(*) &gt;= 2;</code></p><h1 id="联结"><a class="markdownIt-Anchor" href="#联结"></a> 联结</h1><p>它是一种特殊的语法，可以联结多个表返回同一个输出。</p><p>例如供应商表中存在一个唯一的供应商id，而产品表中只会存放这唯一的ID（为了节省空间），那么如果想找供应商供应那些商品首先需要从产品表中找到ID再在供应商表中找到名字。</p><p>使用联结就可以一次性输出供应商名字和产品信息。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors, products</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br></pre></td></tr></table></figure><p>上面这个式子的关键在于WHERE子句。通过筛选两个表中相同的vend_id来输出。</p><p>如果不进行限定的话将会对每一个供应商名字输出所有产品信息。</p><h2 id="内部联结inner-join"><a class="markdownIt-Anchor" href="#内部联结inner-join"></a> 内部联结（INNER JOIN）</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id = products.vend_id;</span><br></pre></td></tr></table></figure><p>这条语句作用和上面相同，并且INNER可以算作FROM的组成部分，使用这种语法时，后面限定条件使用ON而不是WHERE（但实际作用相同）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础名词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="MySQL" scheme="http://xinhecuican.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>算法设计与分析代码</title>
    <link href="http://xinhecuican.github.io/post/fb98053e.html"/>
    <id>http://xinhecuican.github.io/post/fb98053e.html</id>
    <published>2020-12-14T12:11:00.000Z</published>
    <updated>2020-12-20T08:20:11.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="子集和数问题"><a class="markdownIt-Anchor" href="#子集和数问题"></a> 子集和数问题</h1><p>由于本实验是为了验证数据集影响，因此没有采用一次增加两个的限界函数。此代码左支限界是 w+wi&gt; target,右支限界是w+rest&gt;=target. 并且由于实验网站要求在没有正确解的情况下输出近似解，因此每次触底或者左支终止之后还进行了记录。最后因为进行了排序，而数据集给出的答案中并没有进行排序，因此使用了一个结构体对开始的位置进行记录。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> *data;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span> scale)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scale; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i] = rand() % <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=l, j=r, key=a[l];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; a[j]&gt;=key)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; a[i]&lt;=key)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(a[i], a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[l], a[i]);</span><br><span class="line">        quick(a, l, i<span class="number">-1</span>);</span><br><span class="line">        quick(a, i+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paixu</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> mid, <span class="keyword">int</span> last, <span class="keyword">int</span> a[], <span class="keyword">int</span> temp[])</span><span class="comment">//这是合并过程</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l1=first,l2=mid+<span class="number">1</span>,r1=mid,r2=last;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1&lt;=r1&amp;&amp;l2&lt;=r2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l1]&lt;=a[l2])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[k++]=a[l1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[k++]=a[l2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l1&lt;=r1)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k++]=a[l1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l2&lt;=r2)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k++]=a[l2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i+first]=temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xunhuan</span><span class="params">(<span class="keyword">int</span> first,<span class="keyword">int</span> last, <span class="keyword">int</span> a[], <span class="keyword">int</span> temp[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first&lt;last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(first+last)/<span class="number">2</span>;</span><br><span class="line">        xunhuan(first, mid, a, temp);<span class="comment">//拆左边</span></span><br><span class="line">        xunhuan(mid+<span class="number">1</span>, last, a, temp);<span class="comment">//拆右边</span></span><br><span class="line">        paixu(first, mid, last, a, temp);<span class="comment">//合并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> scale)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span>[scale];</span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] temp;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    xunhuan(<span class="number">0</span>, scale<span class="number">-1</span>, a, temp);</span><br><span class="line">    <span class="keyword">delete</span> [] temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> scale;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;scale;</span><br><span class="line">    data =<span class="keyword">new</span> <span class="keyword">int</span>[scale+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    <span class="keyword">double</span> duration_time;</span><br><span class="line">    <span class="keyword">double</span> ans1=<span class="number">0</span>, ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">10</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        shuffle(scale);</span><br><span class="line">        <span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span>[scale];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scale; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">        quick(temp, <span class="number">0</span>, scale<span class="number">-1</span>);</span><br><span class="line">        QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">        duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">        ans1+=duration_time;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scale; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">        merge_sort(temp, scale);</span><br><span class="line">        QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">        duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">        <span class="keyword">delete</span> [] temp;</span><br><span class="line">        ans2+=duration_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans1/<span class="number">10</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans2/<span class="number">10</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> w[<span class="number">16</span>] = &#123;<span class="number">0</span>,<span class="number">70</span>,<span class="number">73</span>,<span class="number">77</span>,<span class="number">80</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">90</span>,<span class="number">94</span>,<span class="number">98</span>,<span class="number">106</span>,<span class="number">1110</span>,<span class="number">113</span>,<span class="number">115</span>,<span class="number">118</span>,<span class="number">120</span>&#125;;<span class="comment">//商品的重量 </span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">16</span>] = &#123;<span class="number">0</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">150</span>,<span class="number">156</span>,<span class="number">163</span>,<span class="number">173</span>,<span class="number">184</span>,<span class="number">192</span>,<span class="number">201</span>,<span class="number">210</span>,<span class="number">214</span>,<span class="number">221</span>,<span class="number">229</span>,<span class="number">240</span>&#125;;<span class="comment">//商品的价值</span></span><br><span class="line"><span class="keyword">int</span> bagV = <span class="number">750</span>;        <span class="comment">//背包大小</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">16</span>][<span class="number">751</span>] = &#123; &#123; <span class="number">0</span> &#125; &#125;;        <span class="comment">//动态规划表</span></span><br><span class="line"><span class="keyword">int</span> item[<span class="number">7</span>];        <span class="comment">//最优解情况</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMax</span><span class="params">()</span> </span>&#123;<span class="comment">//动态规划</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= bagV; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt; w[i])</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findWhat</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;<span class="comment">//最优解情况</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i][j] == dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">item[i] = <span class="number">0</span>;</span><br><span class="line">findWhat(i - <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j - w[i] &gt;= <span class="number">0</span> &amp;&amp; dp[i][j] == dp[i - <span class="number">1</span>][j - w[i]] + v[i]) &#123;</span><br><span class="line">item[i] = <span class="number">1</span>;</span><br><span class="line">findWhat(i - <span class="number">1</span>, j - w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)<span class="comment">//最优解输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; item[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">findMax();</span><br><span class="line">findWhat(<span class="number">15</span>, <span class="number">750</span>);</span><br><span class="line">QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">    <span class="keyword">double</span> duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;duration_time&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多源最短路问题"><a class="markdownIt-Anchor" href="#多源最短路问题"></a> 多源最短路问题</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SUM 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 0x3f3f3f3f </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[MAX_SUM][MAX_SUM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i][j] = <span class="built_in">min</span>(m[i][j], m[i][k]+m[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX_SUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;MAX_SUM; k++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][k] = MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    fstream input_stream;</span><br><span class="line">    input_stream.<span class="built_in">open</span>(<span class="string">&quot;p0.txt&quot;</span>, ios::in);</span><br><span class="line">    <span class="keyword">while</span>(!input_stream.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> from, to;</span><br><span class="line">        <span class="keyword">double</span> sum;</span><br><span class="line">        input_stream&gt;&gt;from;</span><br><span class="line">        input_stream&gt;&gt;to;</span><br><span class="line">        input_stream&gt;&gt;sum;</span><br><span class="line">        m[from][to] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    input_stream.<span class="built_in">close</span>();</span><br><span class="line">    LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">    solve();</span><br><span class="line">    QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">    <span class="keyword">double</span> duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;duration_time&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="row">    <embed src="https://xinhecuican.github.io/pdf/算法设计与分析实验.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;子集和数问题&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="杂项" scheme="http://xinhecuican.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>内联汇编</title>
    <link href="http://xinhecuican.github.io/post/51e63dcf.html"/>
    <id>http://xinhecuican.github.io/post/51e63dcf.html</id>
    <published>2020-12-06T08:49:00.000Z</published>
    <updated>2020-12-06T10:02:11.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>内联汇编是在c语言代码中插入一段汇编语言，这在一些特殊的场合如操作系统中经常使用。有些时候我们想加快速度或者进行某些特殊的操作就可以使用内联汇编。</p><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><blockquote><p><strong>关键字</strong>： asm</p></blockquote><p>例</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;movl %eax, %ebx&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>其中，<strong>volatile</strong>的含义是告诉编译器这段代码不需要优化，原封不动的让他执行。</p><p>语法：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">asm(</span><br><span class="line">   汇编语言模板</span><br><span class="line">   : output operands <span class="regexp">/*可选*/</span></span><br><span class="line">   : input operands <span class="regexp">/*可选*/</span></span><br><span class="line">   : options     <span class="regexp">/*可选*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以只有output operands或只有input operands。但是如果有options，那么前面两个冒号都要打.</p><p>options表示我们最多使用哪些寄存器。</p><h2 id="汇编模板"><a class="markdownIt-Anchor" href="#汇编模板"></a> 汇编模板</h2><p>可以使用<a href="https://xinhecuican.github.io/post/1326.html">AT&amp;T语法</a>，也可以使用intel语法（没有测试过）。下面以AT&amp;T模板作为例子。</p><p>它的语法和和汇编语言完全类似，同样是寄存器用%，立即数用$, 内存访问用<code>()</code>。</p><p><strong>注意</strong>：</p><ul><li>如果有多行汇编语句，那么语句与语句之间要用\n\t分隔开</li><li>如果使用了%0,%1等标识，那么寄存器就需要用两个%%标识</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;movl %0, %%eax\n\t&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;pushl %%eax\n\t&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">    :<span class="string">&quot;a&quot;</span>(a)</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="输出和输入部分"><a class="markdownIt-Anchor" href="#输出和输入部分"></a> 输出和输入部分</h2><p>他们的格式都是 <code>&quot;restriction&quot;(value)</code>，其中restriction表示这个变量要使用哪个寄存器或者表示内存或者是立即数。而value就是外带的变量。</p><p>如果是输出部分，在restricttion前还要加个等号。如 “=a”(output)</p><p>在定义了输入和输出部分之后，就可以把这些变量用于汇编语句中了。我们可以用%0,%1…%9表示变量。也就是说最多有是个输入输出部分。例如</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">input</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">output</span> = <span class="number">1</span>;</span><br><span class="line">asm volatile(</span><br><span class="line">    <span class="string">&quot;addl %1, %0&quot;</span></span><br><span class="line">    :<span class="string">&quot;=r&quot;</span>(<span class="keyword">output</span>)</span><br><span class="line">    :<span class="string">&quot;r&quot;</span>(<span class="keyword">input</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面就是一个简单的1+1并且把值赋到output中。output是第0个，input第第一个，所以%0表示output,%1表示input.</p><h2 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h2><p>输入输出部分前面的限制有很多，这里列举一些常用的</p><table><thead><tr><th>限制</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>表示 eax,ax,ah,al</td></tr><tr><td>b</td><td>表示 ebx, …</td></tr><tr><td>c</td><td>表示 ecx, …</td></tr><tr><td>d</td><td>表示 edx, …</td></tr><tr><td>S</td><td>表示 esi</td></tr><tr><td>D</td><td>表示 edi</td></tr><tr><td>r</td><td>指定任意一个寄存器</td></tr><tr><td>m</td><td>表示内存</td></tr><tr><td>p</td><td>表示操作数是一个指针</td></tr><tr><td>X</td><td>可以是任意类型</td></tr><tr><td>i</td><td>立即数</td></tr><tr><td>数字0,1,2,…</td><td>表示这个操作数和前面的某个操作数相同，一般在输入和输出在同一个变量时使用</td></tr><tr><td>f</td><td>浮点数</td></tr><tr><td>&amp;</td><td>避免使用同一个寄存器</td></tr></tbody></table><p>访问内存方式：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> input = <span class="number">0x7fffffc</span>;</span><br><span class="line">asm <span class="keyword">volatile</span>(</span><br><span class="line">    &quot;movl %%eax, (%0)&quot;</span><br><span class="line">    : &quot;r&quot;(<span class="keyword">input</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">input = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">asm <span class="keyword">volatile</span> (&quot;addl %1,%0&quot;:&quot;+r&quot;(result):&quot;m&quot;(<span class="keyword">input</span>));</span><br></pre></td></tr></table></figure><p>一个具体应用</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">void (*handler)();</span><br><span class="line"><span class="function"><span class="title">handler</span> = myproc()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>handler;</span><br><span class="line">uint addr = (uint)*handler;</span><br><span class="line"><span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>esp -= <span class="number">4</span>;</span><br><span class="line">asm volatile(</span><br><span class="line">    <span class="string">&quot;movl %0, (%1)\n\t&quot;</span></span><br><span class="line">    : <span class="string">&quot;r&quot;</span>(<span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span><span class="function"><span class="title">eip</span>), &quot;r&quot;(myproc()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>esp)</span><br><span class="line">);</span><br><span class="line"><span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>eip = addr;</span><br><span class="line"></span><br><span class="line">这段代码的作用是位于内核态时跳转到某一个函数，并且结束之后返回，asm中就是将返回地址存入栈中。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="c++" scheme="http://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>文件系统</title>
    <link href="http://xinhecuican.github.io/post/1b9c8662.html"/>
    <id>http://xinhecuican.github.io/post/1b9c8662.html</id>
    <published>2020-11-23T23:40:00.000Z</published>
    <updated>2020-11-29T03:12:21.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h1><h2 id="文件的结构和类型"><a class="markdownIt-Anchor" href="#文件的结构和类型"></a> 文件的结构和类型</h2><p>文件在系统中其实就是一串二进制数，结尾有特殊的符号标识，而他的入口处由操作系统管理。</p><p>在linux系统中，文件的类型有目录文件，一般文件和特殊文件（如设备文件）等，这些文件在内容组织上各不相同，但是他们的基础构成还是上面说的。</p><h2 id="查找文件"><a class="markdownIt-Anchor" href="#查找文件"></a> 查找文件</h2><p>首先在linux中文件通过树形结构进行组织，在找到对应目录下的文件后就要打开文件了。linux目录中存放的i节点表，i节点中存放着一些文件的信息和文件的入口地址。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F1.PNG" alt="" />如图就是一些文件的属性，操作系统会根据自身需要选取某些属性。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F2.PNG" alt="" />这个图中就是i节点的结构，注意Point to Block data就是在磁盘中的位置</p><h2 id="文件在磁盘中的储存"><a class="markdownIt-Anchor" href="#文件在磁盘中的储存"></a> 文件在磁盘中的储存</h2><ul><li>第一种方法时每个文件在磁盘中有固定的位置，当然这种方法是不可行的，因为这样必须事先分配好大小，如果达到了事先分配的最大值后就无法继续增大。</li><li>第二种方法是通过一个链表组织。这种方法中链表在磁盘的前几个字节，然后i节点指向入口地址。它的缺点是如果想访问后面的节点必须把前面节点都扫一遍，并且因为他在磁盘中占有了位置，所以现在磁盘中所能容纳的文件字节数减少了，需要重新考虑对齐的问题。</li><li>第三种方法是在i节点中增加15*4个字节。它是12+1+1+1的结构。低12字节保存第0到11块的入口地址（如果一块大小矢1k的话，那么0-12k地址内容可以通过低12字节访问）。而第12个字节保存到下一个链表的指针，这个链表大小就是一页大小，也就是说保存着从12k开始到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn><mo>+</mo><mn>1024</mn><mo>∗</mo><mo stretchy="false">(</mo><mfrac><mn>1024</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">12+ 1024*(\frac{1024}{4})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>位置的数据。同样第13字节有两个页表，那么它保存着 1024 * 1024/4 * 1024/4大小的数据。以此类推,第二个图展示了它的结构</li></ul><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F3.PNG" alt="" /><br /><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F4.PNG" alt="" /></p><h1 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统</h1><p>不同的操作系统中有不同的文件系统。</p><ul><li>linux： minix, ext2, ext3, ext4, reiserFS, IBMJFS, xfxs</li><li>windows: FAT-16, FAT-32, FAT-12, exFat， NTFS</li></ul><p>不同的文件系统不一定兼容，下面以ext2作为例子来说明文件系统的结构。</p><p><strong>磁盘</strong>被分为若干块，它的大小可以是1024， 2048， 4096等等。磁盘块的大小是由操作系统决定的。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F5.PNG" alt="" /></p><ul><li>超级块（superblock）是文件系统中的第一个块，其中存放着文件系统的一些信息如文件系统的根目录，挂载点，空闲块指针，空闲i节点指针。超级块坏了文件系统就坏了。</li></ul><blockquote><p>为了保证超级块坏的时候文件系统不至于崩溃，超级块一般由多个备份。</p></blockquote><ul><li>i节点和间接i节点表。这两个作用在上面说了</li><li>数据块（data Block)真正存储数据的块</li></ul><h2 id="空数据块位置"><a class="markdownIt-Anchor" href="#空数据块位置"></a> 空数据块位置</h2><p>每次操作系统想分配空间给一个文件时，首先要知道空的数据块在哪。</p><ul><li>一种办法是使用一个链表来维护空数据块，这种办法的问题是消耗太大</li><li>另一种办法是使用位图法，因为块是有编号的，如果对应位置是1表示不是空的。<img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F6.PNG" alt="" /></li></ul><h2 id="文件系统的创建和挂载"><a class="markdownIt-Anchor" href="#文件系统的创建和挂载"></a> 文件系统的创建和挂载</h2><p>可以使用<strong>mkfs</strong>命令进行文件系统的创建</p><blockquote><p><code>mkfs [-t type] [fs-options] &lt;device&gt; size</code></p></blockquote><p>例： mkfs -t ext4 /dev/sda6</p><p><strong>mount</strong>命令进行文件系统的挂载</p><p><a href="https://xinhecuican.github.io/post/35532.html">此命令可以看这篇文章中目录部分</a></p><p>例： mount /dev/lv100 /home/patsie</p><p><strong>注意</strong>：不同文件系统中i节点是不一样的，挂载时经历了一些转换过程，这时可以看到挂载进来的内容，但是该目录下原有内容被隐藏了，只有使用卸载命令<strong>umount</strong>才可以重新看到原有内容。</p><h1 id="磁盘及卷组管理"><a class="markdownIt-Anchor" href="#磁盘及卷组管理"></a> 磁盘及卷组管理</h1><p><a href="https://xinhecuican.github.io/post/7d1c86da.html">有关磁盘基础结构请看</a></p><p>首先磁盘分区有两种，分别是MBR和GPT（也就是C盘D盘之类的）</p><ul><li>MBR（Master Boot Record):<ul><li>位于第一个扇面</li><li>支持4个主分区，加上扩展分区最多也就支持32个分区</li><li>一个分区最大2T</li></ul></li><li>GPT（GUID Partition table):<ul><li>理论支持无限多个分区（实际上操作系统会限制）</li><li>最大支持18EB</li><li>需要操作系统支持和主板支持EFI/UEFI</li></ul></li></ul><p>直接磁盘分区有很多问题</p><ol><li>磁盘分区大小是固定的，很难改变（除非格式化）</li><li>受文件系统大小的限制（因为文件系统无法跨越设备，所以分区也不可以）</li><li>需要提前考虑大小</li></ol><p>LVM（逻辑卷管理）就是为了克服这些问题而产生的。他将物理设备分为若干物理卷，然后使用逻辑卷进行管理和分区。</p><blockquote><p>物理储存介质： 如磁盘等，在linux上是/dev/sda等设备文件<br />物理卷(PV): 相当于一个个磁盘分区，但是分区大小固定并且还有一些与LVM相关参数<br />卷组（VG）： 多个物理卷组成的储存池，也就是说可以让文件系统跨设备<br />逻辑卷（LV）： 从卷组中分出一些卷进行管理，可以在上面划分分区</p></blockquote><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F7.PNG" alt="" /></p><p><strong>一些linux命令</strong></p><ul><li>fdisk： 创建分区 例如 fdisk /dev/sda</li><li>pvcreate:创建物理卷</li><li>vgcreate: 创建卷组 例如： vgcreate vg0 /dev/sda6(sda6是一个物理卷）</li><li>vgextend: 扩展卷组 例如： vgextend vg0 /dev/sdb1</li><li>lvcreate: 创建逻辑卷 例如： lvcreate -L 10G -n lv0 /dev/vg0（名字是lv0，大小是10G）</li><li>mkfs： 创建文件系统，现在是在逻辑卷中创造</li><li>lvextend: 扩大逻辑卷</li><li>resize2fs： 扩大文件系统</li><li>umount： 卸载文件系统，为减小大小做准备。</li><li>lvreduce： 减小逻辑卷大小。<strong>首先要减小文件系统大小，使用resize2fs命令</strong></li></ul><p>这些命令基本按照顺序把文件系统创建和增删过程说了出来。</p><p>基本过程： 创建硬盘分区-&gt;创建逻辑卷-&gt;创建卷组-&gt;创建逻辑卷-&gt;创建文件系统</p><p>扩大物理卷-&gt;扩散卷组-&gt;扩大逻辑卷-&gt;扩大文件系统</p><p>减小文件系统-&gt;减小逻辑卷…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>抽样分布定理证明</title>
    <link href="http://xinhecuican.github.io/post/74e7fdff.html"/>
    <id>http://xinhecuican.github.io/post/74e7fdff.html</id>
    <published>2020-11-18T11:02:00.000Z</published>
    <updated>2020-12-03T01:44:02.376Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>定理 ：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{(n-1)S^{2}}{\sigma^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>证明</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo>+</mo><mi>μ</mi><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mi>n</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mi>n</mi><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>σ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{(n-1)S^2}{\sigma^2} =&amp; \sum_{k=1}^n\frac{(x_i-\overline{x})^2}{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu +\mu - \overline{x})^2}{\sigma^2}\\    =&amp;\frac{1}{\sigma^2} \sum_{i=1}^{n}(( x_i-\mu)^2 - 2(x_i-\mu )(\bar{x} - \mu) + (\bar{x}-\mu)^2)\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2(\bar{x} - \mu)\sum_{i=1}^{n}(x_i-\mu ) + \sum_{i=1}^{n}(\bar{x}-\mu)^2\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2(\bar{x} - \mu)n(\frac{1}{n}\sum_{i=1}^{n}x_i -\mu\times n)+ \sum_{i=1}^{n}(\bar{x}-\mu)^2\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2n(\bar{x} - \mu)^2+ \sum_{i=1}^{n}(\bar{x}-\mu)^2\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} -\sum_{k=1}^n\frac{(\overline{x}-\mu)^2}{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} - \frac{n(\overline{x}-\mu)^2 }{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} - \frac{(\overline{x}-\mu)^2}{\sigma^2 / \sqrt{n}}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:29.18381399999999em;vertical-align:-14.341906999999996em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:14.841906999999997em;"><span style="top:-16.841906999999996em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-13.588396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-10.334886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-7.105820999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-3.8767549999999993em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-0.6476889999999995em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:2.581377em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:5.834886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:9.088396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:14.341906999999996em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:14.841906999999997em;"><span style="top:-16.841906999999996em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-13.588396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-10.334886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-7.105820999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8767549999999993em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.6476889999999995em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:2.581377em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:5.834886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:9.088396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:14.341906999999996em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>∼</mo><msubsup><mi>X</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} \sim X_{n}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>σ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mo>∼</mo><msubsup><mi>X</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\frac{(\overline{x}-\mu)^2}{\sigma^2 / \sqrt{n}} \sim X_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.431388em;vertical-align:-0.9402800000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi mathvariant="normal">与</mi><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">(x_i - \mu)^2 与 \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">与</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>相互独立，所以根据卡方分布可加性可得服从于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">X_{n-1}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;定理 ：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;k</summary>
      
    
    
    
    <category term="数学" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="概率论" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>回溯法和分支限界法</title>
    <link href="http://xinhecuican.github.io/post/a50b8908.html"/>
    <id>http://xinhecuican.github.io/post/a50b8908.html</id>
    <published>2020-11-09T08:25:00.000Z</published>
    <updated>2020-12-22T00:24:57.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="回溯法"><a class="markdownIt-Anchor" href="#回溯法"></a> 回溯法</h1><h2 id="回溯法概念"><a class="markdownIt-Anchor" href="#回溯法概念"></a> 回溯法概念</h2><p>回溯法是一种能避免不必要搜索的穷举式算法，适用于一些解空间相当大的问题。</p><p>它经常呈现一种树形结构，先进入左节点，当到了底部或者条件不满足时返回父节点并进入右节点。一个典型的例子就是<a href="https://xinhecuican.github.io/post/37663.html">深度优先搜索</a></p><p>如果不加限制条件直接搜索的话复杂度将是2^n。因此我们需要添加一些限界函数来减小搜索量。</p><p>限界函数一般有两个，一个是用来限制左支的，叫显式约数条件。另一种是限制是否搜索右支的，叫隐式约束条件。</p><p>n叉树模板：<img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%956.PNG" alt="" /></p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><h3 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h3><p><a href="https://xinhecuican.github.io/post/21624.html">01背包问题</a>最常见的办法是动态规划算法.这里介绍回溯法求解</p><ol><li>将物品按密度进行排序</li><li>设bestp是当前最好收益并初始化为负无穷</li><li>设bound = cp+r是效益值的上界。其中cp是这个节点的收益值，r是剩下所有物品的连续背包问题收益值（也就是说不满一件也可以装进去）</li><li>展开左子节点：<ul><li>如果$$cw+Wk &lt;= c$$, 则装入k,且cw += Wk, cp += pk Xk = 1(说明这个节点使用了）</li></ul></li><li>否则展开右节点：<ul><li>如果bound &lt;= bestp。则停止展开右子树（就算把剩余物品都放进去也抵不上它的收益）。否则就 xk = 0,然后继续搜索</li></ul></li></ol><p><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%951.PNG" alt="" /></p><h3 id="货箱装船问题"><a class="markdownIt-Anchor" href="#货箱装船问题"></a> 货箱装船问题</h3><p><strong>问题</strong>：给定载重量为 c 的货船，找一种装船的方法，使得装载的货箱数目最多。</p><p><strong>分析</strong></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">设<span class="keyword">cw</span>是已装载货物重量</span><br><span class="line"></span><br><span class="line">显式限界条件： 如果<span class="keyword">cw</span>+w(i) &gt; maxw 则杀死该左节点。</span><br><span class="line">隐式限界条件： 如果<span class="keyword">cw</span>+r &lt;= bestw，则停止展开右节点。r是剩余货物的重量。</span><br></pre></td></tr></table></figure><h1 id="分支限界法"><a class="markdownIt-Anchor" href="#分支限界法"></a> 分支限界法</h1><p>分支限界法也是一种穷举搜索算法。但是同样可以通过限界函数进行限界。一个典型例子就是广度优先搜索。</p><h2 id="旅行商问题"><a class="markdownIt-Anchor" href="#旅行商问题"></a> 旅行商问题</h2><p>首先说一下归约矩阵。</p><ul><li>行规约矩阵：找到每一行最小的数，然后让这一行都减去最小的数。</li><li>行规约数： 每一行最小的数求和</li><li>归约矩阵： 每一行做归约后每一列再做归约。归约数就是行规约数加上列归约数</li></ul><p>归约矩阵的性质：</p><ul><li>每一行每一列都必须有一个0</li><li>对于旅行商问题， 它的结果就是在归约矩阵中得到的结果加上归约数 W(f) = w’(f)+h</li></ul><p>例：<img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%951.PNG" alt="" /><br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%952.PNG" alt="" /></p><p>其中q12表示A’矩阵中第一行第二列的点，表示我们要先从1到2.</p><p>之后的h’表示去掉这一行这一列和qji为无穷后的矩阵的归约值。因为我们到过这个节点之后这一行这一列都不会再有点了，所以可以去掉。另外如果不是导数第二个节点的话也不可能回到起点。</p><p>找到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>的最小值后以这个点作为起始点除去这一行这一列进行下一步搜索。</p><p>现在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>最小，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(4)(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>inf</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">+\inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">in<span style="margin-right:0.07778em;">f</span></span></span></span></span>并且将第四行提到第一行，之后重复上述过程。<br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%953.PNG" alt="" /></p><p>之后一直重复上述步骤直到搜索完成。</p><p>使用行规约矩阵的目的在于提前知道一些信息来进行分支限界。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;回溯法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="http://xinhecuican.github.io/post/eefe591f.html"/>
    <id>http://xinhecuican.github.io/post/eefe591f.html</id>
    <published>2020-10-23T10:36:00.000Z</published>
    <updated>2020-12-26T02:14:14.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>进程是正在运行的程序，它包含代码和执行状态（栈堆寄存器等）。而程序仅仅是一些静态的代码。一个程序可以生成多个进程（如记事本进程）。进程是资源分配最小单元</p><h1 id="linux系统进程"><a class="markdownIt-Anchor" href="#linux系统进程"></a> Linux系统进程</h1><p>Linux进程是采用进程树的方式。程序开始时创建一个零号进程，然后零号进程创建一号进程再由一号进程创建其他的进程。linux进程是一种树状结构，可以通过pstree命令查看进程树。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sys/types.h：储存了一些宏定义如<span class="keyword">pid_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>fork():创建当前进程的子进程，并且子进程和当前进程完全相同。</p></blockquote><p>返回值：返回两个返回值，如果返回值是零，代表当前在子进程中。如果返回值&gt;0,代表在父进程中并且返回值是子进程pid，如果返回值&lt;0,代表出错。</p><p><strong>注意</strong>： 这里复制子进程是采用copy on right的方式，即开始子进程与父进程完全相同，只有当子父进程之间有差异时才会额外开辟空间储存差异。</p><p>例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;this is the child process\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;this is the parent process\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getpid(): 获得pid</p></blockquote><blockquote><p>exec家族， 用于在子进程中调用系统中有的函数</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> execl(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execv(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execle(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ..., <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execve(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execlp(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execvp(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span><br><span class="line"></span><br><span class="line">其中有p的代表会自动在系统路径中搜索，例如</span><br><span class="line">execlp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot; -l&quot;</span>, <span class="literal">NULL</span>)会执行ls -l指令，如果没有p，则需要/bin/ls</span><br><span class="line"></span><br><span class="line">v代表传入一个数组，这个字符数组加起来就是命令，最后以<span class="literal">NULL</span>结尾</span><br><span class="line"></span><br><span class="line">e代表绝对地址</span><br></pre></td></tr></table></figure><blockquote><p>int wait(int *status)： 会阻塞当前进程，直到找到了僵尸子进程（死了的子进程），之后就彻底杀死子进程并返回进程号，失败会返回-1。status可以设置成NULL，</p></blockquote><blockquote><p>pid_t waitpid(pid_t pid,int *status,int options): pid是子进程进程号，表示只等待这一个子进程，其他子进程终止仍处于阻塞状态。</p></blockquote><p>options有：</p><ul><li>WNOHANG(wait no hung)： 即使没有子进程退出，它也会立即返回</li><li>Returns information about a child process stopped by SIGTTIN,<br />SIGTTOU, SIGSSTP, and SIGTSTOP signals.(返回子进程被某些信号而停止的信息）</li></ul><h2 id="进程的状态"><a class="markdownIt-Anchor" href="#进程的状态"></a> 进程的状态</h2><p>进程的状态一般可以分为三大类：运行，就绪，阻塞。</p><p><strong>运行</strong>状态是指正在cpu中执行指令的进程。</p><p><strong>就绪</strong> 是指获得了除cpu意外所有资源，正在等待cpu的进程</p><p><strong>阻塞</strong> 是指因为某些原因放弃争夺cpu的进程</p><h2 id="进程的调度"><a class="markdownIt-Anchor" href="#进程的调度"></a> 进程的调度</h2><h3 id="批处理系统中的调度"><a class="markdownIt-Anchor" href="#批处理系统中的调度"></a> 批处理系统中的调度</h3><p>批处理系统就是不具备交互性，单纯完成任务的系统。这种系统一般需要考虑提高cpu利用率（早期计算机使用批处理系统）。批处理系统中的任务一般相对固定，所以可以大致知道它所需要花费的时间。</p><p><strong>周转时间</strong></p><p>周转时间  = 作业完成时刻 - 作业到达时刻 = 运行时间 + 等待时间</p><p><strong>带权周转时间</strong></p><p>带权周转时间 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">周</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{周转时间}{完成时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.739em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.394em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">完</span><span class="mord cjk_fallback mtight">成</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">周</span><span class="mord cjk_fallback mtight">转</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="先来先服务"><a class="markdownIt-Anchor" href="#先来先服务"></a> 先来先服务</h4><p>指的是先来的任务先进行服务，这种方式最大的问题是单位时间内可以执行的任务数量比较低。如果一个任务时间很短而前面有一个需要大量时间的任务，那么他将不得不花很长的时间去等待。</p><h4 id="最短时间优先"><a class="markdownIt-Anchor" href="#最短时间优先"></a> 最短时间优先</h4><p>指的是时间短的进程先来服务。但是这种方式可能让时间长的进程一直无法执行（如果中间一直插入时间短的进程的话）</p><h4 id="高响应率优先"><a class="markdownIt-Anchor" href="#高响应率优先"></a> 高响应率优先</h4><p>这种方法考虑了等待时间的影响，是对最短时间优先的改进。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">响</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">率</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mrow><mi mathvariant="normal">周</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1</mn><mo>+</mo><mspace width="1em"/><mfrac><mrow><mi mathvariant="normal">等</mi><mi mathvariant="normal">待</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">任</mi><mi mathvariant="normal">务</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}响应率 =&amp; \frac{周转时间}{执行时间} \\      =&amp; 1 + \quad \frac{等待时间}{完成任务需要时间}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.652em;vertical-align:-1.5759999999999996em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0760000000000005em;"><span style="top:-4.236000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">响</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">率</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-2.4100000000000006em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5759999999999996em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0760000000000005em;"><span style="top:-4.236000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4100000000000006em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">任</span><span class="mord cjk_fallback">务</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">待</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5759999999999996em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过比较响应率，响应率高的先执行。</p><p>这种方法考虑了时间的影响，在时间短的进程先运行的同时不会让长进程无限制的等待。</p><h3 id="交互式系统中的调度"><a class="markdownIt-Anchor" href="#交互式系统中的调度"></a> 交互式系统中的调度</h3><p>交互式系统就是现在微机所使用的系统，在系统中需要运行的进程一般有很多，因此需要不停的将进程调入调出来让使用者感觉上进程是并行执行的。因此需要规定一个时间片避免进程无限制的执行。时间片到了会强制将当前进程调出然后从进程池中调入一个新的进程。在windows系统中时间片是15ms，linux系统中时间片是10ms</p><h4 id="轮转调度"><a class="markdownIt-Anchor" href="#轮转调度"></a> 轮转调度</h4><p>轮转调度是使用一个队列，运行完的进程放到队列的尾部，然后从队列的首部拉入一个进程执行。这种方法最大的问题是没有考虑到一些进程需要紧急执行（如火灾报警程序）</p><h4 id="优先级调度"><a class="markdownIt-Anchor" href="#优先级调度"></a> 优先级调度</h4><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1.PNG" alt="" /></p><p>如图，这是优先级调度的一种组织形式。数字低的是高优先级（windows或linux中），他会首先从高优先级查找，如果有待执行的程序就执行它。</p><p>在windows系统中，正常的优先级是80，低于80是高优先级，高于80是低优先级。如果高优先级较多，低优先级可能一直没有执行的机会。所以高优先级一般都是服务进程，在不需要服务的时候他们会阻塞，一旦有信号将他们唤醒他们便会优先执行。</p><p>有时还会对使用cpu时间长的程序进行惩罚。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Priority</span> = base + nice + CPU_PENALTY</span><br><span class="line"><span class="attribute">CPU_PENALTY</span> = CPU_USAGE * R</span><br><span class="line"><span class="attribute">CPU_USAGE</span> = CPU_USAGE * D</span><br><span class="line"></span><br><span class="line"><span class="attribute">CPU_USAGE</span> 是CPU使用次数，每过<span class="number">1</span>s（或其他时间）就会执行第三条指令防止CPU_USAGE一直增大。而CPU_PENALTY就是根据CPU_USAGE得来的。</span><br><span class="line"></span><br><span class="line"><span class="attribute">nice</span>是我们可以设置的优先级，在linux中有个nice命令可以在程序运行前设置优先级，范围是-<span class="number">20</span>-<span class="number">19</span>，非root用户只能变大不能变小。renice可以在运行时设置优先级</span><br></pre></td></tr></table></figure><h1 id="竞争条件和信号量"><a class="markdownIt-Anchor" href="#竞争条件和信号量"></a> 竞争条件和信号量</h1><p>进程之间有两种关系，协同和竞争。而怎么防止两个进程同时使用一个东西或如何通知其他进程便是多进程中需要考虑的问题</p><h2 id="引例"><a class="markdownIt-Anchor" href="#引例"></a> 引例</h2><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B2.PNG" alt="" /></p><p>这个队列是等待使用打印机的队列，out是即将被答应的文件。</p><p>我们可以假设这种情况，进程a刚刚访问in发现它是7但是这时时间片到了。它被迫退出cpu。此时进程b进入cpu发现in是7并且将文件放在7处。之后再回到a，a会把他的文件放在7处然后in++。这时b的文件就被覆盖掉了</p><h3 id="皮德森算法"><a class="markdownIt-Anchor" href="#皮德森算法"></a> 皮德森算法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B3.PNG" alt="" /></p><p>我们可以考虑这种情况，a进程到了turn = process处停止，b进程一路往下到了while，发现a进程对他有兴趣而终止。</p><p>而如果a到了turn = process终止，b也到turn = process终止，那么此时因为turn被改变，所以while第一个条件不满足，进入临界区。</p><p>这种算法可以解决竞争条件，但是首先它是对两个进程来说的，多个进程不好扩展，另外每次都要写这两个函数非常麻烦。</p><h3 id="tsl信号法"><a class="markdownIt-Anchor" href="#tsl信号法"></a> TSL信号法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B4.PNG" alt="" /></p><p>此方法使用了一条汇编指令TSL，这条指令执行了两个内容<code>mov lock, %register;mov $1, %lock ；</code>前面相当于读锁的内容，后面是更改锁的值</p><blockquote><p>这条指令和上面例子的区别是这是<strong>原子指令</strong>，也就是说要么都不做，要么必须做完，时钟中断不会产生干扰。</p></blockquote><h2 id="pv操作"><a class="markdownIt-Anchor" href="#pv操作"></a> PV操作</h2><p>更为常用的方法是使用pv操作，p就使信号量-1，v就使信号量+1.</p><p><strong>信号量可正可负</strong></p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B5.PNG" alt="" /></p><p>信号量可正可负代表有一个等待队列，信号量为负时代表有多少个进程正在等待。</p><p>**信号量只有1或0</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">P(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(!s)</span><br><span class="line">    s--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： pv操作是操作系统提供的，他也是原子操作。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><strong>生产者消费者问题</strong></p><p>有一个生产者和消费者并且有一个队列可以存放生产者生产的产品。</p><p>一个普通的办法是</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#define N <span class="number">100</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> producer(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        item = produce_item();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == N)sleep();</span><br><span class="line">        insert_item(item);</span><br><span class="line">        <span class="keyword">count</span> = <span class="keyword">count</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == <span class="number">1</span>)wakeup(consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> consumer(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep();</span><br><span class="line">        &#125;</span><br><span class="line">        item = remove_item();</span><br><span class="line">        <span class="keyword">count</span> -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == N-<span class="number">1</span>)wakeup(producer);</span><br><span class="line">        consume_item(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法是有问题的。假如消费者先运行，发现count == 0，然后发生时钟中断，之后生产者生产一个物品并发送wakeup信号，但这个时候consumer并没有睡眠，所以这个信号是没有用的。之后consumer睡眠，然后生产者一直生产物品也进行睡眠。这就产生了死锁。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#define N <span class="number">100</span></span><br><span class="line">semophore mutex = <span class="number">1</span>;</span><br><span class="line">semophore empty = N;</span><br><span class="line">semophore full = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">void producer(void)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        item = produce<span class="constructor">_item()</span>;</span><br><span class="line">        <span class="constructor">P(<span class="params">empty</span>)</span>;</span><br><span class="line">        <span class="constructor">P(<span class="params">mutex</span>)</span>;</span><br><span class="line">        insert<span class="constructor">_item(<span class="params">item</span>)</span>;</span><br><span class="line">        <span class="constructor">V(<span class="params">mutex</span>)</span>;</span><br><span class="line">        <span class="constructor">V(<span class="params">full</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">另外一个类似</span><br></pre></td></tr></table></figure><p>这里empty和full也可以变成一个信号量，但是P的逻辑需要更改。empty初始值是N，每次生产一个就会减一，当empty变成0也就是满的时候就会阻塞。</p><p><strong>哲学家就餐问题</strong></p><p>哲学家问题是五个哲学家五根筷子，有五盘面，每个哲学家从左边和右边各拿一个筷子就可以吃到面，问怎样才可以让所有哲学家都吃到面。</p><p>如果完全不加控制，可能会出现五个人同时拿起左边筷子又同时拿起右边筷子的情况，这样就会饿死。</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B6.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B7.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B8.PNG" alt="" /></p><p>这里使用了信号量mutex保证同一时间只有一个人试图拿筷子</p><p><strong>读写问题</strong></p><p>读写问题是同一时间可以有多个读的，但是同一时间最多有一个写的，如果有人在读那么写的就要等待</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B9.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B10.PNG" alt="" /></p><p>这是读者优先的策略，还有写者优先和公平竞争。</p><p><strong>写者优先</strong></p><p>写者优先指的是可以有多个写，一旦有人在写就阻塞读。</p><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">reader</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">p</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">readcnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">p</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">readcnt</span>++;</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">    <span class="title">do_something</span>();</span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">readcnt</span>--;</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">readcnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">v</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="variable">writer</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">writecntsign</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">p</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">writecnt</span>++;</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="title">do_something</span>();</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">writecntsign</span>--;</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">writecnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">v</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">writecntsign</span>);</span></span><br></pre></td></tr></table></figure><p><strong>公平竞争</strong></p><p>公平急诊就是两者优先级相同，谁先来谁先进行。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/* 读者队列初始值为0，其他资源初始值为1*/</span></span><br><span class="line">int readCount = <span class="number">0</span>;</span><br><span class="line">semaphore keySignal = <span class="number">1</span>;</span><br><span class="line">semaphore readCountSignal = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">reader()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(true)</span><br><span class="line">    &#123;</span><br><span class="line">      wait(keySignal);        <span class="regexp">//</span>申请令牌</span><br><span class="line">      wait(readCountSignal);  <span class="regexp">//</span>申请计数器资源</span><br><span class="line">      <span class="keyword">if</span>(!readCount)          <span class="regexp">//</span>为零则申请文件资源</span><br><span class="line">         wait(fileSrc);</span><br><span class="line">      readCount++;</span><br><span class="line">      signal(readCountSignal); <span class="regexp">//</span>释放计数器资源</span><br><span class="line">      signal(keySignale);      <span class="regexp">//</span>释放令牌</span><br><span class="line"> </span><br><span class="line">      ...</span><br><span class="line">      perform read operation  <span class="regexp">//</span>执行临界区代码</span><br><span class="line">      ...</span><br><span class="line">  </span><br><span class="line">      wait(readCountSignal);  <span class="regexp">//</span>申请计数器资源</span><br><span class="line">      readCount--;</span><br><span class="line">      <span class="keyword">if</span>(!readCount)                <span class="regexp">//</span>为零则释放文件资源</span><br><span class="line">         signal(fileSrc);</span><br><span class="line">    signal(readCountSignal); <span class="regexp">//</span>释放读者计数器资源</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">writer()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">while</span>(true)</span><br><span class="line">     &#123;</span><br><span class="line">        wait(keySignal);     <span class="regexp">//</span>申请令牌</span><br><span class="line">        wait(fileSrc);       <span class="regexp">//</span>申请文件资源</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        perform write operation <span class="regexp">//</span>执行临界区代码</span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        signal(fileSrc);   <span class="regexp">//</span>释放文件资源</span><br><span class="line">        signal(keysignal); <span class="regexp">//</span>释放令牌</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如一个读者先来，然后来了一个写者。这时写者因为申请不到filesrc而被阻塞。这时再来一个读者，读者因为申请不到key而被阻塞。于是第一个读者执行完成之后释放file。然后写者执行，然后读者再执行。</p><h2 id="进程间通讯"><a class="markdownIt-Anchor" href="#进程间通讯"></a> 进程间通讯</h2><ul><li>给进程发信号，但是信号只有63种并且有些还不能使用所以这种方法一般不使用。</li><li>使用进程间通讯的函数<img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B11.PNG" alt="" /></li></ul><p>这些是进程间通讯的信号量，和下面线程间通讯不同。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/ipc.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/sem.h&gt;</span></span><br><span class="line">+int semget(key_t key, int nesms, int semflg);key是信号量键值，nesm是创建信号量数量， semflg如果是IPC_EXCL创建唯一一个信号量，如果键值已经存在，那么就会出错。而IPC_CRATE即使存在也不会出错.返回semid</span><br><span class="line">+int semctl(int semid, int semnum, int cmd, <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>): 删除或调整信号量，具体使用看下面</span></span><br><span class="line">+int semop(int semid, <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> *<span class="title">sops</span>, <span class="title">size_t</span> <span class="title">nsops</span>):<span class="title">nsop</span>是操作信号量数目（一般是1），结构体结构看下面</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">int val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">unsigned short int *array;</span><br><span class="line">/*<span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *<span class="title">__buf</span>;</span>*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">struct sembuf &#123;</span></span><br><span class="line"><span class="regexp">short sem_num;</span></span><br><span class="line"><span class="regexp">short sem_op;</span></span><br><span class="line"><span class="regexp">short sem_flg;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">static void sem_del(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    union semun sem_union;</span></span><br><span class="line"><span class="regexp">    if (semctl(sem_id, 0, IPC_RMID, sem_union) == -1)</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;Failed to delete semaphore\n&quot;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">int sem_p(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    struct sembuf sem_b;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_num = 0;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_op = -1; /</span>* P() *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    sem_b.sem_flg = SEM_UNDO;/</span><span class="regexp">/进程结束而信号量没释放时，会自动释放信号量</span></span><br><span class="line"><span class="regexp">    if (semop(sem_id, &amp;sem_b, 1) == -1) &#123;</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;semaphore_p failed\n&quot;);</span></span><br><span class="line"><span class="regexp">        return(0);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return(1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">int sem_v(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    struct sembuf sem_b;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_num = 0;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_op = 1; /</span>* V() *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    sem_b.sem_flg = SEM_UNDO;</span></span><br><span class="line"><span class="regexp">    if (semop(sem_id, &amp;sem_b, 1) == -1) &#123;</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;semaphore_v failed\n&quot;);</span></span><br><span class="line"><span class="regexp">        return(0);</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">   return(1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h1><p>线程可以看成比较小的进程，有自己的状态（寄存器和参数等），也会有一些可以被多个线程共享的参数（全局变量）。线程使独立运行和独立调度最小单元。线程可以分为用户级线程和内核级线程和混合线程三种方式。</p><ul><li>用户级线程： 这种线程不需要内核参与调度。优点是切换快（和函数调用类似），可以在不支持内核级线程的操作系统中执行。但是有一个缺点就是有一个线程被阻塞，那么其余该进程线程也会被阻塞-<strong>在操作系统层面上只会看到一个进程</strong>。</li><li>内核级线程，由内核参与线程的调度。优点是一个线程被阻塞，那么其他的线程不会被阻塞，缺点是线程间切换所需时间多（要清空高速缓存等）</li></ul><p>现在操作系统一般使用内核级线程</p><h2 id="linux线程编程-c语言"><a class="markdownIt-Anchor" href="#linux线程编程-c语言"></a> linux线程编程 C语言</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">头文件&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">线程创建</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> pthread_create (pthread_t *__restrict __newthread,</span><br><span class="line">   <span class="keyword">const</span> pthread_attr_t *__restrict __attr,</span><br><span class="line">   <span class="keyword">void</span> *(*__start_routine) (<span class="keyword">void</span> *),</span><br><span class="line">   <span class="keyword">void</span> *__restrict __arg) </span><br><span class="line">第一个参数是指向这个线程的指针。第二个参数设置线程的属性，一般设置成<span class="literal">NULL</span>。第三个参数是这个线程运行时所运行的函数。第四个参数是运行时函数的参数。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span>* test(<span class="keyword">void</span>* args)</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;this is the arguments-%s&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    pthread_t p;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, test, <span class="string">&quot;arg1&quot;</span>);</span><br><span class="line">    pthread_join(p, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出： <span class="keyword">this</span> is the arguments-arg1</span><br></pre></td></tr></table></figure><ul><li><code>int pthread_join(pthread_t thread, void **retval);</code>.它的作用是让主线程等待某个线程结束再执行。retval是线程结束后的返回值，可以设置成NULL。</li></ul><p>需要使用pthread_join的原因是主线程结束这个程序就结束了，这时候其他线程不一定执行完成。</p><ul><li><p>线程信号量 头文件pthread.h</p><ul><li>pthread_mutex_t lock_put;//信号量创建</li><li>pthread_mutex_lock(&amp;lock_put);</li><li>pthread_mutex_unlock(&amp;lock_put);</li><li>pthread_mutex_init(&amp;lock_put, NULL);//初始化，后面一般是NULL,当然也可以是下列值<ul><li><p>PTHREAD_MUTEX_TIMED_NP，这是缺省值，也就是普通锁。当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。</p></li><li><p>PTHREAD_MUTEX_RECURSIVE_NP，嵌套锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</p></li><li><p>PTHREAD_MUTEX_ERRORCHECK_NP，检错锁，如果同一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同。这样就保证当不允许多次加锁时不会出现最简单情况下的死锁。</p></li><li><p>PTHREAD_MUTEX_ADAPTIVE_NP，适应锁，动作最简单的锁类型，仅等待解锁后重新竞争。</p></li></ul></li></ul></li><li><p>线程信号量2 头文件semaphore.h</p><ul><li>int sem_init (sem_t *sem , int pshared, unsigned int value);初始化,pshared固定是0来表示线程间通讯<ul><li>value - 信号量 sem 的初始值。</li></ul></li><li>int sem_post(sem_t *sem); 加1</li><li>int sem_wait(sem_t *sem); 减1</li><li>int sem_destroy(sem_t *sem); 销毁</li></ul></li><li><p>屏障： 屏障是当不满足条件时阻塞线程，满足条件之后再一起释放</p><ul><li>pthread_cond_t   cond; 创建</li><li><code>int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr)</code>： 初始化，但是Linux中cond_attr并没有实现，所以直接NULL</li><li><code>int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)</code>  : 等待,注意 还必须要有一个互斥量，只有拿到了互斥量才可以执行等待，并且与此同时会释放mutex。</li><li>pthread_cond_signal(): 激活一个等待线程</li><li>pthread_cond_broadcast()：激活所有等待线程，要注意激活后是从等待位置开始而不是从broadcast位置开始。</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> t = bstate.round;</span><br><span class="line">    <span class="keyword">assert</span> (i<span class="operator"> == </span>t);</span><br><span class="line">    </span><br><span class="line">    pthread<span class="constructor">_mutex_lock(&amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    bstate.nthread++;</span><br><span class="line">    <span class="keyword">if</span>(bstate.nthread &lt; nthread)<span class="comment">//没都到就待着</span></span><br><span class="line">    &#123;</span><br><span class="line">    pthread<span class="constructor">_cond_wait(&amp;<span class="params">bstate</span>.<span class="params">barrier_cond</span>, &amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//到了就全部激活</span></span><br><span class="line">    &#123;</span><br><span class="line">    bstate.nthread = <span class="number">0</span>;</span><br><span class="line">    bstate.round++;</span><br><span class="line">    pthread<span class="constructor">_cond_broadcast(&amp;<span class="params">bstate</span>.<span class="params">barrier_cond</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread<span class="constructor">_mutex_unlock(&amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    usleep(random<span class="literal">()</span> % <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="死锁问题"><a class="markdownIt-Anchor" href="#死锁问题"></a> 死锁问题</h1><p>死锁条件：</p><ul><li>互斥条件： 一个资源只可以被一个进程占有</li><li>保持和等待条件： 一个进程因请求而进入阻塞时，对自身已获得的资源不放。</li><li>无抢占条件（抢占就是在一定条件下可以抢夺这个资源，如CPU就是抢占条件）</li><li>循环等待条件： 形成首尾相接的环。如下</li></ul><p><img src="/images/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B12.PNG" alt="" /></p><p>如图，圆代表进程，方形代表资源，由方形指向圆代表这个进程有这个资源，由圆指向方形代表这个进程需要这个资源。如果形成环路就代表出现了死锁。</p><p>资源按需分配可以破坏循环等待条件。</p><p>死锁解决方法：</p><ul><li>忽略问题</li><li>检测复原，例如隔多少分钟产生一个备份，一旦死锁就让某个进程回到这个备份，相应资源也会被释放</li><li>杀死某个进程释放资源。例如Spooling 技术。假脱机技术。为临界资源增加一个等待队列，使其好像可以被共享使用，如打印机。 当死锁发生时，杀死运行时间较短的进程，损失较小，因为容易恢复。</li><li>动态避免通过小心的资源分配</li></ul><h2 id="银行家算法"><a class="markdownIt-Anchor" href="#银行家算法"></a> 银行家算法</h2><p>银行家算法是通过资源分配来避免（不是预防）死锁的。并且没有破坏死锁的任何一个条件</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B13.PNG" alt="" /></p><p>首先要知道总共有多少资源，已经分配了多少资源，总共还剩多少资源，还需要多少资源。</p><p>![](/images/进程与线程 14.PNG)</p><p><strong>现在还有(3, 2, 2)资源可以使用</strong></p><p>之后一旦有进程请求就先把资源给他。如果资源不够就不给，如果资源够就用剩下的资源进行安全状态检查。</p><p>安全状态检查就是看看现有资源可以分配给哪个进程，有就把资源给他然后回收这个进程资源（不用考虑其他进程还会申请资源）。然后用这些资源再进行分配，如果最后由进程分配不了则说明这个状态不安全。</p><ul><li>例如p4申请了(2, 1, 0)资源，先把资源给他，那么现在还有(1, 1, 2)资源可以使用，p4变成(2, 2, 1)先把资源给p3然后回收，那么p3完成，剩余资源变成（3, 2, 3)</li><li>把资源给p1, 剩余资源变成(5, 3, 3)</li><li>资源给p4，剩余资源变成（7， 4， 5）</li><li>之后就一步一步分配</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>分治法</title>
    <link href="http://xinhecuican.github.io/post/7f3bcd7f.html"/>
    <id>http://xinhecuican.github.io/post/7f3bcd7f.html</id>
    <published>2020-10-17T13:29:00.000Z</published>
    <updated>2020-12-17T02:16:06.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h1><p>分治法是将大问题分解成若干个小问题，通过解决小问题解决大问题的方法。它和递归关系密切。</p><p>大致流程</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if(<span class="name">|P|</span> &lt;= n0) adhoc(<span class="name">p</span>)<span class="comment">;</span></span><br><span class="line">divide p into small k part<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">for(<span class="name">int</span> i=0<span class="comment">; i&lt;k; i++)</span></span><br><span class="line">&#123;</span><br><span class="line">yi = divide-and-conquer(<span class="name">pi</span>)<span class="comment">;</span></span><br><span class="line">    //递归解决各个子问题</span><br><span class="line">&#125;</span><br><span class="line">return merge(<span class="name">y1</span>,y2,...yk)<span class="comment">; 合并子问题的解</span></span><br></pre></td></tr></table></figure><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h1><h2 id="找伪币"><a class="markdownIt-Anchor" href="#找伪币"></a> 找伪币</h2><p>假如有十六个硬币，有一个是伪币，伪币比较轻，试用一个天平找出伪币</p><p>假如两两比较，最坏情况需要8次</p><p>如果使用分治法，需要四次。首先8个8个比较，然后在轻的一堆中比较。</p><h2 id="计算an"><a class="markdownIt-Anchor" href="#计算an"></a> 计算a^n</h2><p>如果使用 a * a * a…。那么复杂度是O(n).使用分治法，</p><p>a^n = a^(n/2) * a^(n/2) n%2 == 0</p><p>a^n = a^(n/2) * a^(n/2) * a n%2 == 1</p><blockquote><p>所以 T(n) = T(n/2) + 0(1)</p></blockquote><p>其中T(n/2)是计算a^(n/2)所需要的时间， O(1)是两个数相乘需要的时间。由<a href="https://xinhecuican.github.io/post/71038564.html#more">主定理</a>可得，复杂度是 O(logn)。</p><p>可以看到，通过分治法，有时我们可以减少一些重复运算。</p><h2 id="大整数乘法"><a class="markdownIt-Anchor" href="#大整数乘法"></a> 大整数乘法</h2><p>两个大整数乘法直接相乘复杂度是O(n^2)（注意这里指的是每个bit相乘）<img src="/images/%E5%88%86%E6%B2%BB%E6%B3%951.PNG" alt="" /></p><p>如果把它分成两个部分,如图所示，那么乘法就可以变成</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">(a* <span class="number">2</span>^(<span class="built_in">n</span>/<span class="number">2</span>) + b)(c * <span class="number">2</span>^(<span class="built_in">n</span>/<span class="number">2</span>) + d)</span><br><span class="line">= ac * <span class="number">2</span>^<span class="built_in">n</span> + (ad+bc) *<span class="number">2</span>^(<span class="built_in">n</span>/<span class="number">2</span>) + bd</span><br></pre></td></tr></table></figure><p>递推公式为 <code>T(n) = 4*T(n/2) + 0(n)</code>其中O(n)是ad和bc等两个分式相加的复杂度而不是计算2<sup>n的复杂度。得到的复杂度为O(n</sup>2)，没有改进。</p><p>但是如果写成 <code>ac * 2^n +((a+b)(c+d)-ac-bd) * 2^(n/2) + bd</code>则复杂度就变成了O(n^1.59)。</p><h2 id="中间的中间问题"><a class="markdownIt-Anchor" href="#中间的中间问题"></a> 中间的中间问题</h2><p><img src="/images/%E5%88%86%E6%B2%BB%E6%B3%952.PNG" alt="" /><br />如图，对这些数进行排序。我们可以把这些数分成5组，然后每组找中位数。然后在所有的中位数中寻找中位数（中位数的中位数）。再用找到的中位数的中位数进行排序。</p><p>提出这个方法是因为快速排序在最坏情况下复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，之所以可能是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是因为可能我们每次选的支点都可能是最小值。而这个算法就是为了避免这种情况。</p><p>我们已经找到中位数的中位数了（图中是10，多余的两个数可以不管）。也就是说在10这组前面有两组。因为前面每组都有三个数一定比10小。那么一定有3n/10个数比10小。</p><p>假设有n个数，找到n/5个中位数，又找中位数的中位数，那么一定有n/10个数比中位数小（n/5个中位数中有一半比他小）。因为中位数前面两个数字也一定比他小，所以总共是3n/10。</p><p>可以证明找中位数的中位数时间复杂度是O(n)</p><h2 id="最接近点对问题"><a class="markdownIt-Anchor" href="#最接近点对问题"></a> 最接近点对问题</h2><p>问题： 在二维平面上的n个点中，找出最接近的一对点</p><p>我们可以利用分治法进行求解。先用一个一条垂线将左右两边分隔开（一般选取中点），然后分别求左边最短距离和右边最短距离，然后比较这两个最短距离和中线两侧最短距离，找到最小值就是最接近的一组点。</p><p><img src="/images/%E5%88%86%E6%B2%BB%E6%B3%951.webp" alt="" /></p><p>问题的关键在于怎么找中线两侧的最短距离。</p><p>\delta = min{\deltaL, \deltaR},\deltaL是左边最短距离，\deltaR是右边最短距离。两侧最短距离一定要比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span>小的范围内考虑。</p><ul><li>选取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>−</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">L-\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">L+delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span>范围内的点， 并且按照y值大小进行排序</li><li>选取左边的一个点(x, y), 对右边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>−</mo><mi>δ</mi><mo>∼</mo><mi>y</mi><mo>+</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">y-\delta \sim y+\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span>矩形范围内的点考虑。因为右边任意两个点的范围都大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span>,因此可以推断这个矩形中最多不超过六个点。也就是说只需要检查<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>∗</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">6*\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个候选者。</li></ul><p>它的复杂度是 T(n) = 2T(n/2) + O(n).用<a href="https://xinhecuican.github.io/post/71038564.html">主定理</a>解得复杂度为O(nlogn)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>复杂度及主方法</title>
    <link href="http://xinhecuican.github.io/post/71038564.html"/>
    <id>http://xinhecuican.github.io/post/71038564.html</id>
    <published>2020-10-02T05:52:00.000Z</published>
    <updated>2020-12-24T02:31:26.678Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="下界math-xmlnshttpwwww3org1998mathmathmlmiωmimath-上界o-紧界math-xmlnshttpwwww3org1998mathmathmlmiθmimath"><a class="markdownIt-Anchor" href="#下界math-xmlnshttpwwww3org1998mathmathmlmiωmimath-上界o-紧界math-xmlnshttpwwww3org1998mathmathmlmiθmimath"></a> 下界<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Ω</mi></math> 上界O 紧界<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math></h1><p>这几个界都是由极限得来的。</p><p>上界： 对于 任意正常量c&gt;0,都存在No&gt;=n,使得 0&lt;=f(n)&lt;= cg(n).则可用 f(n) = O(g(n))表示。</p><p>g(n)一般使用简单的式子如 n nlogn, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>,…</p><p>这个式子其实就是极限的表达形式，所以我们也可以用极限的形式表达：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim_{n \to \infty}\frac{f(n)}{g(n)} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>下界： f(n)&gt;=cg(n)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\lim_{n \to \infty}\frac{f(n)}{g(n)} = +\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span></span></p><p>紧界： f(n)= cg(n)</p><h1 id="分析递归式的复杂度"><a class="markdownIt-Anchor" href="#分析递归式的复杂度"></a> 分析递归式的复杂度</h1><p>之所以递归式要单独拿出来分析是因为递归式很难从直观上去判断。例如 f(n) = f(n-1)+f(n-2).这个递归式如果要分析的话可以写成 f(n) = f(n-1) + f(n-2) + 1，最后一个1表示每一层需要进行的运算，因为这里只有一个加法运算，所以是加1.</p><h2 id="代入法求递归式"><a class="markdownIt-Anchor" href="#代入法求递归式"></a> 代入法求递归式</h2><p>代入法就是首先猜测复杂度，然后用归纳法证明。</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">例如： <span class="built_in">T</span>(<span class="built_in">n</span>) = <span class="number">4</span><span class="built_in">T</span>(<span class="built_in">n</span>/<span class="number">2</span>) + <span class="built_in">n</span></span><br><span class="line"></span><br><span class="line">假设 <span class="built_in">T</span>(<span class="built_in">n</span>) &lt;= cn^<span class="number">3</span></span><br><span class="line"></span><br><span class="line">当<span class="built_in">n</span> = <span class="number">1</span>时，可以找出一个足够大的c使，<span class="built_in">T</span>(<span class="number">1</span>) &lt;= c， 成立</span><br><span class="line">当<span class="built_in">n</span>= k 时， <span class="built_in">T</span>(k) &lt;= ck^<span class="number">3</span></span><br><span class="line">当<span class="built_in">n</span> = <span class="built_in">n</span>时， <span class="built_in">T</span>(<span class="built_in">n</span>) = <span class="number">4</span><span class="built_in">T</span>(<span class="built_in">n</span>/<span class="number">2</span>) + <span class="built_in">n</span> &lt;= <span class="number">1</span>/<span class="number">2</span> * c * <span class="built_in">n</span>^<span class="number">3</span> + <span class="built_in">n</span> &gt;= cn^<span class="number">3</span>，所以成立。</span><br><span class="line"></span><br><span class="line">如果 <span class="built_in">T</span>(<span class="built_in">n</span>) &lt;= cn^<span class="number">2</span></span><br><span class="line"></span><br><span class="line">当<span class="built_in">n</span>=<span class="built_in">n</span>时， <span class="built_in">T</span>(<span class="built_in">n</span>) &lt;= c * <span class="built_in">n</span>^<span class="number">2</span> +<span class="built_in">n</span> &gt;= cn^<span class="number">2</span>。 不成立</span><br><span class="line"></span><br><span class="line">遇到这种与结果十分接近的式子时可以减去一个低阶项。</span><br><span class="line"></span><br><span class="line">假设 <span class="built_in">T</span>(<span class="built_in">n</span>) &lt;= c （<span class="built_in">n</span>^<span class="number">2</span> - <span class="built_in">n</span>)</span><br><span class="line"></span><br><span class="line">当 <span class="built_in">n</span> = <span class="built_in">n</span> 时， <span class="built_in">T</span>(<span class="built_in">n</span>) &lt;= cn^<span class="number">2</span> - c/<span class="number">2</span>*<span class="built_in">n</span> +<span class="built_in">n</span> &lt;= cn^<span class="number">2</span>，成立</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="递归树法"><a class="markdownIt-Anchor" href="#递归树法"></a> 递归树法</h2><p>递归树法是通过作图分析<img src="/images/%E5%A4%8D%E6%9D%82%E5%BA%A61.jpg" alt="" /></p><p>例如 f(n) = 2 * f(n/2) + n. 那么第二层是由两个f(n/2)组合而成 每个f(n/2)都会加上n/2,所以第一层和第二层都加上n。</p><p>总共有多少层呢？ 可以看到最后要减小到f(1)，而每次乘1/2,也就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">n= 2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span></span>,h=logn.所以复杂度是 O(nlogn)（层数乘上每层数目）</p><p>拿一个跟复杂的例子。 f(n) = f(n/3) + f(2n/3) + n.对于这种我们通常使用夹紧准则获得一个近似值。例如一直从左边高度是log3 n ,右边是 log3/2 n.而右边到最后每一层不是n。这些差异我们可以忽略大致得到复杂度是nlogn。然后在用归纳法证明</p><h2 id="主方法"><a class="markdownIt-Anchor" href="#主方法"></a> 主方法</h2><p>对于 T(n) = aT(n/b) + f(n)</p><ol><li><p>如果 f(n) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi><mo>−</mo><mi>ε</mi></mrow></msup><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">也</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">是</mi><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi><mo>−</mo><mi>ε</mi></mrow></msup></mrow><annotation encoding="application/x-tex">O(n^{\log_{b}{a} -\varepsilon}).也就是n^{\log_{b}{a} -\varepsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span></span></span></span> 比 f(n)大，那么T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi><mo>−</mo><mi>ε</mi></mrow></msup></mrow><annotation encoding="application/x-tex">n^{\log_{b}{a} -\varepsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span></span></span></span>)<br />这里e最好写出来</p></li><li><p>如果f(n) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi></mrow></msup></mrow><annotation encoding="application/x-tex">n^{\log_{b}{a}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span></span></span>, 那么 T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi></mrow></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n^{\log_{b}{a}}\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></p></li><li><p>f(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Ω</mi></math>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mrow><mi>a</mi><mo>+</mo><mi>ε</mi></mrow></mrow></msup></mrow><annotation encoding="application/x-tex">n^{\log_{b}{a+\varepsilon}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span></span></span></span></span>),还要满足存在c&lt;1和足够大的n使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mi>a</mi><mi>f</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mi>b</mi></mfrac><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>c</mi><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\quad af(\frac{n}{b}) &lt;= cf(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,则 T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math>(f(n))</p></li></ol><p>要注意，case1 和 case2之间有空隙，case2和case3之间有空隙。一个例子是</p><p><code>T(n) = 2T(n/2) + O(nlogn)</code></p><p>这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi></mrow></msup></mrow><annotation encoding="application/x-tex">n^{\log_{b}{a}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span></span></span>的确比nlogn小，但是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><mi>n</mi></mfrac><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{nlogn}{n} = logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>都渐进小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mi>ε</mi></msup></mrow><annotation encoding="application/x-tex">n^{\varepsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span></span></span></span>（也就是对任意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi><mo>&gt;</mo><mn>0</mn><mspace width="1em"/><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mfrac><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><msup><mi>n</mi><mi>ε</mi></msup></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\varepsilon &gt; 0 \quad \lim_{n \to \infty} \frac{logn}{n^{\varepsilon}}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">ε</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935428571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ε</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ）,所以这是渐进大于而不是多项式大于，不能用case3.</p><p><strong>2情况的拓展形式</strong></p><p>f(n) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi></mrow></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><msup><mi>n</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">n^{\log_{b}{a}} \log_{}{n^x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.093248em;vertical-align:-0.24414em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></p><p>则 T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi></msub><mi>a</mi></mrow></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><msup><mi>n</mi><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n^{\log_{b}{a}}\log_{}{n^{x+1}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23015999999999992em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;下界math-xmlnshttpwwww3org1998mathm</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 过滤器</title>
    <link href="http://xinhecuican.github.io/post/97246020.html"/>
    <id>http://xinhecuican.github.io/post/97246020.html</id>
    <published>2020-10-01T01:40:00.000Z</published>
    <updated>2020-11-26T09:07:15.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>管道线中一个个的命令就是过滤器（从标准输入中接受数据，然后再传到标准输出中），但是在最前面的和在最后面的不一定是过滤器。</p><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><h4 id="cat-复制"><a class="markdownIt-Anchor" href="#cat-复制"></a> cat 复制</h4><p>cat的用途就是把标准输入中的数据复制到标准输出中</p><p>应用：可以与重定向结合。cat &gt; data，这样从键盘中输入的数据将直接传到data文件中</p><p>此外还可以让文件内容显示在控制台上，有 cat &lt; data，标准输入变成了data文件，标准输出是屏幕。为了方便，直接cat 文件名也是可以的</p><p>此外，tail也有类似的功能，但是它只能显示最后的十行</p><p>另外一个应用就是把一个文件复制到另一个文件。例如，cat &lt; data &gt; newdata</p><h5 id="增强cat功能"><a class="markdownIt-Anchor" href="#增强cat功能"></a> 增强cat功能</h5><p>cat &lt; file…= cat file …</p><p>有三个点说明了可以同时输入多个文件，这样就为组合多个文件提供了途径</p><p>cat data1 data2 data3 &gt;file</p><p>后缀：</p><pre><code> -n 在每行后面加一个行号 -b 与-n一起使用，不要对空白行加行号 -s 将多个连续的空白行变成一个空白行</code></pre><h4 id="split-分为不同文件"><a class="markdownIt-Anchor" href="#split-分为不同文件"></a> split 分为不同文件</h4><p>语法 split [-d] [-a num] [-l lines] [file [prefix]]</p><p>作用： 将一个大文件分解成几个小文件。默认情况下，split将创建1000行长的空间</p><p>参数：</p><pre><code>-l 创建一个5000行的空间-d 将文件名改为从00开始编号-a 后面加数字，例如3表示从000开始，总共1000个文件名</code></pre><p>默认情况下，split创建的文件将以x开头，后面加aa，ab等</p><h4 id="tac-反转复制"><a class="markdownIt-Anchor" href="#tac-反转复制"></a> tac 反转复制</h4><p>相关过滤器： cat，rev</p><p>作用：和cat类似，但是在写入文件时把文件内容反转（tac是将cat反过来）。注意，这里的反过来并不是指从后往前倒着写，而是把行与行将顺序反过来。</p><h4 id="rev-反转字符顺序"><a class="markdownIt-Anchor" href="#rev-反转字符顺序"></a> rev 反转字符顺序</h4><p>相关过滤器： cat tac</p><p>作用： 将各行字符顺序反转</p><p>语法： rev [file…]</p><p>例如： 有一个文件data，里面有</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345</span><br><span class="line">abcde</span><br><span class="line">AxAxA</span><br></pre></td></tr></table></figure><p>之后用rev后会变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">54321</span><br><span class="line">edcba</span><br><span class="line">AxAxA</span><br></pre></td></tr></table></figure><p>rev也是直接输出到标准输出上的，也就是说并不会对源文件造成改变，如果想输出到文件中，还要重定向一下</p><h4 id="headtail-从数据开头或者结尾读取"><a class="markdownIt-Anchor" href="#headtail-从数据开头或者结尾读取"></a> head，tail 从数据开头或者结尾读取</h4><p>语法： head/tail [-n lines]，lines是希望选择的数据行</p><p>默认情况下，head和tail都只会选择十行数据，用-n可以选择任意行数</p><p>例： calculate | tail -n 15</p><h4 id="colrm-删除数据列"><a class="markdownIt-Anchor" href="#colrm-删除数据列"></a> colrm 删除数据列</h4><p>相关过滤器： cut paste</p><p>colrm（“column remove&quot;)程序从标准输入中读取数据，删除指定数据列（也就是竖的删除），将剩余数据写入标准输出</p><p>语法： colrm [startcol [endcol]]，编号从1开始</p><p>例： colrm 14 30 &lt;students | less</p><h3 id="比较文件"><a class="markdownIt-Anchor" href="#比较文件"></a> 比较文件</h3><h4 id="cmp-比较两个任意文件"><a class="markdownIt-Anchor" href="#cmp-比较两个任意文件"></a> cmp 比较两个任意文件</h4><p>相关过滤器：comm diff sdiff</p><p>语法: cmp file1 file2</p><p>cmp程序逐字节的比较文件，查看两个文件是否相同。如果两个文件相同，那么不做任何处理，如果不同，将会返回第一个不同的行和列</p><h4 id="comm-比较有序文件"><a class="markdownIt-Anchor" href="#comm-比较有序文件"></a> comm 比较有序文件</h4><p>语法：comm [-123] file1 file2</p><p>comm程序一行一行的比较两个有序的文本间，程序输出三列，第一列输出只包含在第一个文件中的行，第二列输出只包含在第二个文件中的行，第三列输出两个文件中都有的行。</p><p>因为comm是逐行比较，所以在比较之前最好使用sort进行排序</p><p>参数： -1 -2 -3 取消第一二三列的输出</p><h4 id="diff-比较无序文件"><a class="markdownIt-Anchor" href="#diff-比较无序文件"></a> diff 比较无序文件</h4><p>语法： diff [-bBiqswy] [-c| -Clines | -u | -Ulines] file1 file2</p><p>lines是说明上下文关系的行号</p><p>输出： diff的输出有三个不同的单字符指示： c（change） d（delete） a（append）。这三个字符说明了要想让两个文件相同需要做哪些改变。</p><p>这三个字符左右两边都会有数字，代表着需要修改的行号。例如，3c3代表把左边文件中的第三行变成右边文件中的第三行。</p><p>diff要求改变时，就会给出每一个文件的实际行，第一个文件中的行用小于号标记，第二个文件中的行用大于号标记。两组行之间还会有横线分隔开</p><p>例如，第一个文件为</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">abcd</span><br><span class="line">asdf</span><br><span class="line"><span class="keyword">as</span> df</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>第二个文件为</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>     </span><br><span class="line"><span class="attribute">abcd</span></span><br><span class="line"><span class="attribute">asdf</span></span><br><span class="line"><span class="attribute">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">0a1</span><br><span class="line">&gt; a     </span><br><span class="line">3,4c4</span><br><span class="line">&lt; as df</span><br><span class="line">&lt; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">---</span><br><span class="line">&gt; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>a左边的数代表在左边数后面追加一行，例如0a1代表在第0行后面加上右边的第一行</p><p>d一般只需要管左边的数字，它的意思是删去左边的那一行</p><p>c表示3,4行和第三行有不同，分隔符上面是第一个文件，下面是第二个文件</p><p>参数：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-i 忽略大小写区别</span></span><br><span class="line"><span class="deletion">-w（whitespace) 忽略所有空白符</span></span><br><span class="line"><span class="deletion">-b 忽略空白符数量上的区别，就是把多个空白符看成一个</span></span><br><span class="line"><span class="deletion">-B 忽略所有空白行，</span></span><br><span class="line"><span class="deletion">-q 当两个文本不同时，忽略所有细节，只说两文本不同</span></span><br><span class="line"><span class="deletion">-s 会明确告诉两个文本相同</span></span><br><span class="line"><span class="deletion">-c 全文比较，+代表要增加，-代表要减少，！代表要替换</span></span><br><span class="line"><span class="deletion">-u 与-c类似，但是把两个文件混合在一起显示，两个重复行只输出一个</span></span><br><span class="line"><span class="deletion">-y 把两个文件并排输出</span></span><br></pre></td></tr></table></figure><h4 id="sdiff"><a class="markdownIt-Anchor" href="#sdiff"></a> sdiff</h4><p>语法： sdiff [-bBilsW] [-w columns] file1 file2</p><p>作用：与 diff -y 类似，并排比较<br />参数：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-l 当两个文件有共同行时，只显示左边的列</span></span><br><span class="line"><span class="deletion">-s 不显示两个文件中任何相同的行</span></span><br><span class="line"><span class="deletion">-w+数字 改变列的宽度</span></span><br><span class="line"><span class="deletion">-i 忽略大写和小写的区别</span></span><br><span class="line"><span class="deletion">-W 忽略所有的空白符</span></span><br><span class="line"><span class="deletion">-b 忽略空白符数量上的区别</span></span><br><span class="line"><span class="deletion">-B 忽略所有空白行</span></span><br></pre></td></tr></table></figure><h4 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h4><p>例如： diff game1_ver1.0.c game2_ver2.0.c &gt; game2_ver2.1</p><p>这个命令会把第一个文件和第二个文佳之间的差保存下来，这样可以节省空间，此外在日后不慎丢失文件时也有办法快速找回</p><h4 id="cut-抽取数据列"><a class="markdownIt-Anchor" href="#cut-抽取数据列"></a> cut 抽取数据列</h4><p>相关过滤器： colrm join paste</p><p>语法： cut -c list [file…]</p><p>list就是要抽取的数据列，各个列之间用逗号隔开，不能有空格，或者14-19表示从14列到19列</p><p>作用：抽取指定的列</p><p>这种按列切分遇到长度不同的数据时就显得无能为力，因此还有另一种抽取方式，抽取字段，即按照一定的定界符进行分割（如逗号，空格等）</p><p>参数：</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">-c  list [file...] list表明抽取第几个字段</span><br><span class="line">-f  list [-d delimiter] [-s] [file...]  -d后面是定界符种类 -s（suppress 抑制）抛弃没有定界符的行。例如 cut -f <span class="number">1</span> -d <span class="string">&#x27;:&#x27;</span> ./temp</span><br></pre></td></tr></table></figure><h4 id="paste"><a class="markdownIt-Anchor" href="#paste"></a> paste</h4><p>语法： paste [-d char…] [file…]</p><p>其中char是用来做分隔符的字符，默认情况为一个制表符或者是空格</p><p>作用： 把几个文件组合成一个表格（组合数据列）</p><p>如果指定了不止一个定界符，那么将会轮流使用定界符</p><p>例如： paste -d ‘|%’ name phone ，这个指令中就有两个定界符</p><h3 id="统计和格式化"><a class="markdownIt-Anchor" href="#统计和格式化"></a> 统计和格式化</h3><h4 id="nl-创建行号"><a class="markdownIt-Anchor" href="#nl-创建行号"></a> nl 创建行号</h4><p>语法： nl [-v start] [-i increment] [-b a] [-n ln|rn|rz] [file…]</p><p>start是起始行号 ，increment是增量</p><p>作用：希望在一些数据中永久的插入行号，在输出中临时插入行号。一般状况下，插入的行号都是临时的，原始数据并不会发生改变，除非重定向输出到文件中。</p><p>默认情况下，不会对空行编号</p><p>参数：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-v 改变起始编号，默认起始编号是1</span></span><br><span class="line"><span class="deletion">-i 改变增量，默认增量为1</span></span><br><span class="line"><span class="deletion">-b a 对所有行编号，包括空行</span></span><br><span class="line"><span class="deletion">-n ln 左对齐 rn 右对齐 rz 右对齐，有前导0</span></span><br></pre></td></tr></table></figure><h4 id="wcword-count统计行单词和字符的数量"><a class="markdownIt-Anchor" href="#wcword-count统计行单词和字符的数量"></a> wc（word count）统计行单词和字符的数量</h4><p>语法： wc [-clLw] [file…]</p><p>作用：统计行，单词，字符的数量。所统计的数据可以来自另一个程序或者是一个或多个文件</p><p>输出依次输出行，单词数，字符数 和文件名。如果不止一个文件，那么会为每一个文件显示一个输出，然后最后一行是一个总输出。</p><p>参数</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-l 统计行</span></span><br><span class="line"><span class="deletion">-w 统计单词</span></span><br><span class="line"><span class="deletion">-c 统计字符</span></span><br><span class="line"><span class="deletion">-L 该选项显示输入中最长行的长度</span></span><br></pre></td></tr></table></figure><p>此外，还可以用wc来统计某一目录中文件的数量，假设一个文件一行，用ls file | wc -l.</p><h4 id="制表符和空格"><a class="markdownIt-Anchor" href="#制表符和空格"></a> 制表符和空格</h4><p>在老式机器中，会在某些特定的为做一些机器标记，这些标记叫做制表位，如果按了制表位，那么机器会直接跳转到下一个制表位上，tab键与这个作用类似。一旦按了tab键，那么他将会自动跳转到下一个制表位。例如输入<code>A&lt;Tab&gt;BBBB&lt;Tab&gt;CCC</code>，实际上看起来中间有空格，实际上只有一个Tab</p><p>可视化制表符</p><p>第一种办法是在vi中，set list 那么制表符会转化成^I符号</p><h4 id="expand-将制表符转化成空格"><a class="markdownIt-Anchor" href="#expand-将制表符转化成空格"></a> expand 将制表符转化成空格</h4><p>语法： expand [-i] [-t size] [-t list] [file…]</p><p>其中size是固定宽度制表符的大小（默认为8)，list是制表位列表</p><p>作用：expand将输入文件中所有的制表符转化成空格，别切维持与原文本相同的对齐方式</p><p>-i 只转换开头的制表符，其他的制表符保持不变</p><h4 id="unexpand-将空格转化成制表符"><a class="markdownIt-Anchor" href="#unexpand-将空格转化成制表符"></a> unexpand 将空格转化成制表符</h4><p>语法： unexpand [-a] [-t size] [-t list] [file…]</p><p>其中size是制表符的大小（希望设置的），list是制表位列表</p><p>一般情况下，unexpand只转化第一行的空格，如果想要转换所有行的空格，那么需要-a选项</p><h4 id="fold-格式化行"><a class="markdownIt-Anchor" href="#fold-格式化行"></a> fold 格式化行</h4><p>相关过滤器： fmt ,pr</p><p>语法： fold [-s] [w witch] [file…]</p><p>其中witch是新行的宽度。</p><p>作用： 将长的行分割成短行。也就是把一行分成多行。其实就是在适当位置插入一个回车符</p><p>默认状态下，80个字符为一行。</p><p>-s选项是告诉程序不要分割单词，也就是说如果那个单词正好在要分割的位置，那么现在会先显示这个单词在转到下一行。</p><h4 id="fmt-格式化段落"><a class="markdownIt-Anchor" href="#fmt-格式化段落"></a> fmt 格式化段落</h4><p>语法： fmt [-su] [-w width] [file…]</p><p>作用：让各行连接在一起，并且不改变空白符。</p><p>当它读取文本时，假定段落由空行分隔。一个“段落”就是一个或多个连续的文本行，不包括空行。fmt根据下列规则读取一个段落</p><ul><li>行宽： 让每行尽可能的长，并且不超过指定的长度。默认情况下，每行最多75个字符</li><li>句子： 无论何时，尽可能在句子末尾分隔行。避免在句子的第一个单词之后或最后一个单词之前分隔行。</li><li>空白符： 保持单词及空行之间的所有缩进，空格。</li><li>制表符： 所有制表符转化成空格。并在最后输出时合适的位置插入制表符</li></ul><p>说起来复杂，其实就是让那些长短不一的段落尽量变得长。</p><p>例如</p><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">As we all know,</span><br><span class="line"><span class="keyword">success </span>cones slowly and</span><br><span class="line">is due to a number of different factors all coming</span><br><span class="line">together</span><br><span class="line">over a period of years</span><br></pre></td></tr></table></figure><p>使用命令后</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">As</span> we <span class="keyword">all</span> know, <span class="type">real</span> success comes slowly <span class="keyword">and</span> <span class="keyword">is</span></span><br><span class="line">due <span class="keyword">to</span> a number <span class="keyword">of</span> different factors <span class="keyword">all</span> coming</span><br><span class="line">together <span class="keyword">over</span> a period <span class="keyword">of</span> years.</span><br></pre></td></tr></table></figure><p>此外，它是一段的作用，如果两行之间有个空行就把他们当成两段单独处理，互不影响</p><p>参数</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-u(uniform spacing 统一间距) 减少空格，每个单词之间最多只有一个空格，句子末尾最多只有两个空格。</span></span><br><span class="line"><span class="deletion">-w 设定宽度</span></span><br></pre></td></tr></table></figure><h4 id="pr-按页格式化文本"><a class="markdownIt-Anchor" href="#pr-按页格式化文本"></a> pr 按页格式化文本</h4><p>语法： pr [-dt] [+beg[:end]] [-h text] [-l n] [-o margin] [-W width] [file…]</p><p>作用： 按页格式化文件，以便于打印。</p><p>其中 beg是需要格式化的第一页，end是最后一页，text是标题，n是每页的行数，margin是左边缘的大小，width是输出的宽度。</p><p>默认情况下，pr是通过顶端插入一个标题，左边插入一个边缘，底部插入一个页尾来格式化文件。标题包括修改时间，文件名称和页号。</p><p>如果想查看效果，最好在less程序中</p><p>参数：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-d 双倍行距文本（word中的）</span></span><br><span class="line"><span class="addition">+begin;end 从那页到哪页格式化</span></span><br><span class="line"><span class="deletion">-l 改变每页总行数</span></span><br><span class="line"><span class="deletion">-o 设置左边缘</span></span><br><span class="line"><span class="deletion">-W 改变每一行的字符数（默认是72）</span></span><br></pre></td></tr></table></figure><p>还可以按列格式化文本</p><p>语法： pr [-mt] [-columns] [-l lines] [-W width] [file…]</p><p>column是输出列的数量，lines是每页的行数，width是每行的字符数。这个选项不建议用，会截断字符。</p><h3 id="选取排序组合变换"><a class="markdownIt-Anchor" href="#选取排序组合变换"></a> 选取，排序，组合，变换</h3><h4 id="grep-选取特定模式的行"><a class="markdownIt-Anchor" href="#grep-选取特定模式的行"></a> grep 选取特定模式的行</h4><p>相关过滤器： look strings</p><p>语法： grep [-cilLnrsvwx] pattern [file…]</p><p>pattern是要搜索的格式</p><p>作用： 从标准输入或文件中读取数据，抽取所有包含特定模式的行，并写入标准输出。</p><p>这个模式可以是字符串标点符号等，但是如果是标号或者特殊字符时，最好用’'强引用，以防止歧义。</p><p>选项：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-c(count) 统计所抽取行的数量，但不显示行本身</span></span><br><span class="line"><span class="deletion">-i（ignore) 忽略大小写的区别</span></span><br><span class="line"><span class="deletion">-n 所选行在原文件中的位置</span></span><br><span class="line"><span class="deletion">-l（list），如果在不只一个文件中搜索，使用这个选项可以只把匹配的文件名列举出来，此时文件名也要输出多个</span></span><br><span class="line"><span class="deletion">-L 显示不包含该模式的文件名</span></span><br><span class="line"><span class="deletion">-v（reverse） 选取不包含模式的行</span></span><br><span class="line"><span class="deletion">-x 选取完全匹配的行</span></span><br><span class="line"><span class="deletion">-r（recursive递归） 搜索整个目录树</span></span><br></pre></td></tr></table></figure><h5 id="fgrepegrep-grep变体"><a class="markdownIt-Anchor" href="#fgrepegrep-grep变体"></a> fgrep，egrep grep变体</h5><p>fgrep，历史上使用，现在基本不用</p><p>egrep grep扩展版本，功能比grep强大，可以通过 grep -E的方式<br />-w 只匹配完整的单词，并且最好配合-l使用。</p><h4 id="look-选取以特定模式开头的行"><a class="markdownIt-Anchor" href="#look-选取以特定模式开头的行"></a> look 选取以特定模式开头的行</h4><p>格式： look [-df] pattern file…</p><p>作用： 搜索以字母顺序排列的数据，并查找所有以特定模式开头的行。然后输出这些行</p><p>look其实并不是一个过滤器，它只能从文件中读入，因此只能写于管道线的开头</p><p>-d 忽略标点和其他字符，本来是指搜索第一个单词</p><p>-f（fold同等） 忽略大写和小写的区别</p><h4 id="sort-排序"><a class="markdownIt-Anchor" href="#sort-排序"></a> sort 排序</h4><p>格式 sort [-dfnru] [-o outfile] [infile…]</p><p>作用： 排序数据和查看数据是否已经有序。他可以比较整行，也可以从每行中选取一部分进行比较。</p><p>sort可以重定向输出到另一个文件，但是不能输出到输入文件</p><p>例如： sort temp &gt; temp 是不可以的</p><p>但是可以使用-o选项，此时该文件中原有数据将会被保存，排序后的数据也会被追加到这个文件中</p><h5 id="-dfnr-控制数据排序的顺序"><a class="markdownIt-Anchor" href="#-dfnr-控制数据排序的顺序"></a> -dfnr 控制数据排序的顺序</h5><p>-d(dictionary) 只查看字母，数字和空白符，当确定有阻碍排序的因素（如标点符号等），可以使用这个选项。</p><p>-f（fold 等同）不区分大小写</p><p>-n（numeric 数字） 识别开头或者字段开头的数字，并按照数字进行排序</p><p>-r 反向排序</p><p>-u（unique 唯一） 对于相同行，只保留一行</p><h5 id="检测数据是否有序-c"><a class="markdownIt-Anchor" href="#检测数据是否有序-c"></a> 检测数据是否有序 -c</h5><p>-c（check） 不会排列数据，只会告诉数据是否有序，如果有序，将不会显示任何内容</p><h4 id="uniq-查找重复的行"><a class="markdownIt-Anchor" href="#uniq-查找重复的行"></a> uniq 查找重复的行</h4><p>语法： uniq [-cdu] [infile [outfile]</p><p>作用： 消除重复行，选取重复行，选取唯一行，统计重复行的数量。不加选项输出非重复行和只输出一次重复行</p><p>注意uniq的输入必须是有序的</p><p>-d 只查看重复行</p><p>-u 只查看非重复行</p><p>-c 统计重复行出现的次数</p><h4 id="join-合并两个文件的有序数据"><a class="markdownIt-Anchor" href="#join-合并两个文件的有序数据"></a> join 合并两个文件的有序数据</h4><p>相关过滤器： colrm cut paste</p><p>语法： join [-i] [-al|-vl] [-a2|-v2] [-l field1] [-2 field2] file1 file2</p><p>其中field是引用特定数段的数字</p><p>作用： 把两个文件中对应行合并到一起。但是这又和sort不同，sort是直接把两个文件拼接在一起，而join则是重复数据合并为一个输出。不重复数据直接输出。读取输入时，会忽略前导空白符。</p><p>不使用其他标号情况下，只会显示有匹配的连接字段（也就是两个文件对应行有相同字段），如果使用-a(all)选项，将会显示整个文件，后面要加a1或a2。a1代表把第一个文件中不匹配的内容也加上去。如果是v1，显示V1中不匹配的行</p><p>-1+sum 将第一个文件中的第sum个字段和第二个文件中的第一个字段进行匹配</p><h4 id="tsort-由偏序创建全序"><a class="markdownIt-Anchor" href="#tsort-由偏序创建全序"></a> tsort 由偏序创建全序</h4><p>语法： tsort file</p><p>作用：将一系列的事一件一件从头到尾输出</p><p>例如：两个单词第二个单词代表在第一个单词后要做的事</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">eat clean-<span class="keyword">dishes</span></span><br><span class="line"><span class="keyword">clean-dishes </span>watch-TV</span><br><span class="line"><span class="keyword">shop </span>cook</span><br><span class="line">cook eat</span><br></pre></td></tr></table></figure><p>在使用了tsort后，输出为</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shop</span></span><br><span class="line"><span class="keyword">cook</span></span><br><span class="line"><span class="keyword">eat</span></span><br><span class="line"><span class="keyword">clean-dishes</span></span><br><span class="line"><span class="keyword">watch-TV</span></span><br></pre></td></tr></table></figure><h4 id="strings-在二进制文件中搜索字符串"><a class="markdownIt-Anchor" href="#strings-在二进制文件中搜索字符串"></a> strings 在二进制文件中搜索字符串</h4><p>语法： strings [-length] file…</p><p>在现代软件中基本都有这种功能，不再展开</p><h4 id="转换字符-tr"><a class="markdownIt-Anchor" href="#转换字符-tr"></a> 转换字符 tr</h4><p>语法： tr [-cds] [set1 [set2]]</p><p>set1是字符组</p><p>作用：可以将一个字符转化成另一个字符，例如将小写转化成大写，将制表符转化成空格，或者将0转化成x等。此外，还可以将多个字符变成一个字符，例如将多个空格转化成一个空格。最后，还可以删除指定字符，例如删除制表符。</p><p>例如： tr a A &lt; old tr a-z A-Z &lt; old</p><p>当需要替换的字符中出现由特殊意义的字符时，需要引用他们</p><p>还有几种特殊的缩写 [:lower:] 代表小写字母，[:upper:]代表大写字母，[:digit:]代表数字</p><p>tr还可以转换不可见字符</p><p>例如： tr ‘\n’ ‘\t’ &lt; old</p><p>参数：</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">s 多个字符变成一个字符 例如 tr -s <span class="string">&#x27; &#x27;</span> <span class="string">&#x27; &#x27;</span> &lt; old</span></span><br><span class="line"><span class="ruby">-d 删除指定字符</span></span><br><span class="line"><span class="ruby">-c 把没选上的字符变成另一个字符，例如 tr -c <span class="string">&#x27; \n&#x27;</span> x &lt; old，这个的意思就是除了空格和换行之外其他所有字符都变成x</span></span><br></pre></td></tr></table></figure><h4 id="sed-非交互式文本编辑"><a class="markdownIt-Anchor" href="#sed-非交互式文本编辑"></a> sed 非交互式文本编辑</h4><p>交互式文本编辑就是有一个窗口，例如gedit vi等。而非交互式则需要提前设计命令，然后将命令发给程序。</p><p>语法： sed [-i] command | -e command… [file…]</p><p>command是sed命令</p><p>作用： sed是一个标准的过滤器，可以对标准输入或者标准输出进行修改</p><p>sed从输入流中每次读取一行。然后执行下面三个步骤</p><ol><li>从输入流中读取一行</li><li>执行指定的命令，对该行进行必要的修改</li><li>将该行写入输出流中</li></ol><p>因为是修改标准输入或者标准输出，所以源文件不会被修改，如果要修改原文件，可以加上-i(in-place)选项，这个选项会将输出保存到一个临时文件，一但所有数据处理完，sed就会把临时文件复制到原文件中</p><h5 id="使用sed进行替换"><a class="markdownIt-Anchor" href="#使用sed进行替换"></a> 使用sed进行替换</h5><p>想要用sed对标准输入或输出的内容进行修改，可以采用 s命令</p><p>形式： /address|pattern/ s /search/replacement/[g]</p><p>address 是输入流中一个行或者多个行的地址，pattern是一个字符串，search是正则表达式，replacement是一个替换文本</p><p>例如 sed s/harley/Harley,这个例子意思就是把每一行的第一个harley改成Harley，如果想把所有都改了，那么在后面要加上一个g</p><p>如果只对一些行进行操作，可以用下列语法：</p><p>number[,number] /regex/</p><p>number是行号</p><p>例如： sed ‘5s/harley/Harley/g’ names</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;管道线中一个个的命令就是过滤器（从标准输入中接受数据，然后再传到标准输出中）</summary>
      
    
    
    
    <category term="Linux" scheme="http://xinhecuican.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>RNN及其拓展</title>
    <link href="http://xinhecuican.github.io/post/aa1eade8.html"/>
    <id>http://xinhecuican.github.io/post/aa1eade8.html</id>
    <published>2020-08-21T03:26:00.000Z</published>
    <updated>2020-10-19T13:59:13.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="rnn"><a class="markdownIt-Anchor" href="#rnn"></a> RNN</h1><p>RNN的特点是上一次输入会对下一次产生影响，相当于有了记忆功能，常用于自然语言处理。</p><p><img src="/images/RNN1.jpg" alt="" /></p><p>这是RNN的结构图，它与传统神经网络的区别是在隐藏层有了一个循环。</p><p><img src="/images/RNN2.jpg" alt="" /></p><p>这张图的含义是每一个时间点都可以有输出o，也可以没有。每一个时间点隐藏层输出作为下一个隐藏层的输入，也就是说该次训练对下一次训练会产生影响。</p><p>网上演示的时候隐藏层只有一层，这里就以一层为例。</p><p>隐藏层计算：</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">z<span class="comment">(h)</span><span class="comment">(t)</span>=U⋅x<span class="comment">(t)</span>+W⋅s<span class="comment">(t−1)</span> <span class="attr">#s(t-1</span>)是前一刻隐藏层输出</span><br><span class="line">s<span class="comment">(t)</span>=fh<span class="comment">(z(h)</span><span class="comment">(t)</span>)</span><br></pre></td></tr></table></figure><p>s(t)是隐藏层输出， fh是激活函数，一般使用tanh或LeRu。</p><p>输出层使用softmax函数进行转换，然后损失函数使用交叉熵</p><p>Lt=−∑（N， i=0）yi(t)log(oi(t))</p><p>其中yi是真实值，oi是预测值</p><h2 id="bptt"><a class="markdownIt-Anchor" href="#bptt"></a> BPTT</h2><p>BPTT是RNN所使用的反向传播算法。它和传统反向传播算法的区别是它还要照顾到W（前一层到这一层的权重）</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C15.PNG" alt="" /></p><p>大体上还是使用这四个式子</p><p>δk(t) 表示t时刻损失函数对output layer 节点的输入zk(t)的导数（也就是求上面方程中第一个式子）。</p><p>δk(t) = o(t) - 1</p><p>所以∂Lt \ ∂V = (o(t) - 1) * s(t)</p><p>δk(h)(t) = [δ(o)(t) ⋅ Vk] ∙ [1 − sk(t)^2]</p><p>所以 ∂Lt \ ∂U = δ(h)(t) * x(t)</p><p>向w传播的 δ(h)(t−1)=[δ(h)(t)⋅W] ∙ <a href="%E8%BF%99%E9%87%8C%E5%8C%BA%E5%88%AB%E5%B0%B1%E6%98%AFs(t-1)%E5%92%8CW">1−s(t−1)^2</a></p><p>∂Lt \ ∂W = δ(h)(t) *  s(t-1)</p><h1 id="lstm"><a class="markdownIt-Anchor" href="#lstm"></a> LSTM</h1><p>RNN的缺陷是会出现梯度消失现象，因此无法保存长时间记忆。LSTM通过两条记忆途径使得可以保存长时间记忆。</p><p><img src="/images/RNN2.webp" alt="" /><br />这是LSTM的结构图，其中上面那一条线代表长时间记忆，下面那一条代表短时记忆。而保存在尝试记忆中的信息由几个门控制。</p><p><img src="/images/RNN3.webp" alt="" /></p><p>这是第一个门控忘记门，用来剔除不重要的信息。至于为什么能忘掉不重要信息，只能说这是神经网络自己决定的（没找到解释）。如果某一项为0代表舍弃，为1代表全部保留。</p><p>公式中<code>Wf⋅[ht−1,xt] = Wfh * h(t−1) + Wfx * xt</code>。wf可以看成是两个矩阵拼接而成，然后对应和输入相乘。</p><p><img src="/images/DNN4.webp" alt="" /></p><p>记忆门，这个门决定我们要记忆什么，迁前一部分是删去要舍弃的记忆，后面一部分是加上要记住的东西。注意Ct是tanh</p><p><img src="/images/DNN5.webp" alt="" />更新长期记忆。</p><p><img src="/images/DNN6.webp" alt="" /> 输出门。更新ht并输出</p><h2 id="反向更新"><a class="markdownIt-Anchor" href="#反向更新"></a> 反向更新</h2><p>首先确定更新内容。我们要更新四个b，四个w。其中w又要拆分成两部分，所以总共更新12个量。</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">δTo,<span class="built_in">t</span>=δTt⨀<span class="built_in">tanh</span>(ct)⨀ot⨀(<span class="number">1</span>−ot)</span><br><span class="line">δTf,<span class="built_in">t</span>=δTt⨀ot⨀(<span class="number">1</span>−<span class="built_in">tanh</span>(ct)<span class="number">2</span>)⨀ct−<span class="number">1</span>⨀ft⨀(<span class="number">1</span>−ft)</span><br><span class="line">δTi,<span class="built_in">t</span>=δTt⨀ot⨀(<span class="number">1</span>−<span class="built_in">tanh</span>(ct)<span class="number">2</span>)⨀ct^⨀it⨀(<span class="number">1</span>−it)</span><br><span class="line">δTc^,<span class="built_in">t</span>=δTt⨀ot⨀(<span class="number">1</span>−<span class="built_in">tanh</span>(ct)<span class="number">2</span>)⨀it⨀(<span class="number">1</span>−c^<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">yt=σ(Vht+by) // 当前状态输出</span><br><span class="line">δ<span class="built_in">t</span>=∂E \ ∂ht = Vσ`</span><br><span class="line"></span><br><span class="line">∂E \ ∂Woh,<span class="built_in">t</span> = δo,<span class="built_in">t</span> * h(<span class="built_in">t</span>−<span class="number">1</span>)</span><br><span class="line">其他三个 同理</span><br><span class="line"></span><br><span class="line">∂E \ ∂bo,<span class="built_in">t</span> = δo,<span class="built_in">t</span></span><br><span class="line">其他三个同理</span><br><span class="line"></span><br><span class="line">∂E \ ∂Wox = δo,<span class="built_in">t</span> * xt</span><br></pre></td></tr></table></figure><p><a href="https://ilewseu.github.io/2018/01/06/LSTM%E5%8F%82%E6%95%B0%E6%9B%B4%E6%96%B0%E6%8E%A8%E5%AF%BC/">反向更新具体过程可看</a></p><h1 id="gru"><a class="markdownIt-Anchor" href="#gru"></a> GRU</h1><p>GRU相比于LSTM所花的时间更短，但是达成的效果差不多。</p><p><img src="/images/RNN7.svg" alt="" />可以看到GRU只有一个参量要传递给下一个单元，并且需要更新的量也减少。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">Rt</span>=σ(Xt * Wxr+H(t−<span class="number">1</span>) * Whr+br)</span><br><span class="line"><span class="attr">Zt</span>=σ(Xt * Wxz+H(t−<span class="number">1</span>) * Whz+bz)</span><br></pre></td></tr></table></figure><p>这是重置门和更新门的计算公式，和LSTM计算方法相同，实际上GRU借鉴了LSTM的思想。</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">H~<span class="built_in">t</span>=<span class="built_in">tanh</span>(Xt * Wxh + (Rt ⊙ H(<span class="built_in">t</span>−<span class="number">1</span>)) * Whh + bh) #重置门指的是重置H(<span class="built_in">t</span>-<span class="number">1</span>)</span><br><span class="line">Ht=Zt ⊙ H(<span class="built_in">t</span>−<span class="number">1</span>) + (<span class="number">1</span>−Zt) ⊙ H~<span class="built_in">t</span></span><br><span class="line">最后的zt和<span class="number">1</span>-zt决定要记住新内容多还是老内容多，例如 zt=<span class="number">1</span>/<span class="number">3</span>, 那么老内容一次运行就只剩下<span class="number">1</span>/<span class="number">3</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;rnn&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://xinhecuican.github.io/post/fa288682.html"/>
    <id>http://xinhecuican.github.io/post/fa288682.html</id>
    <published>2020-08-03T01:30:00.000Z</published>
    <updated>2020-08-04T03:28:22.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>numpy用于矩阵计算，内置了大量矩阵计算的函数，并且速度也比列表快</p><p><strong>创建</strong></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"><span class="string">    [2, 3]</span>,</span><br><span class="line"><span class="string">    [5, 8]</span>]</span><br><span class="line">c = np.<span class="built_in">array</span>(a)</span><br><span class="line">d = np.<span class="built_in">array</span>(b, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><p>通过array就把列表转化成了numpy的矩阵</p><ul><li>ones(shape, dtype): 这个是创建值全为1的矩阵，shape是矩阵的行和列数，dtype是矩阵数据类型。</li><li>zeros(shape, dtype): 创建全是零的矩阵</li><li>full(shape, constant_value, dtype): 创建指定数值的矩阵。其中constant_value是用来填充矩阵的值</li><li>eye(N): 创建单位矩阵，N是矩阵的维度</li><li>diag(v, k): 创建对角矩阵。v如果是一维则是创建对角矩阵，如果是二维是获取对角线上的元素。k=0表示获取主对角线上元素，k&gt;0则获取主对角线上方第k条对角线元素</li></ul><p><strong>创建随机数组</strong></p><ul><li>np.random.rand(shape): 创建一个值在0到1的随机数组。例如np.random.rand(10, 10, 3)是创建一个三维数组</li><li>uniform(low, high, shape): 创建一个值在low到high的随机数组</li><li>randint(low, high, shape): 创建一个值在low到high并且值是整数的随机数组</li><li>normal(loc, scale, shape): 给定均值，方差，维度的正态分布。</li></ul><p><strong>查看矩阵属性</strong></p><ul><li>size(): 获得矩阵元素个数</li><li>shape(): 获得矩阵的行和列，shape[0]是行，shape[1]是列.但是如果是一维数组那么shape[0]表示列数，没有shape[1]</li><li>ndim:  维数</li><li>dtype： 元素类型</li><li>T: 返回这个矩阵的转置</li></ul><p><strong>操作</strong></p><ul><li>np.copy(array): 复制矩阵</li><li>sort(a, axis): axis = 0是每行进行排序，1是每列进行排序，默认是对整个数组进行排序。a是用来排序的矩阵。如果是np.sort()那么原矩阵不改变。如果是array.sort()，原矩阵改变。</li><li>unique(a, return_index, retrun_inverse, return_counts, axis): 查找array中唯一元素。return_index是返回新列表中元素在旧列表出现第一个位置。return_counts是每个元素在原来矩阵中数量。return_inverse是返回一个索引数组，索引的是新列表元素位置。</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="selector-tag">b</span> = np.diag(a)</span><br><span class="line">alpha, beta = np.unique(<span class="selector-tag">b</span>, return_counts=True)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alpha)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(beta)</span></span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">20</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">a = [1, 2, 3, 4, 5]</span><br><span class="line">b = np.diag(a)</span><br><span class="line">alpha, beta = np.unique(b, return_inverse=True)</span><br><span class="line">print(alpha)</span><br><span class="line">print(beta)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[0<span class="number"> 1 </span>2<span class="number"> 3 </span>4 5]</span><br><span class="line">[1<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>2<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>3<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>4<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>5]</span><br></pre></td></tr></table></figure><ul><li>array.reshape(shape): 改变形状，但是元素个数不变，如果改变形状后元素数目和原来不同会报错。原数组改变</li><li>array.resize(shape): 改变形状,元素个数可变，不足补零。如果小于原来数目会输出None，采取逐个填充的方法。</li></ul><p><strong>计算</strong></p><ul><li><code>+</code>： 矩阵加法，让矩阵中每个元素都相加。例如a+5是矩阵中每个元素都加五。a+b是矩阵中对应元素相加</li><li><code>*</code>： 注意矩阵乘法是dot函数，这个是对应元素相乘</li><li>==: 矩阵中逐个元素进行比对，然后返回一个bool型矩阵，如果两个矩阵对应位置相同那么bool型矩阵对应位置就是True。</li><li>dot(): 矩阵相乘</li><li>delete(a, elements, axis): 矩阵删除行或列。elements是删除的行或列的序号</li><li>append()</li><li>insert()</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;numpy用于矩阵计算，内置了大量矩阵计算的函数，并且速度也比列表快&lt;/p&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>层次聚类</title>
    <link href="http://xinhecuican.github.io/post/2ba82a45.html"/>
    <id>http://xinhecuican.github.io/post/2ba82a45.html</id>
    <published>2020-07-30T02:34:00.000Z</published>
    <updated>2020-08-05T00:59:43.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>层次聚类（hierarchical clustering)就是不断把最近的类合并知道达到要求为止。这是一种树形结构</p><p>大致过程：</p><ol><li>初始化，每个实例看做一类</li><li>合并， 算出每两个类之间的距离，然后把距离最近的两个类合并成一个类</li><li>终止条件可以是最近两个类之间的距离</li></ol><p>计算两个类之间距离的方法</p><ol><li>SingleLinkage: 这种方法是以两个类中最短距离代表两个类之间的距离。但是这种方法可能出现链式反应，即抓到了一个离其他点十分近的点就抓到了一群点，但实际上分属两团</li><li>CompleteLinkage： 这种方法是找两个类中最长点距离</li><li>AverageLinkage： 这种方法是把两个类中所有点的距离求出来再求平均值，或者也可以取中值</li></ol><h1 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Code for hierarchical clustering, modified from </span></span><br><span class="line"><span class="string">Programming Collective Intelligence by Toby Segaran </span></span><br><span class="line"><span class="string">(O&#x27;Reilly Media 2007, page 33). </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cluster_node</span>:</span> <span class="comment"># 树节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,vec,left=<span class="literal">None</span>,right=<span class="literal">None</span>,distance=<span class="number">0.0</span>,<span class="built_in">id</span>=<span class="literal">None</span>,count=<span class="number">1</span></span>):</span></span><br><span class="line">        self.left=left</span><br><span class="line">        self.right=right</span><br><span class="line">        self.vec=vec</span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.distance=distance</span><br><span class="line">        self.count=count <span class="comment">#only used for weighted average </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L2dist</span>(<span class="params">v1,v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sqrt(<span class="built_in">sum</span>((v1-v2)**<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L1dist</span>(<span class="params">v1,v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">abs</span>(v1-v2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># def Chi2dist(v1,v2):</span></span><br><span class="line"><span class="comment">#     return sqrt(sum((v1-v2)**2))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hcluster</span>(<span class="params">features,distance=L2dist</span>):</span></span><br><span class="line">    <span class="comment">#cluster the rows of the &quot;features&quot; matrix</span></span><br><span class="line">    distances=&#123;&#125;</span><br><span class="line">    currentclustid=-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># clusters are initially just the individual rows</span></span><br><span class="line">    clust=[cluster_node(array(features[i]),<span class="built_in">id</span>=i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(clust)&gt;<span class="number">1</span>:</span><br><span class="line">        lowestpair=(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        closest=distance(clust[<span class="number">0</span>].vec,clust[<span class="number">1</span>].vec)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># loop through every pair looking for the smallest distance</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(clust)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(clust)):</span><br><span class="line">                <span class="comment"># distances is the cache of distance calculations</span></span><br><span class="line">                <span class="keyword">if</span> (clust[i].<span class="built_in">id</span>,clust[j].<span class="built_in">id</span>) <span class="keyword">not</span> <span class="keyword">in</span> distances: </span><br><span class="line">                    distances[(clust[i].<span class="built_in">id</span>,clust[j].<span class="built_in">id</span>)]=distance(clust[i].vec,clust[j].vec)</span><br><span class="line">        </span><br><span class="line">                d=distances[(clust[i].<span class="built_in">id</span>,clust[j].<span class="built_in">id</span>)]</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> d&lt;closest:</span><br><span class="line">                    closest=d</span><br><span class="line">                    lowestpair=(i,j) <span class="comment"># 这里是使用第一种方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># calculate the average of the two clusters</span></span><br><span class="line">        mergevec=[(clust[lowestpair[<span class="number">0</span>]].vec[i]+clust[lowestpair[<span class="number">1</span>]].vec[i])/<span class="number">2.0</span> \</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(clust[<span class="number">0</span>].vec))]</span><br><span class="line">        <span class="comment"># 平均距离</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># create the new cluster</span></span><br><span class="line">        newcluster=cluster_node(array(mergevec),left=clust[lowestpair[<span class="number">0</span>]],</span><br><span class="line">                             right=clust[lowestpair[<span class="number">1</span>]],</span><br><span class="line">                             distance=closest,<span class="built_in">id</span>=currentclustid)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># cluster ids that weren&#x27;t in the original set are negative</span></span><br><span class="line">        currentclustid-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">del</span> clust[lowestpair[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">del</span> clust[lowestpair[<span class="number">0</span>]]</span><br><span class="line">        clust.append(newcluster)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clust[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_clusters</span>(<span class="params">clust,dist</span>):</span></span><br><span class="line">    <span class="comment"># extract list of sub-tree clusters from hcluster tree with distance&lt;dist</span></span><br><span class="line">    clusters = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> clust.distance&lt;dist:</span><br><span class="line">        <span class="comment"># we have found a cluster subtree</span></span><br><span class="line">        <span class="keyword">return</span> [clust] </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># check the right and left branches</span></span><br><span class="line">        cl = []</span><br><span class="line">        cr = []</span><br><span class="line">        <span class="keyword">if</span> clust.left!=<span class="literal">None</span>: </span><br><span class="line">            cl = extract_clusters(clust.left,dist=dist)</span><br><span class="line">        <span class="keyword">if</span> clust.right!=<span class="literal">None</span>: </span><br><span class="line">            cr = extract_clusters(clust.right,dist=dist)</span><br><span class="line">        <span class="keyword">return</span> cl+cr </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster_elements</span>(<span class="params">clust</span>):</span></span><br><span class="line">    <span class="comment"># return ids for elements in a cluster sub-tree</span></span><br><span class="line">    <span class="keyword">if</span> clust.<span class="built_in">id</span>&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="comment"># positive id means that this is a leaf</span></span><br><span class="line">        <span class="keyword">return</span> [clust.<span class="built_in">id</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># check the right and left branches</span></span><br><span class="line">        cl = []</span><br><span class="line">        cr = []</span><br><span class="line">        <span class="keyword">if</span> clust.left!=<span class="literal">None</span>: </span><br><span class="line">            cl = get_cluster_elements(clust.left)</span><br><span class="line">        <span class="keyword">if</span> clust.right!=<span class="literal">None</span>: </span><br><span class="line">            cr = get_cluster_elements(clust.right)</span><br><span class="line">        <span class="keyword">return</span> cl+cr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printclust</span>(<span class="params">clust,labels=<span class="literal">None</span>,n=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="comment"># indent to make a hierarchy layout</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="built_in">print</span> <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    <span class="keyword">if</span> clust.<span class="built_in">id</span>&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="comment"># negative id means that this is branch</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># positive id means that this is an endpoint</span></span><br><span class="line">        <span class="keyword">if</span> labels==<span class="literal">None</span>: <span class="built_in">print</span> clust.<span class="built_in">id</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="built_in">print</span> labels[clust.<span class="built_in">id</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># now print the right and left branches</span></span><br><span class="line">    <span class="keyword">if</span> clust.left!=<span class="literal">None</span>: printclust(clust.left,labels=labels,n=n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> clust.right!=<span class="literal">None</span>: printclust(clust.right,labels=labels,n=n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getheight</span>(<span class="params">clust</span>):</span></span><br><span class="line">    <span class="comment"># Is this an endpoint? Then the height is just 1</span></span><br><span class="line">    <span class="keyword">if</span> clust.left==<span class="literal">None</span> <span class="keyword">and</span> clust.right==<span class="literal">None</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Otherwise the height is the same of the heights of</span></span><br><span class="line">    <span class="comment"># each branch</span></span><br><span class="line">    <span class="keyword">return</span> getheight(clust.left)+getheight(clust.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdepth</span>(<span class="params">clust</span>):</span></span><br><span class="line">    <span class="comment"># The distance of an endpoint is 0.0</span></span><br><span class="line">    <span class="keyword">if</span> clust.left==<span class="literal">None</span> <span class="keyword">and</span> clust.right==<span class="literal">None</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># The distance of a branch is the greater of its two sides</span></span><br><span class="line">    <span class="comment"># plus its own distance</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(getdepth(clust.left),getdepth(clust.right))+clust.distance</span><br><span class="line">      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>K-means</title>
    <link href="http://xinhecuican.github.io/post/766f9b60.html"/>
    <id>http://xinhecuican.github.io/post/766f9b60.html</id>
    <published>2020-07-30T00:18:00.000Z</published>
    <updated>2020-07-30T02:34:24.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>k-means算法属于非监督学习，也就是事先不知道给的数据属于那一类，需要自己去分类。它的基本思想是把数据点密集的一群分成一类。</p><p>具体过程：</p><ol><li>随机选择k个类的初始中心</li><li>在c次迭代中，对任意一个样本，求到各中心点之间的距离，将该样本归类到最近中心的那个类</li><li>使用均值等方法更新中心点。</li><li>如果两次更新匪类相同也结束</li></ol><p>例如划分三个点(1, 1) (2, 3) (4, 6)是一类，那么新的中心点是((1+2+4)/3, (1+3+6)/3),不一定要在原有点上</p><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function: K Means</span></span><br><span class="line"><span class="comment"># -------------</span></span><br><span class="line"><span class="comment"># K-Means is an algorithm that takes in a dataset and a constant</span></span><br><span class="line"><span class="comment"># k and returns k centroids (which define clusters of data in the</span></span><br><span class="line"><span class="comment"># dataset which are similar to one another).</span></span><br><span class="line"><span class="attribute">def</span> kmeans(X, k, maxIt): # maxIt是初始化次数</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">numPoints</span>, numDim = X.shape</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">dataSet</span> = np.zeros((numPoints, numDim + <span class="number">1</span>))</span><br><span class="line">    <span class="attribute">dataSet</span>[:, :-<span class="number">1</span>] = X # 初始化赋值</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize centroids randomly</span></span><br><span class="line">    <span class="attribute">centroids</span> = dataSet[np.random.randint(numPoints, size = k), :] # 随机选取中心点</span><br><span class="line">    <span class="comment">#centroids = dataSet[0:2, :]</span></span><br><span class="line">    <span class="comment">#Randomly assign labels to initial centorid</span></span><br><span class="line">    <span class="attribute">centroids</span>[:, -<span class="number">1</span>] = range(<span class="number">1</span>, k +<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize book keeping vars.</span></span><br><span class="line">    <span class="attribute">iterations</span> = <span class="number">0</span></span><br><span class="line">    <span class="attribute">oldCentroids</span> = None</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Run the main k-means algorithm</span></span><br><span class="line">    <span class="attribute">while</span> not shouldStop(oldCentroids, centroids, iterations, maxIt):</span><br><span class="line">        <span class="attribute">print</span> <span class="string">&quot;iteration: \n&quot;</span>, iterations</span><br><span class="line">        <span class="attribute">print</span> <span class="string">&quot;dataSet: \n&quot;</span>, dataSet</span><br><span class="line">        <span class="attribute">print</span> <span class="string">&quot;centroids: \n&quot;</span>, centroids</span><br><span class="line">        <span class="comment"># Save old centroids for convergence test. Book keeping.</span></span><br><span class="line">        <span class="attribute">oldCentroids</span> = np.copy(centroids)</span><br><span class="line">        <span class="attribute">iterations</span> += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Assign labels to each datapoint based on centroids</span></span><br><span class="line">        <span class="attribute">updateLabels</span>(dataSet, centroids)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Assign centroids based on datapoint labels</span></span><br><span class="line">        <span class="attribute">centroids</span> = getCentroids(dataSet, k)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># We can get the labels too by calling getLabels(dataSet, centroids)</span></span><br><span class="line">    <span class="attribute">return</span> dataSet</span><br><span class="line"><span class="comment"># Function: Should Stop</span></span><br><span class="line"><span class="comment"># -------------</span></span><br><span class="line"><span class="comment"># Returns True or False if k-means is done. K-means terminates either</span></span><br><span class="line"><span class="comment"># because it has run a maximum number of iterations OR the centroids</span></span><br><span class="line"><span class="comment"># stop changing.</span></span><br><span class="line"><span class="attribute">def</span> shouldStop(oldCentroids, centroids, iterations, maxIt):</span><br><span class="line">    <span class="attribute">if</span> iterations &gt; maxIt:</span><br><span class="line">        <span class="attribute">return</span> True</span><br><span class="line">    <span class="attribute">return</span> np.array_equal(oldCentroids, centroids)  </span><br><span class="line"><span class="comment"># Function: Get Labels</span></span><br><span class="line"><span class="comment"># -------------</span></span><br><span class="line"><span class="comment"># Update a label for each piece of data in the dataset. </span></span><br><span class="line"><span class="attribute">def</span> updateLabels(dataSet, centroids):</span><br><span class="line">    <span class="comment"># For each element in the dataset, chose the closest centroid. </span></span><br><span class="line">    <span class="comment"># Make that centroid the element&#x27;s label.</span></span><br><span class="line">    <span class="attribute">numPoints</span>, numDim = dataSet.shape</span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">0</span>, numPoints):</span><br><span class="line">        <span class="attribute">dataSet</span>[i, -<span class="number">1</span>] = getLabelFromClosestCentroid(dataSet[i, :-<span class="number">1</span>], centroids)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attribute">def</span> getLabelFromClosestCentroid(dataSetRow, centroids):</span><br><span class="line">    <span class="attribute">label</span> = centroids[<span class="number">0</span>, -<span class="number">1</span>];</span><br><span class="line">    <span class="attribute">minDist</span> = np.linalg.norm(dataSetRow - centroids[<span class="number">0</span>, :-<span class="number">1</span>])</span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">1</span> , centroids.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="attribute">dist</span> = np.linalg.norm(dataSetRow - centroids[i, :-<span class="number">1</span>])</span><br><span class="line">        <span class="attribute">if</span> dist &lt; minDist:</span><br><span class="line">            <span class="attribute">minDist</span> = dist</span><br><span class="line">            <span class="attribute">label</span> = centroids[i, -<span class="number">1</span>]</span><br><span class="line">    <span class="attribute">print</span> <span class="string">&quot;minDist:&quot;</span>, minDist</span><br><span class="line">    <span class="attribute">return</span> label</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Function: Get Centroids</span></span><br><span class="line"><span class="comment"># -------------</span></span><br><span class="line"><span class="comment"># Returns k random centroids, each of dimension n.</span></span><br><span class="line"><span class="attribute">def</span> getCentroids(dataSet, k): # 算出新的中心点</span><br><span class="line">    <span class="comment"># Each centroid is the geometric mean of the points that</span></span><br><span class="line">    <span class="comment"># have that centroid&#x27;s label. Important: If a centroid is empty (no points have</span></span><br><span class="line">    <span class="comment"># that centroid&#x27;s label) you should randomly re-initialize it.</span></span><br><span class="line">    <span class="attribute">result</span> = np.zeros((k, dataSet.shape[<span class="number">1</span>]))</span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        <span class="attribute">oneCluster</span> = dataSet[dataSet[:, -<span class="number">1</span>] == i, :-<span class="number">1</span>]</span><br><span class="line">        <span class="attribute">result</span>[i - <span class="number">1</span>, :-<span class="number">1</span>] = np.mean(oneCluster, axis = <span class="number">0</span>)</span><br><span class="line">        <span class="attribute">result</span>[i - <span class="number">1</span>, -<span class="number">1</span>] = i</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">return</span> result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attribute">x1</span> = np.array([<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"><span class="attribute">x2</span> = np.array([<span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="attribute">x3</span> = np.array([<span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"><span class="attribute">x4</span> = np.array([<span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"><span class="attribute">testX</span> = np.vstack((x<span class="number">1</span>, x<span class="number">2</span>, x<span class="number">3</span>, x<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="attribute">result</span> = kmeans(testX, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line"><span class="attribute">print</span> <span class="string">&quot;final result:&quot;</span></span><br><span class="line"><span class="attribute">print</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xinhecuican.github.io/post/2ae43b86.html"/>
    <id>http://xinhecuican.github.io/post/2ae43b86.html</id>
    <published>2020-07-29T02:11:49.000Z</published>
    <updated>2020-07-29T02:14:41.418Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="逻辑回归logistic-regression"><a class="markdownIt-Anchor" href="#逻辑回归logistic-regression"></a> 逻辑回归（logistic regression)</h1><p>非线性回归例子：<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921.PNG" alt="" />.这个例子中的关系不能很好的用线性关系进行模拟，所以我们要另外做曲线模拟它。</p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E6%8B%9F2.PNG" alt="" />为了更好的处理，还需要用sigmoid函数平滑化。</p><p>sigmoid函数图像为 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C7.PNG" alt="" /></p><p>所以预测函数为： <img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%85%B3%E7%B3%BB3.PNG" alt="" /></p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%924.jpg" alt="" /></p><p>我们要求解的问题可以转化成，求解一组参数使得J()最小化。求解方法时求偏导让导数为零。</p><p>当然上面这个方法求解过于复杂，我们也可以使用梯度下降的方法。非线性方程其实就是一个超平面，我们可以求偏导找出梯度，沿着梯度下降的方向不断走就可以找到最低点。</p><p>求解函数为  <img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%925.PNG" alt="" /></p><p>其中a是更新率（learning weight）</p><p>所以求完偏导的结果为：<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%926.PNG" alt="" /></p><p>h(x) = theta * x(i)</p><p>这就是更新函数，我们呢需要重复更新直到收敛</p><h1 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genData</span>(<span class="params">numPoints,bias,variance</span>):</span></span><br><span class="line"><span class="comment"># 产生实验数据，其中numpoint是实验个数，bias是偏差，variance是方差</span></span><br><span class="line">    x = np.zeros(shape=(numPoints,<span class="number">2</span>))</span><br><span class="line">    y = np.zeros(shape=(numPoints))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,numPoints):</span><br><span class="line">        x[i][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">        x[i][<span class="number">1</span>]=i</span><br><span class="line">        y[i]=(i+bias)+random.uniform(<span class="number">0</span>,<span class="number">1</span>)+variance</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span>(<span class="params">x,y,theta,alpha,m,numIterations</span>):</span></span><br><span class="line"><span class="comment"># alpha是学习率 \ theta是我们要求的，开始可以随意赋值 \ m是实例个数 \ numIterations是重复次数</span></span><br><span class="line">    xTran = np.transpose(x) <span class="comment"># 转置，为了好算</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numIterations):</span><br><span class="line">        hypothesis = np.dot(x,theta) <span class="comment"># dot是点积，算出h(x)。这个是一次全更新完</span></span><br><span class="line">        loss = hypothesis-y</span><br><span class="line">        cost = np.<span class="built_in">sum</span>(loss**<span class="number">2</span>)/(<span class="number">2</span>*m) <span class="comment"># 这个算法和上面讲的有所不同，相当于(h(x)-y(i)) * x(j)求和</span></span><br><span class="line">        gradient=np.dot(xTran,loss)/m</span><br><span class="line">        theta = theta-alpha*gradient</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Iteration %d | cost :%f&quot;</span> %(i,cost))</span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line">x,y = genData(<span class="number">100</span>, <span class="number">25</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;x:&quot;</span></span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;y:&quot;</span></span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"></span><br><span class="line">m,n = np.shape(x)</span><br><span class="line">n_y = np.shape(y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;m:&quot;</span>+<span class="built_in">str</span>(m)+<span class="string">&quot; n:&quot;</span>+<span class="built_in">str</span>(n)+<span class="string">&quot; n_y:&quot;</span>+<span class="built_in">str</span>(n_y))</span><br><span class="line"></span><br><span class="line">numIterations = <span class="number">100000</span></span><br><span class="line">alpha = <span class="number">0.0005</span></span><br><span class="line">theta = np.ones(n)</span><br><span class="line">theta= gradientDescent(x, y, theta, alpha, m, numIterations)</span><br><span class="line">print(theta)</span><br></pre></td></tr></table></figure><h1 id="使用线性回归还是非线性回归"><a class="markdownIt-Anchor" href="#使用线性回归还是非线性回归"></a> 使用线性回归还是非线性回归</h1><p>在高中已经学过了，如果是一元线性回归的话会使用相关系数r来描述相关性，来决定是否使用线性回归。它的公式是<br /><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%9210.png" alt="" /></p><p>如果是多元线性回归就要用<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%9211.jpg" alt="" /></p><p>这个公式中第一个yi是估计值，也就是说先要把回归方程求出来再估计相关性。</p><p>但是R^2会受样本量影响，随样本量增大而增大，所以要一个小小的改进。</p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%83%A1%E7%88%BD12.png" alt="" /></p><p>这个方程就是改进后的方程，先把开始的R^2算出来，然后带入，其中N是样本个数，P是维数（自变量个数）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;逻辑回归logistic-regression&quot;&gt;&lt;a class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性回归</title>
    <link href="http://xinhecuican.github.io/post/40997091.html"/>
    <id>http://xinhecuican.github.io/post/40997091.html</id>
    <published>2020-07-26T00:39:00.000Z</published>
    <updated>2020-07-27T02:33:18.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><p>简单线性回归指的是只有一个x和一个y</p><p>用来描述自变量和因变量及偏差之间关系的模型叫做回归模型</p><p>简单线性回归的模型是：<img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921.png" alt="" /></p><p>b0是截距，b1是斜率，e是偏差。</p><p><strong>关于偏差</strong></p><ul><li>他是一个随机变量，均值是0</li><li>它的方差对于所有自变量x是相同的</li><li>它的值是独立的</li><li>它满足正太分布</li></ul><p>线性回归方程就是少了偏差，其他和基本模型是相同的。</p><p>我们现在给若干x和y，要解决的问题是找出最好的截距和斜率。</p><h1 id="线性回归的求解"><a class="markdownIt-Anchor" href="#线性回归的求解"></a> 线性回归的求解</h1><p>我们要找最能代表趋势的直线，实际上就是要找距离所有点最近的直线。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.PNG" alt="" />我们就是要找一条直线使得这个值最小，其中y^i是用这条直线求出来的估计值，yi是这个点的值。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%923.PNG" alt="" />求解这个问题的数学公式</p><h1 id="多元线性回归"><a class="markdownIt-Anchor" href="#多元线性回归"></a> 多元线性回归</h1><p>它与一元线性回归的区别就是有多个自变量</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%925.PNG" alt="" /> 具体模型求解过程涉及线代高数等内容，这里不再详解。</p><p>使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> genfromtxt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"></span><br><span class="line">dataPath = <span class="string">r&quot;Delivery.csv&quot;</span></span><br><span class="line">deliveryData = genfromtxt(dataPath,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;data&quot;</span></span><br><span class="line"><span class="built_in">print</span> deliveryData</span><br><span class="line"></span><br><span class="line">x= deliveryData[:,:-<span class="number">1</span>]</span><br><span class="line">y = deliveryData[:,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"></span><br><span class="line">lr = linear_model.LinearRegression() <span class="comment"># 模型</span></span><br><span class="line">lr.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> lr</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;coefficients:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> lr.coef_ <span class="comment"># 估计参数 b1,...</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;intercept:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> lr.intercept_ <span class="comment"># b0</span></span><br><span class="line"></span><br><span class="line">xPredict = [<span class="number">102</span>,<span class="number">6</span>]</span><br><span class="line">yPredict = lr.predict(xPredict)</span><br><span class="line">print(<span class="string">&quot;predict:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> yPredict</span><br></pre></td></tr></table></figure><p>如果是分类型变量，我们需要转化成01再来运算。</p><p>例如男女就是分类型变量。假设一个人是男的，那么可以让它的自变量变成10。如果是女则是01，这样把一个自变量变成多个自变量从而当成数据型变量进行计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络（NN）</title>
    <link href="http://xinhecuican.github.io/post/7ca31f7.html"/>
    <id>http://xinhecuican.github.io/post/7ca31f7.html</id>
    <published>2020-07-24T02:35:00.000Z</published>
    <updated>2020-08-23T03:25:10.604Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="多层向前神经网络"><a class="markdownIt-Anchor" href="#多层向前神经网络"></a> 多层向前神经网络</h1><p>该神经网络的层数大的有三层：输入层， 隐藏层（隐藏层可以有多层）， 输出层。</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C1.png" alt="" />该图是两层神经网络（输入层不算）</p><p>每层由单元组成（例如决策树算法中的一和零）。输入层就是传入一些特征向量。</p><p><strong>理解</strong>：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">下一层的神经元可以看成y，然后每个w可以看成k，那么其实就是一条直线。有些层次用来做 <span class="meta">&amp;&amp; 或 || 的操作，这样就可以用多条直线对区域进行划分.</span></span><br></pre></td></tr></table></figure><p>权重： 每两层有线进行连接，线上的数值就是权重，我们是通过特征向量和权重相乘求和再用非线性方程转化得到下一层的</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>. 设计神经网络结构</span><br><span class="line">     <span class="number">3</span>.<span class="number">1</span> 使用神经网络训练数据之前，必须确定神经网络的层数，以及每层单元的个数</span><br><span class="line">     <span class="number">3</span>.<span class="number">2</span> 特征向量在被传入输入层时通常被先标准化(<span class="keyword">normalize）到0和1之间 </span>（为了加速学习过程）</span><br><span class="line">     <span class="number">3</span>.<span class="number">3</span> 离散型变量可以被编码成每一个输入单元对应一个特征值可能赋的值</span><br><span class="line">          比如：特征值A可能取三个值（<span class="built_in">a0</span>, <span class="built_in">a1</span>, <span class="built_in">a2</span>), 可以使用<span class="number">3</span>个输入单元来代表A。</span><br><span class="line">                    如果A=<span class="built_in">a0</span>, 那么代表<span class="built_in">a0</span>的单元值就取<span class="number">1</span>, 其他取<span class="number">0</span>；</span><br><span class="line">                    如果A=<span class="built_in">a1</span>, 那么代表a1de单元值就取<span class="number">1</span>，其他取<span class="number">0</span>，以此类推</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>.<span class="number">4</span> 神经网络即可以用来做分类(classification）问题，也可以解决回归(regression)问题</span><br><span class="line">          <span class="number">3</span>.<span class="number">4</span>.<span class="number">1</span> 对于分类问题，如果是<span class="number">2</span>类，可以用一个输出单元表示（<span class="number">0</span>和<span class="number">1</span>分别代表<span class="number">2</span>类,例如黑和白，不是黑就是白，所以只需要输出一类）</span><br><span class="line">                   如果多于<span class="number">2</span>类，每一个类别用一个输出单元表示</span><br><span class="line">                   所以输入层的单元数量通常等于类别的数量</span><br><span class="line"></span><br><span class="line">          <span class="number">3</span>.<span class="number">4</span>.<span class="number">2</span> 没有明确的规则来设计最好有多少个隐藏层</span><br><span class="line">                    <span class="number">3</span>.<span class="number">4</span>.<span class="number">2</span>.<span class="number">1</span> 根据实验测试和误差，以及准确度来实验并改进</span><br></pre></td></tr></table></figure><p><strong>交叉验证方法</strong></p><p>这是一种验证正确率的方法。例如我们把样例集分成10份，第一次用第一份做测试集，其他做训练集，第二次用第二个做测试集，其他做训练集。这样做十次得到的正确率再求平均值。当然划分不一定是十份。</p><p><strong>神经网络训练大致过程</strong>： 先根据输入确定结果，通过预测结果和真实结果之间的误差反推更新权重。</p><p>开始的时候可以随机的在1到-1之间给权重</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C2.png" alt="" /></p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C3.png" alt="" /></p><p>下面这个式子就是从下一层的计算公式，单元值乘以权重求和然后再加上偏向(oj)</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C4.png" alt="" /></p><p>前面到Bias的部分已经提到了，就是上面那个方程，最后还需要经过一个非线性函数（激活函数）。</p><p>激活函数：</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C5.png" alt="" /></p><p>其中Ij就是前面提到的函数。</p><p>之后反向更新权重：</p><p>对于输出层：<br /><img src="/images/pasted-10.png" alt="" />Tj是输出层标签真实值</p><p>对于隐藏层：<br /><img src="/images/pasted-11.png" alt="" />其中Errk是前面一层的误差</p><p>权重更新：</p><p><img src="/images/pasted-12.png" alt="" /></p><p>l是学习率（learning weight），这是我们手工设置的值，在零到一之间</p><p>偏向更新：<br /><img src="/images/pasted-13.png" alt="upload successful" /></p><p>终止条件：</p><ul><li>权重的更新低于某个阈值</li><li><pre><code>         预测的错误率低于某个阈值</code></pre></li><li><pre><code>         达到预设一定的循环次数</code></pre></li></ul><h2 id="梯度下降算法"><a class="markdownIt-Anchor" href="#梯度下降算法"></a> 梯度下降算法</h2><p>数学中梯度指的是函数关于各个偏导的一个向量，它的意义是指向上升最快的方向。因此负梯度就是下降最快的方向。</p><p>梯度下降算法的基本思想就是沿着梯度每次走一定距离，然后再次计算梯度，重复步骤直到走到最低点。这里的最低点是极值而不是最值</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C14.jpg" alt="" />以二维为例。如果让x在最低点左边。x-梯度（导数），那么x增大，朝着最低点靠近。如果在右边x-梯度，x减小，同样朝着最低点靠近。</p><p>我们是根据loss function来对神经网络进行调整的。而lossfunction的参数就是w和bias，因此可以对w和bias求偏导然后w- 偏导对w进行修正。</p><p><strong>随机梯度下降算法</strong>： 多次随机选取一些样本（mini-batch)，直到所有样例都被选取。</p><h2 id="反向更新"><a class="markdownIt-Anchor" href="#反向更新"></a> 反向更新</h2><p>反向更新利用了梯度下降算法。也就是使用 w = wi - (delta)w的方式进行更新。</p><p>(delta)w = L * 偏Cost / 偏w ， 所以我们的目标就是要求出偏导。</p><p>反向更新主要用到了四个式子。<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C15.PNG" alt="" /></p><p>这几个式子都有证明，这里不详细描述。</p><ul><li>第三个和第四个式子就是偏导，我们看到其中的量可以通过第一个和第二个方程求出来。</li><li>第一个式子是对于输出层来说的。右边第一项指的是cost关于a（预测值）的偏导。这里cost的计算式为 (预测值-实际值)的平方求和再除以2n。因此偏导就是预测值减去实际值。后面一项是激活函数的导数。</li><li>第二个式子是对于其他层。</li></ul><p>这里还有另一种cost <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C16.PNG" alt="" /></p><p>它的偏导数为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C17.PNG" alt="" /> <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C18.PNG" alt="" />.</p><p>这个偏导数好在偏导的大小由a-y决定。a-y其实就是error。 error大，下降就要快。</p><p><strong>推导过程</strong></p><p>其实反向更新就是求偏导 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C27.png" alt="" /><br />这张图表示的是从输出反向推第一个权重，也就是上面的第一个式子。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">net</span> = w * x + b</span><br><span class="line"><span class="keyword">out</span> = 1 / 1 + <span class="keyword">e</span>^(-<span class="keyword">net</span>)</span><br><span class="line">∂<span class="keyword">E</span> / ∂<span class="keyword">out</span> = target - <span class="keyword">out</span></span><br><span class="line">∂<span class="keyword">out</span> / ∂<span class="keyword">net</span> = <span class="keyword">net</span> * (1 - <span class="keyword">net</span>)</span><br><span class="line">∂<span class="keyword">net</span> / ∂w = x</span><br><span class="line">∂<span class="keyword">E</span> / ∂w = (target - <span class="keyword">out</span>) * <span class="keyword">net</span> * (1 - <span class="keyword">net</span>) * x</span><br></pre></td></tr></table></figure><p>再看另一个例子<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C28.png" alt="" />这里就可以解释为什么有个求和的过程了，到w不只有一条路，而这里多了两个偏导∂outh1 / ∂neth1 和 ∂neth1 / ∂w1.这里的数值和前面是一样的。</p><p>有一点和前面不同，前面是∂E / ∂w，这里是∂E / ∂outh1。所以前面最后乘了一个x而这里乘了一个w。</p><h2 id="非线性转化函数"><a class="markdownIt-Anchor" href="#非线性转化函数"></a> 非线性转化函数</h2><p>激活函数一般使用S型曲线（sigmoid）。一般是双曲函数(tanh)或逻辑函数。</p><p>广义上的sigmoid函数需要在-1到1之间变化并且平滑。</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C7.PNG" alt="" /></p><p><strong>双曲函数</strong>：</p><p>tanhx = sinhx/coshx =</p><p>sinhx = (e^x - e^(-x))/2 、 coshx = (e^x + e^(-x)) / 2</p><p>导数： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C10.PNG" alt="" /></p><p>图像为：<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C8.PNG" alt="" /></p><p><strong>逻辑函数</strong></p><p>p(t) = 1/(1 + e^(-t))</p><p>导数： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C11.PNG" alt="" /></p><p>图像为： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C9.PNG" alt="" /></p><h2 id="减小overfitting"><a class="markdownIt-Anchor" href="#减小overfitting"></a> 减小overfitting</h2><ol><li><p>增加训练数据集</p></li><li><p>减神经网络的规模</p></li><li><p>regularization <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C21.PNG" alt="" />.这是一个例子，后面一项也可以应用于其他cost函数中。加了这一项后神经网络会倾向于学习较小的权重,更少可能受到局部噪音影响<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C22.PNG" alt="" />w的更新也有变化<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C23.PNG" alt="" /> nameda随着n的变化而变化，目的是不让比值太小从而使作用失效</p><p>另一种regularization函数 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C24.PNG" alt="" />它的偏导数为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C25.PNG" alt="" />注意当w=0时，w不可导，所以直接使用没有regularization的。</p></li><li><ol start="3"><li>DropOut： 防止过拟合。具体方法时让需要dropout的层的百分之p的神经元关闭（即让需要关闭的神经元值为0）。然后多次随机剔除，最后再把权重除以p</li></ol></li><li><p><strong>softmax</strong></p></li></ol><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C19.PNG" alt="" /></p><p>这个函数有一些独特的性质。例如zj增大，那么对应输出增大，其他输出减小。并且同一层所有输出值的和一定是1，可以用来模拟概率。所以经常用在输出层当做概率</p><p>对应我们可以定义一个新的cost函数 Cost(p,q)=−∑xp(x)logq(x)， 其中p是真实值，q是估计值. 它的偏导为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C20.PNG" alt="" />这个偏导和上面的cross-entropy类似。</p><h1 id="卷积神经网络"><a class="markdownIt-Anchor" href="#卷积神经网络"></a> 卷积神经网络</h1><p>卷积神经网络对隐藏层进行了细分，常用于对图像处理。</p><ul><li>input layer： 还需要对输入数据进行一些处理，如减去均值（只需要使用训练集上均值，测试集也是使用训练集均值）</li><li>卷积计算层（CONV layer）： 通过一个窗口进行移动然后再和w矩阵进行点乘过滤一些信息。有三个主要参数，深度，步长和填充值。深度指的是下一层神经元数目，步长指的是窗口一次移动的长度，填充值是为了防止移动超出范围在周围补的一圈零。</li></ul><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C6.PNG" alt="" />这里深度是2，步长是2，填充值是1.其中最右边绿色就是输出。它是通过左边蓝色的窗口和红色的w进行点乘然后相加得到的。有三层是因为输入一个32 * 32 * 3（RGB）的矩阵，然后通过运算可以得到输出矩阵。</p><ul><li>激励层： 将卷积层结果进行非线性映射，典型的激励函数是ReLu，sigmoid函数其实很少用了，因为在数据比较大的时候导数趋近于0，难以训练。</li></ul><p>ReLu方程式 y = max(0, x).也就是小于0时y=0，大于0时y=x。但是这个函数问题是小于0时导数=0，也无法训练。因此改进是小于0时y=0.01x</p><ul><li>池化层（pooling layer): 池化层一般夹在连续的卷积层中间，它是用来压缩数据量，减少过拟合。方法是max pooling。也是通过一个窗口，每次去窗口中的最大值形成一个矩阵。</li></ul><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C12.PNG" alt="" />由原来的4 * 4矩阵变成2 * 2矩阵</p><ul><li>全连接层： 该层和前一层之间一般所有神经元都有权重连接，一般是放在神经网络尾部，是用来防止信息丢失太多的。</li></ul><p><strong>注意点</strong></p><ol><li><p>权重初始化： 使用高斯函数（正态分布）去随机初始化可以让权重随机化。也就是numpy.random.randn(in, out) / np.sqrt(in/2). in是输入层个数，out是输出层个数</p></li><li><p>Batch Normalization: 它是用来减少初始值依赖的，通常在全连接层之后。具体算法<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C13.PNG" alt="" />其中y和b是神经网络自己学习的。</p></li></ol><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><p>通过前面逻辑函数的导数可以得知，前面权重更新其实就是运用激活函数的导数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh_deriv</span>(<span class="params">x</span>):</span> <span class="comment"># 导数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> - np.tanh(x)*np.tanh(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_derivative</span>(<span class="params">x</span>):</span> <span class="comment"># 导数</span></span><br><span class="line">    <span class="keyword">return</span> logistic(x)*(<span class="number">1</span>-logistic(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, layers, activation=<span class="string">&#x27;tanh&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param layers: A list containing the number of units in each layer.</span></span><br><span class="line"><span class="string">        Should be at least two values</span></span><br><span class="line"><span class="string">        :param activation: The activation function to be used. Can be</span></span><br><span class="line"><span class="string">        &quot;logistic&quot; or &quot;tanh&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># layers是一个列表，代表输入层，隐藏层和输出层，列表中每个数字代表隐藏层中单元的数目，列表长度代表总共有多少层</span></span><br><span class="line">        <span class="keyword">if</span> activation == <span class="string">&#x27;logistic&#x27;</span>:</span><br><span class="line">            self.activation = logistic</span><br><span class="line">            self.activation_deriv = logistic_derivative</span><br><span class="line">        <span class="keyword">elif</span> activation == <span class="string">&#x27;tanh&#x27;</span>:</span><br><span class="line">            self.activation = tanh</span><br><span class="line">            self.activation_deriv = tanh_deriv</span><br><span class="line"></span><br><span class="line">        self.weights = [] <span class="comment"># 初始化一个列表来装所有的weight，这后来是一个三重矩阵</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(layers) - <span class="number">1</span>): <span class="comment"># 随机初始化weight</span></span><br><span class="line">            self.weights.append((<span class="number">2</span>*np.random.random((layers[i - <span class="number">1</span>] + <span class="number">1</span>, layers[i] + <span class="number">1</span>))-<span class="number">1</span>)*<span class="number">0.25</span>) <span class="comment"># 生成一个layers[i-1]+1行，layer[i]+1列的范围在-0.25到0.25的矩阵</span></span><br><span class="line">            self.weights.append((<span class="number">2</span>*np.random.random((layers[i] + <span class="number">1</span>, layers[i + <span class="number">1</span>]))-<span class="number">1</span>)*<span class="number">0.25</span>) <span class="comment"># 第i层到第i+1层之间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, learning_rate=<span class="number">0.2</span>, epochs=<span class="number">10000</span></span>):</span></span><br><span class="line">    <span class="comment"># epochs是训练次数（循环次数）</span></span><br><span class="line">        X = np.atleast_2d(X)</span><br><span class="line">        temp = np.ones([X.shape[<span class="number">0</span>], X.shape[<span class="number">1</span>]+<span class="number">1</span>])<span class="comment"># 初始化一个矩阵，值全是一，行数和列数由参数提供</span></span><br><span class="line">        temp[:, <span class="number">0</span>:-<span class="number">1</span>] = X  <span class="comment"># adding the bias unit to the input layer</span></span><br><span class="line">        X = temp</span><br><span class="line">        y = np.array(y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">            i = np.random.randint(X.shape[<span class="number">0</span>])</span><br><span class="line">            a = [X[i]]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.weights)):  <span class="comment">#going forward network, for each layer</span></span><br><span class="line">                a.append(self.activation(np.dot(a[l], self.weights[l])))  <span class="comment">#Computer the node value for each layer (O_i) using activation function</span></span><br><span class="line">              <span class="comment">#正向所有更新</span></span><br><span class="line">            error = y[i] - a[-<span class="number">1</span>]  <span class="comment">#Computer the error at the top layer</span></span><br><span class="line">            deltas = [error * self.activation_deriv(a[-<span class="number">1</span>])] <span class="comment">#For output layer, Err calculation (delta is updated error)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#Staring backprobagation</span></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a) - <span class="number">2</span>, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment"># we need to begin at the second to last layer</span></span><br><span class="line">                <span class="comment">#Compute the updated error (i,e, deltas) for each node going from top layer to input layer</span></span><br><span class="line"></span><br><span class="line">                deltas.append(deltas[-<span class="number">1</span>].dot(self.weights[l].T)*self.activation_deriv(a[l]))</span><br><span class="line">            deltas.reverse()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.weights)):</span><br><span class="line">                layer = np.atleast_2d(a[i])</span><br><span class="line">                delta = np.atleast_2d(deltas[i])</span><br><span class="line">                self.weights[i] += learning_rate * layer.T.dot(delta)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = np.array(x)</span><br><span class="line">        temp = np.ones(x.shape[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">        temp[<span class="number">0</span>:-<span class="number">1</span>] = x</span><br><span class="line">        a = temp</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(self.weights)):</span><br><span class="line">            a = self.activation(np.dot(a, self.weights[l]))</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;多层向前神经网络&quot;&gt;&lt;a class=&quot;markdownIt-An</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>贪心与k-优化</title>
    <link href="http://xinhecuican.github.io/post/34811d5f.html"/>
    <id>http://xinhecuican.github.io/post/34811d5f.html</id>
    <published>2020-07-22T10:48:00.000Z</published>
    <updated>2020-12-17T01:55:45.238Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="引例"><a class="markdownIt-Anchor" href="#引例"></a> 引例</h1><p><strong>活动选择问题</strong></p><p>假设n个活动集合S，这些活动使用同一个资源。这个资源在某一时刻只能供一个活动使用，每个活动都有一个开始时间和一个结束时间。 我们想选出时间不重叠的数量最多的活动集（假设活动按照结束时间单调递增排序）。</p><p>这个问题可以写出最优解的表达式但是求解的时候比较麻烦。</p><p>我们是否可以这样考虑，我们每次都挑选最早结束的活动，这样就算有活动比他早开始，但是因为比他晚结束，所以同样是一个活动还是早结束的活动更优。</p><p>代码比较简单，就不打了</p><h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h1><p>性质： 我们通过局部最优解构造全局最优解。也就是我们可以考虑当前问题最优的选择，而不比考虑子问题的解。</p><p>如果一个问题最优解包含子问题最优解，称此问题有最优子结构性质。</p><p>每个小问题的解可由贪心选择获得，则称这个问题具有贪心选择性质。</p><h1 id="k-优化算法"><a class="markdownIt-Anchor" href="#k-优化算法"></a> k-优化算法</h1><blockquote><p>这里的k-优化是拿背包问题进行说明的，其他某些问题也可以使用。</p></blockquote><p>大致过程：</p><ul><li>首先按密度进行排序</li></ul><ol><li>先拿取k件物品，如果重量大于背包重量c，则放弃这个选择（具体请看下面例子）</li><li>对其余物品使用贪心算法</li><li>进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.096108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>次上述过程找出贪心最优解</li></ol><p>k-优化算法的优点是它将贪心算法与最优算法的偏差限定在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>（如果没有这个限制可能会导致最优算法结果是100，而贪心算法结果是6的情况）</p><p>它的复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n^{k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。每次贪心选择要O(n)复杂度，一共进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.096108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>次</p><p>例：</p><p><img src="/images/%E8%B4%AA%E5%BF%831.PNG" alt="" /></p><p>c=50, 如果使用2优化，我们可以</p><ul><li>先取1、2，对其他物品再使用贪心，可以得到1、2、4，价值为190</li><li>先取1、3， 可以得到1、3、4，价值为210</li><li>先取1、4， 可以得到1、2、4</li><li>先取1、5， 可以得到1、2、5， 价值为200</li><li>先取2、3 …</li></ul><h1 id="多机调度问题"><a class="markdownIt-Anchor" href="#多机调度问题"></a> 多机调度问题</h1><p>设有n个独立的作业{1, 2, …, n}, 由m台相同的机器进行加工处理。<br />作业i所需的处理时间为ti。现约定，每个作业均可在任何一台机<br />器上加工处理，但未完工前不允许终端处理。作业不能拆分成更<br />小的子作业。</p><p>求完成这些任务所需要的最短时间。</p><p>我们要想办法让分到m台机器上的时间尽可能平均，这样最后完成时间也会最短。因此我们可以按照时间排序，先把时间长的运行，之后再用时间短的进行填补<br /><img src="/images/%E8%B4%AA%E5%BF%832.PNG" alt="" /></p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> machine[NR_MACHINE];</span><br><span class="line"><span class="built_in">int</span> get_min_time(<span class="built_in">int</span> <span class="built_in">time</span>[], <span class="built_in">int</span> <span class="built_in">n</span>, <span class="built_in">int</span> machine_num)</span><br><span class="line">&#123;</span><br><span class="line">quick_sort(<span class="built_in">time</span>, <span class="number">0</span>, <span class="built_in">n</span>-<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">if</span>(machine_num &gt;= <span class="built_in">n</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       return <span class="built_in">time</span>[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   priority_queue &lt;<span class="built_in">int</span>,vector&lt;<span class="built_in">int</span>&gt;,greater&lt;<span class="built_in">int</span>&gt; &gt; q;</span><br><span class="line">   for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;machine_num; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       q.push(<span class="built_in">time</span>[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   for(<span class="built_in">int</span> i=machine_num; i&lt;<span class="built_in">n</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">int</span> temp = q.top();</span><br><span class="line">       q.pop();</span><br><span class="line">       q.push(temp+<span class="built_in">time</span>[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="primkruskal-dijkstra"><a class="markdownIt-Anchor" href="#primkruskal-dijkstra"></a> prim,kruskal, dijkstra</h1><p><a href="https://xinhecuican.github.io/post/15201.html">这三个算法可以看这</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;引例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
