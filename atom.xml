<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinhecuican&#39;s Blog</title>
  
  
  <link href="http://xinhecuican.github.io/atom.xml" rel="self"/>
  
  <link href="http://xinhecuican.github.io/"/>
  <updated>2020-11-21T12:18:47.766Z</updated>
  <id>http://xinhecuican.github.io/</id>
  
  <author>
    <name>星河璀璨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抽样分布定理证明</title>
    <link href="http://xinhecuican.github.io/post/74e7fdff.html"/>
    <id>http://xinhecuican.github.io/post/74e7fdff.html</id>
    <published>2020-11-18T11:02:00.000Z</published>
    <updated>2020-11-21T12:18:47.766Z</updated>
    
    <content type="html"><![CDATA[<p>定理 ：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{(n-1)S^{2}}{\delta^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>证明</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo>+</mo><mi>μ</mi><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>δ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\frac{(n-1)S^2}{\delta^2} = \sum_{k=1}^n\frac{(x_i-\overline{x})^2}{\delta^2}\\    = \sum_{k=1}^n\frac{(x_i - \mu +\mu - \overline{x})^2}{\delta^2}\\    = \sum_{k=1}^n\frac{(x_i - \mu)^2}{\delta^2} - \sum_{k=1}^n\frac{(\overline{x}-\mu)^2}{\delta^2}\\    = \sum_{k=1}^n\frac{(x_i - \mu)^2}{\delta^2} - \frac{n(\overline{x}-\mu)^2 }{\delta^2}\\    = \sum_{k=1}^n\frac{(x_i - \mu)^2}{\delta^2} - \frac{(\overline{x}-\mu)^2}{\delta^2 / \sqrt{n}}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.431388em;vertical-align:-0.9402800000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>δ</mi><mn>2</mn></msup></mfrac><mo>∼</mo><msubsup><mi>X</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n\frac{(x_i - \mu)^2}{\delta^2} \sim X_{n-1}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1694390000000001em;vertical-align:-0.305331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>δ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mo>∼</mo><msubsup><mi>X</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\frac{(\overline{x}-\mu)^2}{\delta^2 / \sqrt{n}} \sim X_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.431388em;vertical-align:-0.9402800000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi mathvariant="normal">与</mi><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">(x_i - \mu)^2 与 \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">与</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>相互独立，所以根据卡方分布可加性可得服从于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">X_{n-1}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;定理 ：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn</summary>
      
    
    
    
    <category term="数学" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="概率论" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>回溯法和分支限界法</title>
    <link href="http://xinhecuican.github.io/post/a50b8908.html"/>
    <id>http://xinhecuican.github.io/post/a50b8908.html</id>
    <published>2020-11-09T08:25:00.000Z</published>
    <updated>2020-11-18T06:00:10.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯法"><a class="markdownIt-Anchor" href="#回溯法"></a> 回溯法</h1><h2 id="回溯法概念"><a class="markdownIt-Anchor" href="#回溯法概念"></a> 回溯法概念</h2><p>回溯法是一种能避免不必要搜索的穷举式算法，适用于一些解空间相当大的问题。</p><p>它经常呈现一种树形结构，先进入左节点，当到了底部或者条件不满足时返回父节点并进入右节点。一个典型的例子就是<a href="https://xinhecuican.github.io/post/37663.html">深度优先搜索</a></p><p>如果不加限制条件直接搜索的话复杂度将是2^n。因此我们需要添加一些限界函数来减小搜索量。</p><p>限界函数一般有两个，一个是用来限制左支的，叫显式约数条件。另一种是限制是否搜索右支的，叫隐式约束条件。</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><h3 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h3><p><a href="https://xinhecuican.github.io/post/21624.html">01背包问题</a>最常见的办法是动态规划算法.这里介绍回溯法求解</p><ol><li>将物品按密度进行排序</li><li>设bestp是当前最好收益并初始化为负无穷</li><li>设bound = cp+r是效益值的上界。其中cp是这个节点的收益值，r是剩下所有物品的连续背包问题收益值（也就是说不满一件也可以装进去）</li><li>展开左子节点：<ul><li>如果$$cw+Wk &lt;= c$$, 则装入k,且cw += Wk, cp += pk Xk = 1(说明这个节点使用了）</li></ul></li><li>否则展开右节点：<ul><li>如果bound &lt;= bestp。则停止展开右子树（就算把剩余物品都放进去也抵不上它的收益）。否则就 xk = 0,然后继续搜索</li></ul></li></ol><p><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%951.PNG" alt="" /></p><h3 id="货箱装船问题"><a class="markdownIt-Anchor" href="#货箱装船问题"></a> 货箱装船问题</h3><p><strong>问题</strong>：给定载重量为 c 的货船，找一种装船的方法，使得装载的货箱数目最多。</p><p><strong>分析</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设cw是已装载货物重量</span><br><span class="line"></span><br><span class="line">显式限界条件： 如果cw+w(i) &gt; maxw 则杀死该左节点。</span><br><span class="line">隐式限界条件： 如果cw+r &lt;&#x3D; bestw，则停止展开右节点。r是剩余货物的重量。</span><br></pre></td></tr></table></figure><h1 id="分支限界法"><a class="markdownIt-Anchor" href="#分支限界法"></a> 分支限界法</h1><p>分支限界法也是一种穷举搜索算法。但是同样可以通过限界函数进行限界。一个典型例子就是广度优先搜索。</p><h2 id="旅行商问题"><a class="markdownIt-Anchor" href="#旅行商问题"></a> 旅行商问题</h2><p>首先说一下归约矩阵。</p><ul><li>行规约矩阵：找到每一行最小的数，然后让这一行都减去最小的数。</li><li>行规约数： 每一行最小的数求和</li><li>归约矩阵： 每一行做归约后每一列再做归约。归约数就是行规约数加上列归约数</li></ul><p>归约矩阵的性质：</p><ul><li>每一行每一列都必须有一个0</li><li>对于旅行商问题， 它的结果就是在归约矩阵中得到的结果加上归约数 W(f) = w’(f)+h</li></ul><p>例：<img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%951.PNG" alt="" /><br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%952.PNG" alt="" /></p><p>其中q12表示A’矩阵中第一行第二列的点，表示我们要先从1到2.</p><p>之后的h’表示去掉这一行这一列和qji为无穷后的矩阵的归约值。因为我们到过这个节点之后这一行这一列都不会再有点了，所以可以去掉。另外如果不是导数第二个节点的话也不可能回到起点。</p><p>找到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>的最小值后以这个点作为起始点除去这一行这一列进行下一步搜索。<br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%953.PNG" alt="" /></p><p>之后一直重复上述步骤直到搜索完成。</p><p>使用行规约矩阵的目的在于提前知道一些信息来进行分支限界。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回溯法&quot;&gt;&lt;/a&gt; 回溯法&lt;/h1&gt;
&lt;h2 id=&quot;回溯法概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回溯法概念&quot;&gt;&lt;/a&gt; 回溯法概念&lt;/h2</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="http://xinhecuican.github.io/post/eefe591f.html"/>
    <id>http://xinhecuican.github.io/post/eefe591f.html</id>
    <published>2020-10-23T10:36:00.000Z</published>
    <updated>2020-11-16T00:49:34.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>进程是正在运行的程序，它包含代码和执行状态（栈堆寄存器等）。而程序仅仅是一些静态的代码。一个程序可以生成多个进程（如记事本进程）。进程是资源分配最小单元</p><h1 id="linux系统进程"><a class="markdownIt-Anchor" href="#linux系统进程"></a> Linux系统进程</h1><p>Linux进程是采用进程树的方式。程序开始时创建一个零号进程，然后零号进程创建一号进程再由一号进程创建其他的进程。linux进程是一种树状结构，可以通过pstree命令查看进程树。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sys&#x2F;types.h：储存了一些宏定义如pid_t</span><br><span class="line">#include &lt;sys&#x2F;wait.h&gt;</span><br></pre></td></tr></table></figure><blockquote><p>fork():创建当前进程的子进程，并且子进程和当前进程完全相同。</p></blockquote><p>返回值：返回两个返回值，如果返回值是零，代表当前在子进程中。如果返回值&gt;0,代表在父进程中并且返回值是子进程pid，如果返回值&lt;0,代表出错。</p><p><strong>注意</strong>： 这里复制子进程是采用copy on right的方式，即开始子进程与父进程完全相同，只有当子父进程之间有差异时才会额外开辟空间储存差异。</p><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int pid &#x3D; fork();</span><br><span class="line">    if(pid &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, &quot;fork error\n&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid &#x3D;&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;this is the child process\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;this is the parent process\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getpid(): 获得pid</p></blockquote><blockquote><p>exec家族， 用于在子进程中调用系统中有的函数</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int execl(const char *path, const char *arg, ...)</span><br><span class="line"></span><br><span class="line">int execv(const char *path, char *const argv[])</span><br><span class="line"></span><br><span class="line">int execle(const char *path, const char *arg, ..., char *const envp[])</span><br><span class="line"></span><br><span class="line">int execve(const char *path, char *const argv[], char *const envp[])</span><br><span class="line"></span><br><span class="line">int execlp(const char *file, const char *arg, ...)</span><br><span class="line"></span><br><span class="line">int execvp(const char *file, char *const argv[])</span><br><span class="line"></span><br><span class="line">其中有p的代表会自动在系统路径中搜索，例如</span><br><span class="line">execlp(&quot;ls&quot;, &quot;ls&quot;, &quot; -l&quot;, NULL)会执行ls -l指令，如果没有p，则需要&#x2F;bin&#x2F;ls</span><br><span class="line"></span><br><span class="line">v代表传入一个数组，这个字符数组加起来就是命令，最后以NULL结尾</span><br><span class="line"></span><br><span class="line">e代表绝对地址</span><br></pre></td></tr></table></figure><blockquote><p>int wait(int *status)： 会阻塞当前进程，直到找到了僵尸子进程（死了的子进程），之后就彻底杀死子进程并返回进程号，失败会返回-1。status可以设置成NULL，</p></blockquote><blockquote><p>pid_t waitpid(pid_t pid,int *status,int options): pid是子进程进程号，表示只等待这一个子进程，其他子进程终止仍处于阻塞状态。</p></blockquote><p>options有：</p><ul><li>WNOHANG(wait no hung)： 即使没有子进程退出，它也会立即返回</li><li>Returns information about a child process stopped by SIGTTIN,<br />SIGTTOU, SIGSSTP, and SIGTSTOP signals.(返回子进程被某些信号而停止的信息）</li></ul><h2 id="进程的状态"><a class="markdownIt-Anchor" href="#进程的状态"></a> 进程的状态</h2><p>进程的状态一般可以分为三大类：运行，就绪，阻塞。</p><p><strong>运行</strong>状态是指正在cpu中执行指令的进程。</p><p><strong>就绪</strong> 是指获得了除cpu意外所有资源，正在等待cpu的进程</p><p><strong>阻塞</strong> 是指因为某些原因放弃争夺cpu的进程</p><h2 id="进程的调度"><a class="markdownIt-Anchor" href="#进程的调度"></a> 进程的调度</h2><h3 id="批处理系统中的调度"><a class="markdownIt-Anchor" href="#批处理系统中的调度"></a> 批处理系统中的调度</h3><p>批处理系统就是不具备交互性，单纯完成任务的系统。这种系统一般需要考虑提高cpu利用率（早期计算机使用批处理系统）。批处理系统中的任务一般相对固定，所以可以大致知道它所需要花费的时间。</p><h4 id="先来先服务"><a class="markdownIt-Anchor" href="#先来先服务"></a> 先来先服务</h4><p>指的是先来的任务先进行服务，这种方式最大的问题是单位时间内可以执行的任务数量比较低。如果一个任务时间很短而前面有一个需要大量时间的任务，那么他将不得不花很长的时间去等待。</p><h4 id="最短时间优先"><a class="markdownIt-Anchor" href="#最短时间优先"></a> 最短时间优先</h4><p>指的是时间短的进程先来服务。但是这种方式可能让时间长的进程一直无法执行（如果中间一直插入时间短的进程的话）</p><h4 id="高响应率优先"><a class="markdownIt-Anchor" href="#高响应率优先"></a> 高响应率优先</h4><p>这种方法考虑了等待时间的影响，是对最短时间优先的改进。</p><p>响应率 = 1 + 等待时间/完成任务需要时间</p><p>通过比较响应率，响应率高的先执行。</p><p>这种方法考虑了时间的影响，在时间短的进程先运行的同时不会让长进程无限制的等待。</p><h3 id="交互式系统中的调度"><a class="markdownIt-Anchor" href="#交互式系统中的调度"></a> 交互式系统中的调度</h3><p>交互式系统就是现在微机所使用的系统，在系统中需要运行的进程一般有很多，因此需要不停的将进程调入调出来让使用者感觉上进程是并行执行的。因此需要规定一个时间片避免进程无限制的执行。时间片到了会强制将当前进程调出然后从进程池中调入一个新的进程。在windows系统中时间片是15ms，linux系统中时间片是10ms</p><h4 id="轮转调度"><a class="markdownIt-Anchor" href="#轮转调度"></a> 轮转调度</h4><p>轮转调度是使用一个队列，运行完的进程放到队列的尾部，然后从队列的首部拉入一个进程执行。这种方法最大的问题是没有考虑到一些进程需要紧急执行（如火灾报警程序）</p><h4 id="优先级调度"><a class="markdownIt-Anchor" href="#优先级调度"></a> 优先级调度</h4><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1.PNG" alt="" /></p><p>如图，这是优先级调度的一种组织形式。数字低的是高优先级（windows或linux中），他会首先从高优先级查找，如果有待执行的程序就执行它。</p><p>在windows系统中，正常的优先级是80，低于80是高优先级，高于80是低优先级。如果高优先级较多，低优先级可能一直没有执行的机会。所以高优先级一般都是服务进程，在不需要服务的时候他们会阻塞，一旦有信号将他们唤醒他们便会优先执行。</p><p>有时还会对使用cpu时间长的程序进行惩罚。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Priority &#x3D; base + nice + CPU_PENALTY</span><br><span class="line">CPU_PENALTY &#x3D; CPU_USAGE * R</span><br><span class="line">CPU_USAGE &#x3D; CPU_USAGE * D</span><br><span class="line"></span><br><span class="line">CPU_USAGE 是CPU使用次数，每过1s（或其他时间）就会执行第三条指令防止CPU_USAGE一直增大。而CPU_PENALTY就是根据CPU_USAGE得来的。</span><br><span class="line"></span><br><span class="line">nice是我们可以设置的优先级，在linux中有个nice命令可以在程序运行前设置优先级，范围是-20-19，非root用户只能变大不能变小。renice可以在运行时设置优先级</span><br></pre></td></tr></table></figure><h1 id="竞争条件和信号量"><a class="markdownIt-Anchor" href="#竞争条件和信号量"></a> 竞争条件和信号量</h1><p>进程之间有两种关系，协同和竞争。而怎么防止两个进程同时使用一个东西或如何通知其他进程便是多进程中需要考虑的问题</p><h2 id="引例"><a class="markdownIt-Anchor" href="#引例"></a> 引例</h2><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B2.PNG" alt="" /></p><p>这个队列是等待使用打印机的队列，out是即将被答应的文件。</p><p>我们可以假设这种情况，进程a刚刚访问in发现它是7但是这时时间片到了。它被迫退出cpu。此时进程b进入cpu发现in是7并且将文件放在7处。之后再回到a，a会把他的文件放在7处然后in++。这时b的文件就被覆盖掉了</p><h3 id="皮德森算法"><a class="markdownIt-Anchor" href="#皮德森算法"></a> 皮德森算法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B3.PNG" alt="" /></p><p>我们可以考虑这种情况，a进程到了turn = process处停止，b进程一路往下到了while，发现a进程对他有兴趣而终止。</p><p>而如果a到了turn = process终止，b也到turn = process终止，那么此时因为turn被改变，所以while第一个条件不满足，进入临界区。</p><p>这种算法可以解决竞争条件，但是首先它是对两个进程来说的，多个进程不好扩展，另外每次都要写这两个函数非常麻烦。</p><h3 id="tsl信号法"><a class="markdownIt-Anchor" href="#tsl信号法"></a> TSL信号法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B4.PNG" alt="" /></p><p>此方法使用了一条汇编指令TSL，这条指令执行了两个内容<code>mov lock, %register;mov $1, %lock ；</code>前面相当于读锁的内容，后面是更改锁的值</p><blockquote><p>这条指令和上面例子的区别是这是<strong>原子指令</strong>，也就是说要么都不做，要么必须做完，时钟中断不会产生干扰。</p></blockquote><h2 id="pv操作"><a class="markdownIt-Anchor" href="#pv操作"></a> PV操作</h2><p>更为常用的方法是使用pv操作，p就使信号量-1，v就使信号量+1.</p><p><strong>信号量可正可负</strong></p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B5.PNG" alt="" /></p><p>信号量可正可负代表有一个等待队列，信号量为负时代表有多少个进程正在等待。</p><p>**信号量只有1或0</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    while(!s)</span><br><span class="line">    s--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： pv操作是操作系统提供的，他也是原子操作。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><strong>生产者消费者问题</strong></p><p>有一个生产者和消费者并且有一个队列可以存放生产者生产的产品。</p><p>一个普通的办法是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 100</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">void producer(void)</span><br><span class="line">&#123;</span><br><span class="line">    int item;</span><br><span class="line">    while(TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        item &#x3D; produce_item();</span><br><span class="line">        if(count &#x3D;&#x3D; N)sleep();</span><br><span class="line">        insert_item(item);</span><br><span class="line">        count &#x3D; count+1;</span><br><span class="line">        if(count &#x3D;&#x3D; 1)wakeup(consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer(void)</span><br><span class="line">&#123;</span><br><span class="line">    int item;</span><br><span class="line">    while(TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        if(count &#x3D;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep();</span><br><span class="line">        &#125;</span><br><span class="line">        item &#x3D; remove_item();</span><br><span class="line">        count -&#x3D; 1;</span><br><span class="line">        if(count &#x3D;&#x3D; N-1)wakeup(producer);</span><br><span class="line">        consume_item(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法是有问题的。假如消费者先运行，发现count == 0，然后发生时钟中断，之后生产者生产一个物品并发送wakeup信号，但这个时候consumer并没有睡眠，所以这个信号是没有用的。之后consumer睡眠，然后生产者一直生产物品也进行睡眠。这就产生了死锁。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 100</span><br><span class="line">semophore mutex &#x3D; 1;</span><br><span class="line">semophore empty &#x3D; N;</span><br><span class="line">semophore full &#x3D; 0;</span><br><span class="line"></span><br><span class="line">void producer(void)</span><br><span class="line">&#123;</span><br><span class="line">    int item;</span><br><span class="line">    while(TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        item &#x3D; produce_item();</span><br><span class="line">        P(empty);</span><br><span class="line">        P(mutex);</span><br><span class="line">        insert_item(item);</span><br><span class="line">        V(mutex);</span><br><span class="line">        V(full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">另外一个类似</span><br></pre></td></tr></table></figure><p>这里empty和full也可以变成一个信号量，但是P的逻辑需要更改。empty初始值是N，每次生产一个就会减一，当empty变成0也就是满的时候就会阻塞。</p><p><strong>哲学家就餐问题</strong></p><p>哲学家问题是五个哲学家五根筷子，有五盘面，每个哲学家从左边和右边各拿一个筷子就可以吃到面，问怎样才可以让所有哲学家都吃到面。</p><p>如果完全不加控制，可能会出现五个人同时拿起左边筷子又同时拿起右边筷子的情况，这样就会饿死。</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B6.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B7.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B8.PNG" alt="" /></p><p>这里使用了信号量mutex保证同一时间只有一个人试图拿筷子</p><p><strong>读写问题</strong></p><p>读写问题是同一时间可以有多个读的，但是同一时间最多有一个写的，如果有人在读那么写的就要等待</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B9.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B10.PNG" alt="" /></p><p>这是读者优先的策略，还有写者优先和公平竞争。</p><p><strong>公平竞争</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 读者队列初始值为0，其他资源初始值为1*&#x2F;</span><br><span class="line">int readCount &#x3D; 0;</span><br><span class="line">semaphore keySignal &#x3D; 1;</span><br><span class="line">semaphore OneSignal &#x3D; 1;</span><br><span class="line">semaphore readCountSignal &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">reader()</span><br><span class="line">&#123;</span><br><span class="line">    while(true)</span><br><span class="line">    &#123;</span><br><span class="line">      wait(keySignal);        &#x2F;&#x2F;申请令牌</span><br><span class="line">      wait(readCountSignal);  &#x2F;&#x2F;申请计数器资源</span><br><span class="line">      if(!readCount)          &#x2F;&#x2F;为零则申请文件资源</span><br><span class="line">         wait(fileSrc);</span><br><span class="line">      readCount++;</span><br><span class="line">      signal(readCountSignal); &#x2F;&#x2F;释放计数器资源</span><br><span class="line">      signal(keySignale);      &#x2F;&#x2F;释放令牌</span><br><span class="line"> </span><br><span class="line">      ...</span><br><span class="line">      perform read operation  &#x2F;&#x2F;执行临界区代码</span><br><span class="line">      ...</span><br><span class="line">  </span><br><span class="line">      wait(readCountSignal);  &#x2F;&#x2F;申请计数器资源</span><br><span class="line">      readCount--;</span><br><span class="line">      if(!readCount)                &#x2F;&#x2F;为零则释放文件资源</span><br><span class="line">         signal(fileSrc);</span><br><span class="line">    signal(readCountSignal); &#x2F;&#x2F;释放读者计数器资源</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">writer()</span><br><span class="line">&#123;</span><br><span class="line">     while(true)</span><br><span class="line">     &#123;</span><br><span class="line">        wait(OneSignal);     &#x2F;&#x2F;申请令牌资源</span><br><span class="line">        wait(keySignal);     &#x2F;&#x2F;申请令牌</span><br><span class="line">        wait(fileSrc);       &#x2F;&#x2F;申请文件资源</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        perform write operation &#x2F;&#x2F;执行临界区代码</span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        signal(fileSrc);   &#x2F;&#x2F;释放文件资源</span><br><span class="line">        signal(keysignal); &#x2F;&#x2F;释放令牌</span><br><span class="line">        signal(OneSignal); &#x2F;&#x2F;释放令牌资源</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的OneSignal是为了保证写的顺序，如果没有onesignal那么一旦多个写者被阻塞恢复时就是靠操作系统调度，加了onesignal保证一定是最先进来的最先执行。但是这也仅限于两个，如果有三个以上写者还是会让操作系统调度。</p><h2 id="进程间通讯"><a class="markdownIt-Anchor" href="#进程间通讯"></a> 进程间通讯</h2><ul><li>给进程发信号，但是信号只有63种并且有些还不能使用所以这种方法一般不使用。</li><li>使用进程间通讯的函数<img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B11.PNG" alt="" /></li></ul><p>这些是进程间通讯的信号量，和下面线程间通讯不同。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;ipc.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;sem.h&gt;</span><br><span class="line">+int semget(key_t key, int nesms, int semflg);key是信号量键值，nesm是创建信号量数量， semflg如果是IPC_EXCL创建唯一一个信号量，如果键值已经存在，那么就会出错。而IPC_CRATE即使存在也不会出错.返回semid</span><br><span class="line">+int semctl(int semid, int semnum, int cmd, union semun arg): 删除或调整信号量，具体使用看下面</span><br><span class="line">+int semop(int semid, struct sembuf *sops, size_t nsops):nsop是操作信号量数目（一般是1），结构体结构看下面</span><br><span class="line"></span><br><span class="line">union semun &#123;</span><br><span class="line">int val;</span><br><span class="line">struct semid_ds *buf;</span><br><span class="line">unsigned short int *array;</span><br><span class="line">&#x2F;*struct seminfo *__buf;*&#x2F;</span><br><span class="line">&#125;;</span><br><span class="line">struct sembuf &#123;</span><br><span class="line">short sem_num;</span><br><span class="line">short sem_op;</span><br><span class="line">short sem_flg;</span><br><span class="line">&#125;;</span><br><span class="line">static void sem_del(semaphore sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    union semun sem_union;</span><br><span class="line">    if (semctl(sem_id, 0, IPC_RMID, sem_union) &#x3D;&#x3D; -1)</span><br><span class="line">        fprintf(stderr, &quot;Failed to delete semaphore\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int sem_p(semaphore sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sem_b;</span><br><span class="line">    sem_b.sem_num &#x3D; 0;</span><br><span class="line">    sem_b.sem_op &#x3D; -1; &#x2F;* P() *&#x2F;</span><br><span class="line">    sem_b.sem_flg &#x3D; SEM_UNDO;&#x2F;&#x2F;进程结束而信号量没释放时，会自动释放信号量</span><br><span class="line">    if (semop(sem_id, &amp;sem_b, 1) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        fprintf(stderr, &quot;semaphore_p failed\n&quot;);</span><br><span class="line">        return(0);</span><br><span class="line">    &#125;</span><br><span class="line">    return(1);</span><br><span class="line">&#125;</span><br><span class="line">int sem_v(semaphore sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sem_b;</span><br><span class="line">    sem_b.sem_num &#x3D; 0;</span><br><span class="line">    sem_b.sem_op &#x3D; 1; &#x2F;* V() *&#x2F;</span><br><span class="line">    sem_b.sem_flg &#x3D; SEM_UNDO;</span><br><span class="line">    if (semop(sem_id, &amp;sem_b, 1) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        fprintf(stderr, &quot;semaphore_v failed\n&quot;);</span><br><span class="line">        return(0);</span><br><span class="line">     &#125;</span><br><span class="line">   return(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h1><p>线程可以看成比较小的进程，有自己的状态（寄存器和参数等），也会有一些可以被多个线程共享的参数（全局变量）。线程使独立运行和独立调度最小单元。线程可以分为用户级线程和内核级线程和混合线程三种方式。</p><ul><li>用户级线程： 这种线程不需要内核参与调度。优点是切换快（和函数调用类似），可以在不支持内核级线程的操作系统中执行。但是有一个缺点就是有一个线程被阻塞，那么其余该进程线程也会被阻塞-<strong>在操作系统层面上只会看到一个进程</strong>。</li><li>内核级线程，由内核参与线程的调度。优点是一个线程被阻塞，那么其他的线程不会被阻塞，缺点是线程间切换所需时间多（要清空高速缓存等）</li></ul><p>现在操作系统一般使用内核级线程</p><h2 id="linux线程编程-c语言"><a class="markdownIt-Anchor" href="#linux线程编程-c语言"></a> linux线程编程 C语言</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">头文件&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">线程创建</span><br><span class="line">extern int pthread_create (pthread_t *__restrict __newthread,</span><br><span class="line">   const pthread_attr_t *__restrict __attr,</span><br><span class="line">   void *(*__start_routine) (void *),</span><br><span class="line">   void *__restrict __arg) </span><br><span class="line">第一个参数是指向这个线程的指针。第二个参数设置线程的属性，一般设置成NULL。第三个参数是这个线程运行时所运行的函数。第四个参数是运行时函数的参数。</span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line">void* test(void* args)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;this is the arguments-%s&quot;, (char*)args);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    pthread_t p;</span><br><span class="line">    pthread_create(&amp;p, NULL, test, &quot;arg1&quot;);</span><br><span class="line">    pthread_join(p, NULL);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">输出： this is the arguments-arg1</span><br></pre></td></tr></table></figure><ul><li><code>int pthread_join(pthread_t thread, void **retval);</code>.它的作用是让主线程等待某个线程结束再执行。retval是线程结束后的返回值，可以设置成NULL。</li></ul><p>需要使用pthread_join的原因是主线程结束这个程序就结束了，这时候其他线程不一定执行完成。</p><ul><li><p>线程信号量 头文件pthread.h</p><ul><li>pthread_mutex_t lock_put;//信号量创建</li><li>pthread_mutex_lock(&amp;lock_put);</li><li>pthread_mutex_unlock(&amp;lock_put);</li><li>pthread_mutex_init(&amp;lock_put, NULL);//初始化，后面一般是NULL,当然也可以是下列值<ul><li><p>PTHREAD_MUTEX_TIMED_NP，这是缺省值，也就是普通锁。当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。</p></li><li><p>PTHREAD_MUTEX_RECURSIVE_NP，嵌套锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</p></li><li><p>PTHREAD_MUTEX_ERRORCHECK_NP，检错锁，如果同一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同。这样就保证当不允许多次加锁时不会出现最简单情况下的死锁。</p></li><li><p>PTHREAD_MUTEX_ADAPTIVE_NP，适应锁，动作最简单的锁类型，仅等待解锁后重新竞争。</p></li></ul></li></ul></li><li><p>线程信号量2 头文件semaphore.h</p><ul><li>int sem_init (sem_t *sem , int pshared, unsigned int value);初始化,pshared固定是0来表示线程间通讯<ul><li>value - 信号量 sem 的初始值。</li></ul></li><li>int sem_post(sem_t *sem); 加1</li><li>int sem_wait(sem_t *sem); 减1</li><li>int sem_destroy(sem_t *sem); 销毁</li></ul></li><li><p>屏障： 屏障是当不满足条件时阻塞线程，满足条件之后再一起释放</p><ul><li>pthread_cond_t   cond; 创建</li><li><code>int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr)</code>： 初始化，但是Linux中cond_attr并没有实现，所以直接NULL</li><li><code>int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)</code>  : 等待,注意 还必须要有一个互斥量，只有拿到了互斥量才可以执行等待，并且与此同时会释放mutex。</li><li>pthread_cond_signal(): 激活一个等待线程</li><li>pthread_cond_broadcast()：激活所有等待线程，要注意激活后是从等待位置开始而不是从broadcast位置开始。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (i &#x3D; 0; i &lt; 20000; i++) </span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; bstate.round;</span><br><span class="line">    assert (i &#x3D;&#x3D; t);</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_lock(&amp;bstate.barrier_mutex);</span><br><span class="line">    bstate.nthread++;</span><br><span class="line">    if(bstate.nthread &lt; nthread)&#x2F;&#x2F;没都到就待着</span><br><span class="line">    &#123;</span><br><span class="line">    pthread_cond_wait(&amp;bstate.barrier_cond, &amp;bstate.barrier_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#x2F;&#x2F;到了就全部激活</span><br><span class="line">    &#123;</span><br><span class="line">    bstate.nthread &#x3D; 0;</span><br><span class="line">    bstate.round++;</span><br><span class="line">    pthread_cond_broadcast(&amp;bstate.barrier_cond);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;bstate.barrier_mutex);</span><br><span class="line">    usleep(random() % 100);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="死锁问题"><a class="markdownIt-Anchor" href="#死锁问题"></a> 死锁问题</h1><p>死锁条件：</p><ul><li>互斥条件</li><li>保持和等待条件</li><li>无抢占条件（抢占就是在一定条件下可以抢夺这个资源，如CPU就是抢占条件）</li><li>循环等待条件</li></ul><p><img src="/images/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B12.PNG" alt="" /></p><p>如图，圆代表进程，方形代表资源，由方形指向圆代表这个进程有这个资源，由圆指向方形代表这个进程需要这个资源。如果形成环路就代表出现了死锁。</p><p>死锁解决方法：</p><ul><li>忽略问题</li><li>检测复原，例如隔多少分钟产生一个备份，一旦死锁就让某个进程回到这个备份，相应资源也会被释放</li><li>杀死某个进程释放资源</li><li>动态避免通过小心的资源分配</li></ul><h2 id="银行家算法"><a class="markdownIt-Anchor" href="#银行家算法"></a> 银行家算法</h2><p>银行家算法是通过资源分配来避免死锁的。</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B13.PNG" alt="" /></p><p>首先要知道总共有多少资源，已经分配了多少资源，总共还剩多少资源，还需要多少资源。</p><p>![](/images/进程与线程 14.PNG)</p><p><strong>现在还有(3, 2, 2)资源可以使用</strong></p><p>之后一旦有进程请求就先把资源给他。如果资源不够就不给，如果资源够就用剩下的资源进行安全状态检查。</p><p>安全状态检查就是看看现有资源可以分配给哪个进程，有就把资源给他然后回收这个进程资源（不用考虑其他进程还会申请资源）。然后用这些资源再进行分配，如果最后由进程分配不了则说明这个状态不安全。</p><ul><li>例如p4申请了(2, 1, 0)资源，先把资源给他，那么现在还有(1, 1, 2)资源可以使用，p4变成(2, 2, 1)先</li><li>把资源给p3然后回收，那么p3完成，剩余资源变成（3, 2, 3)</li><li>把资源给p1, 剩余资源变成(5, 3, 3)</li><li>资源给p4，剩余资源变成（7， 4， 5）</li><li>之后就一步一步分配</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;进程是正在运行的程序，它包含代码和执行状态（栈堆寄存器等）。而程序仅仅是一些静态的代码。一个程序可以生成多个进程（如记事本进程）。进程是资源分配</summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>分治法</title>
    <link href="http://xinhecuican.github.io/post/7f3bcd7f.html"/>
    <id>http://xinhecuican.github.io/post/7f3bcd7f.html</id>
    <published>2020-10-17T13:29:00.000Z</published>
    <updated>2020-10-19T01:18:39.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h1><p>分治法是将大问题分解成若干个小问题，通过解决小问题解决大问题的方法。它和递归关系密切。</p><p>大致流程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(|P| &lt;&#x3D; n0) adhoc(p);</span><br><span class="line">divide p into small k part;</span><br><span class="line"></span><br><span class="line">for(int i&#x3D;0; i&lt;k; i++)</span><br><span class="line">&#123;</span><br><span class="line">yi &#x3D; divide-and-conquer(pi);</span><br><span class="line">    &#x2F;&#x2F;递归解决各个子问题</span><br><span class="line">&#125;</span><br><span class="line">return merge(y1,y2,...yk); 合并子问题的解</span><br></pre></td></tr></table></figure><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h1><h2 id="找伪币"><a class="markdownIt-Anchor" href="#找伪币"></a> 找伪币</h2><p>假如有十六个硬币，有一个是伪币，伪币比较轻，试用一个天平找出伪币</p><p>假如两两比较，最坏情况需要8次</p><p>如果使用分治法，需要四次。首先8个8个比较，然后在轻的一堆中比较。</p><h2 id="计算an"><a class="markdownIt-Anchor" href="#计算an"></a> 计算a^n</h2><p>如果使用 a * a * a…。那么复杂度是O(n).使用分治法，</p><p>a^n = a^(n/2) * a^(n/2) n%2 == 0</p><p>a^n = a^(n/2) * a^(n/2) * a n%2 == 1</p><blockquote><p>所以 T(n) = T(n/2) + 0(1)</p></blockquote><p>其中T(n/2)是计算a^(n/2)所需要的时间， O(1)是两个数相乘需要的时间。由<a href="https://xinhecuican.github.io/post/71038564.html#more">主定理</a>可得，复杂度是 O(logn)。</p><p>可以看到，通过分治法，有时我们可以减少一些重复运算。</p><h2 id="大整数乘法"><a class="markdownIt-Anchor" href="#大整数乘法"></a> 大整数乘法</h2><p>两个大整数乘法直接相乘复杂度是O(n^2)（注意这里指的是每个bit相乘）<img src="/images/%E5%88%86%E6%B2%BB%E6%B3%951.PNG" alt="" /></p><p>如果把它分成两个部分,如图所示，那么乘法就可以变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(a* 2^(n&#x2F;2) + b)(c * 2^(n&#x2F;2) + d)</span><br><span class="line">&#x3D; ac * 2^n + (ad+bc) *2^(n&#x2F;2) + bd</span><br></pre></td></tr></table></figure><p>递推公式为 <code>T(n) = 4*T(n/2) + 0(n)</code>其中O(n)是ad和bc等两个分式相加的复杂度而不是计算2<sup>n的复杂度。得到的复杂度为O(n</sup>2)，没有改进。</p><p>但是如果写成 <code>ac * 2^n +((a+b)(c+d)-ac-bd) * 2^(n/2) + bd</code>则复杂度就变成了O(n^1.59)。</p><h2 id="中间的中间问题"><a class="markdownIt-Anchor" href="#中间的中间问题"></a> 中间的中间问题</h2><p><img src="/images/%E5%88%86%E6%B2%BB%E6%B3%952.PNG" alt="" /><br />如图，对这些数进行排序。我们可以把这些数分成5组，然后每组找中位数。然后在所有的中位数中寻找中位数（中位数的中位数）。再用找到的中位数的中位数进行排序。</p><p>提出这个方法是因为快速排序在最坏情况下复杂度是O(n<sup>2)，之所以可能是O(n</sup>2)是因为可能我们每次选的支点都可能是最小值。而这个算法就是为了避免这种情况。</p><p>我们已经找到中位数的中位数了（图中是10，多余的两个数可以不管）。也就是说在10这组前面有两组。因为前面每组都有三个数一定比10小。那么一定有3n/10个数比10小。</p><p>假设有n个数，找到n/5个中位数，又找中位数的中位数，那么一定有n/10个数比中位数小（n/5个中位数中有一半比他小）。因为中位数前面两个数字也一定比他小，所以总共是3n/10。</p><p>可以证明找中位数的中位数时间复杂度是O(n)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础&quot;&gt;&lt;/a&gt; 基础&lt;/h1&gt;
&lt;p&gt;分治法是将大问题分解成若干个小问题，通过解决小问题解决大问题的方法。它和递归关系密切。&lt;/p&gt;
&lt;p&gt;大致流程&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>复杂度</title>
    <link href="http://xinhecuican.github.io/post/71038564.html"/>
    <id>http://xinhecuican.github.io/post/71038564.html</id>
    <published>2020-10-02T05:52:00.000Z</published>
    <updated>2020-10-29T02:26:16.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下界math-xmlnshttpwwww3org1998mathmathmlmiωmimath-上界o-紧界math-xmlnshttpwwww3org1998mathmathmlmiθmimath"><a class="markdownIt-Anchor" href="#下界math-xmlnshttpwwww3org1998mathmathmlmiωmimath-上界o-紧界math-xmlnshttpwwww3org1998mathmathmlmiθmimath"></a> 下界<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Ω</mi></math> 上界O 紧界<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math></h1><p>这几个界都是由极限得来的。</p><p>上界： 对于 任意正常量c&gt;0,都存在No&gt;=n,使得 0&lt;=f(n)&lt;= cg(n).则可用 f(n) = O(g(n))表示。</p><p>g(n)一般使用简单的式子如 n nlogn, n^2,…</p><p>这个式子其实就是极限的表达形式，所以我们也可以用极限的形式表达：<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>i</mi><msubsup><mi>m</mi><mn>0</mn><mi>∞</mi></msubsup><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>/</mo><mi>g</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo> </mo><mn>0</mn></math></p><p>下界： f(n)&gt;=cg(n) <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>i</mi><msubsup><mi>m</mi><mn>0</mn><mi>∞</mi></msubsup><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>/</mo><mi>g</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo> </mo><mi>∞</mi></math></p><p>紧界： f(n)= cg(n)</p><h1 id="分析递归式的复杂度"><a class="markdownIt-Anchor" href="#分析递归式的复杂度"></a> 分析递归式的复杂度</h1><p>之所以递归式要单独拿出来分析是因为递归式很难从直观上去判断。例如 f(n) = f(n-1)+f(n-2).这个递归式如果要分析的话可以写成 f(n) = f(n-1) + f(n-2) + 1，最后一个1表示每一层需要进行的运算，因为这里只有一个加法运算，所以是加1.</p><h2 id="代入法求递归式"><a class="markdownIt-Anchor" href="#代入法求递归式"></a> 代入法求递归式</h2><p>代入法就是首先猜测复杂度，然后用归纳法证明。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如： T(n) &#x3D; 4T(n&#x2F;2) + n</span><br><span class="line"></span><br><span class="line">假设 T(n) &lt;&#x3D; cn^3</span><br><span class="line"></span><br><span class="line">当n &#x3D; 1时，可以找出一个足够大的c使，T(1) &lt;&#x3D; c， 成立</span><br><span class="line">当n&#x3D; k 时， T(k) &lt;&#x3D; ck^3</span><br><span class="line">当n &#x3D; n时， T(n) &#x3D; 4T(n&#x2F;2) + n &lt;&#x3D; 1&#x2F;2 * c * n^3 + n &gt;&#x3D; cn^3，所以成立。</span><br><span class="line"></span><br><span class="line">如果 T(n) &lt;&#x3D; cn^2</span><br><span class="line"></span><br><span class="line">当n&#x3D;n时， T(n) &lt;&#x3D; c * n^2 +n &gt;&#x3D; cn^2。 不成立</span><br><span class="line"></span><br><span class="line">遇到这种与结果十分接近的式子时可以减去一个低阶项。</span><br><span class="line"></span><br><span class="line">假设 T(n) &lt;&#x3D; c （n^2 - n)</span><br><span class="line"></span><br><span class="line">当 n &#x3D; n 时， T(n) &lt;&#x3D; cn^2 - c&#x2F;2*n +n &lt;&#x3D; cn^2，成立</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="递归树法"><a class="markdownIt-Anchor" href="#递归树法"></a> 递归树法</h2><p>递归树法是通过作图分析<img src="/images/%E5%A4%8D%E6%9D%82%E5%BA%A61.jpg" alt="" /></p><p>例如 f(n) = 2 * f(n/2) + n. 那么第二层是由两个f(n/2)组合而成 每个f(n/2)都会加上n/2,所以第一层和第二层都加上n。</p><p>总共有多少层呢？ 可以看到最后要减小到f(1)，而每次乘1/2,也就是 n/(2^h) = 1,h=logn.所以复杂度是 O(nlogn)（层数乘上每层数目）</p><p>拿一个跟复杂的例子。 f(n) = f(n/3) + f(2n/3) + n.对于这种我们通常使用夹紧准则获得一个近似值。例如一直从左边高度是log3 n ,右边是 log3/2 n.而右边到最后每一层不是n。这些差异我们可以忽略大致得到复杂度是nlogn。然后在用归纳法证明</p><h2 id="主方法"><a class="markdownIt-Anchor" href="#主方法"></a> 主方法</h2><p>对于 T(n) = aT(n/b) + f(n)</p><ol><li><p>如果 f(n) = O(n^logb a-e).也就是n^logb a 比 f(n)大，那么T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math>（n^logb a)<br />这里e最好写出来</p></li><li><p>如果f(n) = n^logb a, 那么 T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math>(n^logb a lgn)</p></li><li><p>f(n) = O(n^logb a+e),还要满足存在c&lt;1和足够大的n af(n/b) &lt;= cf(n),则 T(n) = <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Θ</mi></math>(f(n))</p></li></ol><p>要注意，case1 和 case2之间有空隙，case2和case3之间有空隙。一个例子是</p><p><code>T(n) = 2T(n/2) + O(nlogn)</code></p><p>这个 n^(logb(a))的确比nlogn小，但是 nlogn/n = logn都渐进小于 n<sup>e（也就是n</sup>e/logn 取极限为0）,所以这是渐进大于而不是多项式大于，不能用case3.</p><p>主定理更为适用于多项式级别的比较，如果有logn和2^n有时候就会力不从心了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下界math-xmlnshttpwwww3org1998mathmathmlmiωmimath-上界o-紧界math-xmlnshttpwwww3org1998mathmathmlmiθmimath&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>过滤器</title>
    <link href="http://xinhecuican.github.io/post/97246020.html"/>
    <id>http://xinhecuican.github.io/post/97246020.html</id>
    <published>2020-10-01T01:40:00.000Z</published>
    <updated>2020-10-20T00:01:01.163Z</updated>
    
    <content type="html"><![CDATA[<p>管道线中一个个的命令就是过滤器（从标准输入中接受数据，然后再传到标准输出中），但是在最前面的和在最后面的不一定是过滤器。</p><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><h4 id="cat-复制"><a class="markdownIt-Anchor" href="#cat-复制"></a> cat 复制</h4><p>cat的用途就是把标准输入中的数据复制到标准输出中</p><p>应用：可以与重定向结合。cat &gt; data，这样从键盘中输入的数据将直接传到data文件中</p><p>此外还可以让文件内容显示在控制台上，有 cat &lt; data，标准输入变成了data文件，标准输出是屏幕。为了方便，直接cat 文件名也是可以的</p><p>此外，tail也有类似的功能，但是它只能显示最后的十行</p><p>另外一个应用就是把一个文件复制到另一个文件。例如，cat &lt; data &gt; newdata</p><h5 id="增强cat功能"><a class="markdownIt-Anchor" href="#增强cat功能"></a> 增强cat功能</h5><p>cat &lt; file…= cat file …</p><p>有三个点说明了可以同时输入多个文件，这样就为组合多个文件提供了途径</p><p>cat data1 data2 data3 &gt;file</p><p>后缀：</p><pre><code> -n 在每行后面加一个行号 -b 与-n一起使用，不要对空白行加行号 -s 将多个连续的空白行变成一个空白行</code></pre><h4 id="split-分为不同文件"><a class="markdownIt-Anchor" href="#split-分为不同文件"></a> split 分为不同文件</h4><p>语法 split [-d] [-a num] [-l lines] [file [prefix]]</p><p>作用： 将一个大文件分解成几个小文件。默认情况下，split将创建1000行长的空间</p><p>参数：</p><pre><code>-l 创建一个5000行的空间-d 将文件名改为从00开始编号-a 后面加数字，例如3表示从000开始，总共1000个文件名</code></pre><p>默认情况下，split创建的文件将以x开头，后面加aa，ab等</p><h4 id="tac-反转复制"><a class="markdownIt-Anchor" href="#tac-反转复制"></a> tac 反转复制</h4><p>相关过滤器： cat，rev</p><p>作用：和cat类似，但是在写入文件时把文件内容反转（tac是将cat反过来）。注意，这里的反过来并不是指从后往前倒着写，而是把行与行将顺序反过来。</p><h4 id="rev-反转字符顺序"><a class="markdownIt-Anchor" href="#rev-反转字符顺序"></a> rev 反转字符顺序</h4><p>相关过滤器： cat tac</p><p>作用： 将各行字符顺序反转</p><p>语法： rev [file…]</p><p>例如： 有一个文件data，里面有</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345</span><br><span class="line">abcde</span><br><span class="line">AxAxA</span><br></pre></td></tr></table></figure><p>之后用rev后会变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">54321</span><br><span class="line">edcba</span><br><span class="line">AxAxA</span><br></pre></td></tr></table></figure><p>rev也是直接输出到标准输出上的，也就是说并不会对源文件造成改变，如果想输出到文件中，还要重定向一下</p><h4 id="headtail-从数据开头或者结尾读取"><a class="markdownIt-Anchor" href="#headtail-从数据开头或者结尾读取"></a> head，tail 从数据开头或者结尾读取</h4><p>语法： head/tail [-n lines]，lines是希望选择的数据行</p><p>默认情况下，head和tail都只会选择十行数据，用-n可以选择任意行数</p><p>例： calculate | tail -n 15</p><h4 id="colrm-删除数据列"><a class="markdownIt-Anchor" href="#colrm-删除数据列"></a> colrm 删除数据列</h4><p>相关过滤器： cut paste</p><p>colrm（“column remove&quot;)程序从标准输入中读取数据，删除指定数据列（也就是竖的删除），将剩余数据写入标准输出</p><p>语法： colrm [startcol [endcol]]，编号从1开始</p><p>例： colrm 14 30 &lt;students | less</p><h3 id="比较文件"><a class="markdownIt-Anchor" href="#比较文件"></a> 比较文件</h3><h4 id="cmp-比较两个任意文件"><a class="markdownIt-Anchor" href="#cmp-比较两个任意文件"></a> cmp 比较两个任意文件</h4><p>相关过滤器：comm diff sdiff</p><p>语法: cmp file1 file2</p><p>cmp程序逐字节的比较文件，查看两个文件是否相同。如果两个文件相同，那么不做任何处理，如果不同，将会返回第一个不同的行和列</p><h4 id="comm-比较有序文件"><a class="markdownIt-Anchor" href="#comm-比较有序文件"></a> comm 比较有序文件</h4><p>语法：comm [-123] file1 file2</p><p>comm程序一行一行的比较两个有序的文本间，程序输出三列，第一列输出只包含在第一个文件中的行，第二列输出只包含在第二个文件中的行，第三列输出两个文件中都有的行。</p><p>因为comm是逐行比较，所以在比较之前最好使用sort进行排序</p><p>参数： -1 -2 -3 取消第一二三列的输出</p><h4 id="diff-比较无序文件"><a class="markdownIt-Anchor" href="#diff-比较无序文件"></a> diff 比较无序文件</h4><p>语法： diff [-bBiqswy] [-c| -Clines | -u | -Ulines] file1 file2</p><p>lines是说明上下文关系的行号</p><p>输出： diff的输出有三个不同的单字符指示： c（change） d（delete） a（append）。这三个字符说明了要想让两个文件相同需要做哪些改变。</p><p>这三个字符左右两边都会有数字，代表着需要修改的行号。例如，3c3代表把左边文件中的第三行变成右边文件中的第三行。</p><p>diff要求改变时，就会给出每一个文件的实际行，第一个文件中的行用小于号标记，第二个文件中的行用大于号标记。两组行之间还会有横线分隔开</p><p>例如，第一个文件为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcd</span><br><span class="line">asdf</span><br><span class="line">as df</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>第二个文件为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a     </span><br><span class="line">abcd</span><br><span class="line">asdf</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0a1</span><br><span class="line">&gt; a     </span><br><span class="line">3,4c4</span><br><span class="line">&lt; as df</span><br><span class="line">&lt; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">---</span><br><span class="line">&gt; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>a左边的数代表在左边数后面追加一行，例如0a1代表在第0行后面加上右边的第一行</p><p>d一般只需要管左边的数字，它的意思是删去左边的那一行</p><p>c表示3,4行和第三行有不同，分隔符上面是第一个文件，下面是第二个文件</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i 忽略大小写区别</span><br><span class="line">-w（whitespace) 忽略所有空白符</span><br><span class="line">-b 忽略空白符数量上的区别，就是把多个空白符看成一个</span><br><span class="line">-B 忽略所有空白行，</span><br><span class="line">-q 当两个文本不同时，忽略所有细节，只说两文本不同</span><br><span class="line">-s 会明确告诉两个文本相同</span><br><span class="line">-c 全文比较，+代表要增加，-代表要减少，！代表要替换</span><br><span class="line">-u 与-c类似，但是把两个文件混合在一起显示，两个重复行只输出一个</span><br><span class="line">-y 把两个文件并排输出</span><br></pre></td></tr></table></figure><h4 id="sdiff"><a class="markdownIt-Anchor" href="#sdiff"></a> sdiff</h4><p>语法： sdiff [-bBilsW] [-w columns] file1 file2</p><p>作用：与 diff -y 类似，并排比较<br />参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l 当两个文件有共同行时，只显示左边的列</span><br><span class="line">-s 不显示两个文件中任何相同的行</span><br><span class="line">-w+数字 改变列的宽度</span><br><span class="line">-i 忽略大写和小写的区别</span><br><span class="line">-W 忽略所有的空白符</span><br><span class="line">-b 忽略空白符数量上的区别</span><br><span class="line">-B 忽略所有空白行</span><br></pre></td></tr></table></figure><h4 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h4><p>例如： diff game1_ver1.0.c game2_ver2.0.c &gt; game2_ver2.1</p><p>这个命令会把第一个文件和第二个文佳之间的差保存下来，这样可以节省空间，此外在日后不慎丢失文件时也有办法快速找回</p><h4 id="cut-抽取数据列"><a class="markdownIt-Anchor" href="#cut-抽取数据列"></a> cut 抽取数据列</h4><p>相关过滤器： colrm join paste</p><p>语法： cut -c list [file…]</p><p>list就是要抽取的数据列，各个列之间用逗号隔开，不能有空格，或者14-19表示从14列到19列</p><p>作用：抽取指定的列</p><p>这种按列切分遇到长度不同的数据时就显得无能为力，因此还有另一种抽取方式，抽取字段，即按照一定的定界符进行分割（如逗号，空格等）</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c  list [file...] list表明抽取第几个字段</span><br><span class="line">-f  list [-d delimiter] [-s] [file...]  -d后面是定界符种类 -s（suppress 抑制）抛弃没有定界符的行。例如 cut -f 1 -d &#39;:&#39; .&#x2F;temp</span><br></pre></td></tr></table></figure><h4 id="paste"><a class="markdownIt-Anchor" href="#paste"></a> paste</h4><p>语法： paste [-d char…] [file…]</p><p>其中char是用来做分隔符的字符，默认情况为一个制表符或者是空格</p><p>作用： 把几个文件组合成一个表格（组合数据列）</p><p>如果指定了不止一个定界符，那么将会轮流使用定界符</p><p>例如： paste -d ‘|%’ name phone ，这个指令中就有两个定界符</p><h3 id="统计和格式化"><a class="markdownIt-Anchor" href="#统计和格式化"></a> 统计和格式化</h3><h4 id="nl-创建行号"><a class="markdownIt-Anchor" href="#nl-创建行号"></a> nl 创建行号</h4><p>语法： nl [-v start] [-i increment] [-b a] [-n ln|rn|rz] [file…]</p><p>start是起始行号 ，increment是增量</p><p>作用：希望在一些数据中永久的插入行号，在输出中临时插入行号。一般状况下，插入的行号都是临时的，原始数据并不会发生改变，除非重定向输出到文件中。</p><p>默认情况下，不会对空行编号</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v 改变起始编号，默认起始编号是1</span><br><span class="line">-i 改变增量，默认增量为1</span><br><span class="line">-b a 对所有行编号，包括空行</span><br><span class="line">-n ln 左对齐 rn 右对齐 rz 右对齐，有前导0</span><br></pre></td></tr></table></figure><h4 id="wcword-count统计行单词和字符的数量"><a class="markdownIt-Anchor" href="#wcword-count统计行单词和字符的数量"></a> wc（word count）统计行单词和字符的数量</h4><p>语法： wc [-clLw] [file…]</p><p>作用：统计行，单词，字符的数量。所统计的数据可以来自另一个程序或者是一个或多个文件</p><p>输出依次输出行，单词数，字符数 和文件名。如果不止一个文件，那么会为每一个文件显示一个输出，然后最后一行是一个总输出。</p><p>参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l 统计行</span><br><span class="line">-w 统计单词</span><br><span class="line">-c 统计字符</span><br><span class="line">-L 该选项显示输入中最长行的长度</span><br></pre></td></tr></table></figure><p>此外，还可以用wc来统计某一目录中文件的数量，假设一个文件一行，用ls file | wc -l.</p><h4 id="制表符和空格"><a class="markdownIt-Anchor" href="#制表符和空格"></a> 制表符和空格</h4><p>在老式机器中，会在某些特定的为做一些机器标记，这些标记叫做制表位，如果按了制表位，那么机器会直接跳转到下一个制表位上，tab键与这个作用类似。一旦按了tab键，那么他将会自动跳转到下一个制表位。例如输入<code>A&lt;Tab&gt;BBBB&lt;Tab&gt;CCC</code>，实际上看起来中间有空格，实际上只有一个Tab</p><p>可视化制表符</p><p>第一种办法是在vi中，set list 那么制表符会转化成^I符号</p><h4 id="expand-将制表符转化成空格"><a class="markdownIt-Anchor" href="#expand-将制表符转化成空格"></a> expand 将制表符转化成空格</h4><p>语法： expand [-i] [-t size] [-t list] [file…]</p><p>其中size是固定宽度制表符的大小（默认为8)，list是制表位列表</p><p>作用：expand将输入文件中所有的制表符转化成空格，别切维持与原文本相同的对齐方式</p><p>-i 只转换开头的制表符，其他的制表符保持不变</p><h4 id="unexpand-将空格转化成制表符"><a class="markdownIt-Anchor" href="#unexpand-将空格转化成制表符"></a> unexpand 将空格转化成制表符</h4><p>语法： unexpand [-a] [-t size] [-t list] [file…]</p><p>其中size是制表符的大小（希望设置的），list是制表位列表</p><p>一般情况下，unexpand只转化第一行的空格，如果想要转换所有行的空格，那么需要-a选项</p><h4 id="fold-格式化行"><a class="markdownIt-Anchor" href="#fold-格式化行"></a> fold 格式化行</h4><p>相关过滤器： fmt ,pr</p><p>语法： fold [-s] [w witch] [file…]</p><p>其中witch是新行的宽度。</p><p>作用： 将长的行分割成短行。也就是把一行分成多行。其实就是在适当位置插入一个回车符</p><p>默认状态下，80个字符为一行。</p><p>-s选项是告诉程序不要分割单词，也就是说如果那个单词正好在要分割的位置，那么现在会先显示这个单词在转到下一行。</p><h4 id="fmt-格式化段落"><a class="markdownIt-Anchor" href="#fmt-格式化段落"></a> fmt 格式化段落</h4><p>语法： fmt [-su] [-w width] [file…]</p><p>作用：让各行连接在一起，并且不改变空白符。</p><p>当它读取文本时，假定段落由空行分隔。一个“段落”就是一个或多个连续的文本行，不包括空行。fmt根据下列规则读取一个段落</p><ul><li>行宽： 让每行尽可能的长，并且不超过指定的长度。默认情况下，每行最多75个字符</li><li>句子： 无论何时，尽可能在句子末尾分隔行。避免在句子的第一个单词之后或最后一个单词之前分隔行。</li><li>空白符： 保持单词及空行之间的所有缩进，空格。</li><li>制表符： 所有制表符转化成空格。并在最后输出时合适的位置插入制表符</li></ul><p>说起来复杂，其实就是让那些长短不一的段落尽量变得长。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">As we all know,</span><br><span class="line">success cones slowly and</span><br><span class="line">is due to a number of different factors all coming</span><br><span class="line">together</span><br><span class="line">over a period of years</span><br></pre></td></tr></table></figure><p>使用命令后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">As we all know, real success comes slowly and is</span><br><span class="line">due to a number of different factors all coming</span><br><span class="line">together over a period of years.</span><br></pre></td></tr></table></figure><p>此外，它是一段的作用，如果两行之间有个空行就把他们当成两段单独处理，互不影响</p><p>参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u(uniform spacing 统一间距) 减少空格，每个单词之间最多只有一个空格，句子末尾最多只有两个空格。</span><br><span class="line">-w 设定宽度</span><br></pre></td></tr></table></figure><h4 id="pr-按页格式化文本"><a class="markdownIt-Anchor" href="#pr-按页格式化文本"></a> pr 按页格式化文本</h4><p>语法： pr [-dt] [+beg[:end]] [-h text] [-l n] [-o margin] [-W width] [file…]</p><p>作用： 按页格式化文件，以便于打印。</p><p>其中 beg是需要格式化的第一页，end是最后一页，text是标题，n是每页的行数，margin是左边缘的大小，width是输出的宽度。</p><p>默认情况下，pr是通过顶端插入一个标题，左边插入一个边缘，底部插入一个页尾来格式化文件。标题包括修改时间，文件名称和页号。</p><p>如果想查看效果，最好在less程序中</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d 双倍行距文本（word中的）</span><br><span class="line">+begin;end 从那页到哪页格式化</span><br><span class="line">-l 改变每页总行数</span><br><span class="line">-o 设置左边缘</span><br><span class="line">-W 改变每一行的字符数（默认是72）</span><br></pre></td></tr></table></figure><p>还可以按列格式化文本</p><p>语法： pr [-mt] [-columns] [-l lines] [-W width] [file…]</p><p>column是输出列的数量，lines是每页的行数，width是每行的字符数。这个选项不建议用，会截断字符。</p><h3 id="选取排序组合变换"><a class="markdownIt-Anchor" href="#选取排序组合变换"></a> 选取，排序，组合，变换</h3><h4 id="grep-选取特定模式的行"><a class="markdownIt-Anchor" href="#grep-选取特定模式的行"></a> grep 选取特定模式的行</h4><p>相关过滤器： look strings</p><p>语法： grep [-cilLnrsvwx] pattern [file…]</p><p>pattern是要搜索的格式</p><p>作用： 从标准输入或文件中读取数据，抽取所有包含特定模式的行，并写入标准输出。</p><p>这个模式可以是字符串标点符号等，但是如果是标号或者特殊字符时，最好用’'强引用，以防止歧义。</p><p>选项：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c(count) 统计所抽取行的数量，但不显示行本身</span><br><span class="line">-i（ignore) 忽略大小写的区别</span><br><span class="line">-n 所选行在原文件中的位置</span><br><span class="line">-l（list），如果在不只一个文件中搜索，使用这个选项可以只把匹配的文件名列举出来，此时文件名也要输出多个</span><br><span class="line">-L 显示不包含该模式的文件名</span><br><span class="line">-v（reverse） 选取不包含模式的行</span><br><span class="line">-x 选取完全匹配的行</span><br><span class="line">-r（recursive递归） 搜索整个目录树</span><br></pre></td></tr></table></figure><h5 id="fgrepegrep-grep变体"><a class="markdownIt-Anchor" href="#fgrepegrep-grep变体"></a> fgrep，egrep grep变体</h5><p>fgrep，历史上使用，现在基本不用</p><p>egrep grep扩展版本，功能比grep强大，可以通过 grep -E的方式<br />-w 只匹配完整的单词，并且最好配合-l使用。</p><h4 id="look-选取以特定模式开头的行"><a class="markdownIt-Anchor" href="#look-选取以特定模式开头的行"></a> look 选取以特定模式开头的行</h4><p>格式： look [-df] pattern file…</p><p>作用： 搜索以字母顺序排列的数据，并查找所有以特定模式开头的行。然后输出这些行</p><p>look其实并不是一个过滤器，它只能从文件中读入，因此只能写于管道线的开头</p><p>-d 忽略标点和其他字符，本来是指搜索第一个单词</p><p>-f（fold同等） 忽略大写和小写的区别</p><h4 id="sort-排序"><a class="markdownIt-Anchor" href="#sort-排序"></a> sort 排序</h4><p>格式 sort [-dfnru] [-o outfile] [infile…]</p><p>作用： 排序数据和查看数据是否已经有序。他可以比较整行，也可以从每行中选取一部分进行比较。</p><p>sort可以重定向输出到另一个文件，但是不能输出到输入文件</p><p>例如： sort temp &gt; temp 是不可以的</p><p>但是可以使用-o选项，此时该文件中原有数据将会被保存，排序后的数据也会被追加到这个文件中</p><h5 id="-dfnr-控制数据排序的顺序"><a class="markdownIt-Anchor" href="#-dfnr-控制数据排序的顺序"></a> -dfnr 控制数据排序的顺序</h5><p>-d(dictionary) 只查看字母，数字和空白符，当确定有阻碍排序的因素（如标点符号等），可以使用这个选项。</p><p>-f（fold 等同）不区分大小写</p><p>-n（numeric 数字） 识别开头或者字段开头的数字，并按照数字进行排序</p><p>-r 反向排序</p><p>-u（unique 唯一） 对于相同行，只保留一行</p><h5 id="检测数据是否有序-c"><a class="markdownIt-Anchor" href="#检测数据是否有序-c"></a> 检测数据是否有序 -c</h5><p>-c（check） 不会排列数据，只会告诉数据是否有序，如果有序，将不会显示任何内容</p><h4 id="uniq-查找重复的行"><a class="markdownIt-Anchor" href="#uniq-查找重复的行"></a> uniq 查找重复的行</h4><p>语法： uniq [-cdu] [infile [outfile]</p><p>作用： 消除重复行，选取重复行，选取唯一行，统计重复行的数量。不加选项输出非重复行和只输出一次重复行</p><p>注意uniq的输入必须是有序的</p><p>-d 只查看重复行</p><p>-u 只查看非重复行</p><p>-c 统计重复行出现的次数</p><h4 id="join-合并两个文件的有序数据"><a class="markdownIt-Anchor" href="#join-合并两个文件的有序数据"></a> join 合并两个文件的有序数据</h4><p>相关过滤器： colrm cut paste</p><p>语法： join [-i] [-al|-vl] [-a2|-v2] [-l field1] [-2 field2] file1 file2</p><p>其中field是引用特定数段的数字</p><p>作用： 把两个文件中对应行合并到一起。但是这又和sort不同，sort是直接把两个文件拼接在一起，而join则是重复数据合并为一个输出。不重复数据直接输出。读取输入时，会忽略前导空白符。</p><p>不使用其他标号情况下，只会显示有匹配的连接字段（也就是两个文件对应行有相同字段），如果使用-a(all)选项，将会显示整个文件，后面要加a1或a2。a1代表把第一个文件中不匹配的内容也加上去。如果是v1，显示V1中不匹配的行</p><p>-1+sum 将第一个文件中的第sum个字段和第二个文件中的第一个字段进行匹配</p><h4 id="tsort-由偏序创建全序"><a class="markdownIt-Anchor" href="#tsort-由偏序创建全序"></a> tsort 由偏序创建全序</h4><p>语法： tsort file</p><p>作用：将一系列的事一件一件从头到尾输出</p><p>例如：两个单词第二个单词代表在第一个单词后要做的事</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eat clean-dishes</span><br><span class="line">clean-dishes watch-TV</span><br><span class="line">shop cook</span><br><span class="line">cook eat</span><br></pre></td></tr></table></figure><p>在使用了tsort后，输出为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shop</span><br><span class="line">cook</span><br><span class="line">eat</span><br><span class="line">clean-dishes</span><br><span class="line">watch-TV</span><br></pre></td></tr></table></figure><h4 id="strings-在二进制文件中搜索字符串"><a class="markdownIt-Anchor" href="#strings-在二进制文件中搜索字符串"></a> strings 在二进制文件中搜索字符串</h4><p>语法： strings [-length] file…</p><p>在现代软件中基本都有这种功能，不再展开</p><h4 id="转换字符-tr"><a class="markdownIt-Anchor" href="#转换字符-tr"></a> 转换字符 tr</h4><p>语法： tr [-cds] [set1 [set2]]</p><p>set1是字符组</p><p>作用：可以将一个字符转化成另一个字符，例如将小写转化成大写，将制表符转化成空格，或者将0转化成x等。此外，还可以将多个字符变成一个字符，例如将多个空格转化成一个空格。最后，还可以删除指定字符，例如删除制表符。</p><p>例如： tr a A &lt; old tr a-z A-Z &lt; old</p><p>当需要替换的字符中出现由特殊意义的字符时，需要引用他们</p><p>还有几种特殊的缩写 [:lower:] 代表小写字母，[:upper:]代表大写字母，[:digit:]代表数字</p><p>tr还可以转换不可见字符</p><p>例如： tr ‘\n’ ‘\t’ &lt; old</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-s 多个字符变成一个字符 例如 tr -s &#39; &#39; &#39; &#39; &lt; old</span><br><span class="line">-d 删除指定字符</span><br><span class="line">-c 把没选上的字符变成另一个字符，例如 tr -c &#39; \n&#39; x &lt; old，这个的意思就是除了空格和换行之外其他所有字符都变成x</span><br></pre></td></tr></table></figure><h4 id="sed-非交互式文本编辑"><a class="markdownIt-Anchor" href="#sed-非交互式文本编辑"></a> sed 非交互式文本编辑</h4><p>交互式文本编辑就是有一个窗口，例如gedit vi等。而非交互式则需要提前设计命令，然后将命令发给程序。</p><p>语法： sed [-i] command | -e command… [file…]</p><p>command是sed命令</p><p>作用： sed是一个标准的过滤器，可以对标准输入或者标准输出进行修改</p><p>sed从输入流中每次读取一行。然后执行下面三个步骤</p><ol><li>从输入流中读取一行</li><li>执行指定的命令，对该行进行必要的修改</li><li>将该行写入输出流中</li></ol><p>因为是修改标准输入或者标准输出，所以源文件不会被修改，如果要修改原文件，可以加上-i(in-place)选项，这个选项会将输出保存到一个临时文件，一但所有数据处理完，sed就会把临时文件复制到原文件中</p><h5 id="使用sed进行替换"><a class="markdownIt-Anchor" href="#使用sed进行替换"></a> 使用sed进行替换</h5><p>想要用sed对标准输入或输出的内容进行修改，可以采用 s命令</p><p>形式： /address|pattern/ s /search/replacement/[g]</p><p>address 是输入流中一个行或者多个行的地址，pattern是一个字符串，search是正则表达式，replacement是一个替换文本</p><p>例如 sed s/harley/Harley,这个例子意思就是把每一行的第一个harley改成Harley，如果想把所有都改了，那么在后面要加上一个g</p><p>如果只对一些行进行操作，可以用下列语法：</p><p>number[,number] /regex/</p><p>number是行号</p><p>例如： sed ‘5s/harley/Harley/g’ names</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;管道线中一个个的命令就是过滤器（从标准输入中接受数据，然后再传到标准输出中），但是在最前面的和在最后面的不一定是过滤器。&lt;/p&gt;
&lt;h3 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础&quot;&gt;&lt;/a&gt; 基础&lt;/h3&gt;
&lt;h4 id=</summary>
      
    
    
    
    <category term="Linux" scheme="http://xinhecuican.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>RNN及其拓展</title>
    <link href="http://xinhecuican.github.io/post/aa1eade8.html"/>
    <id>http://xinhecuican.github.io/post/aa1eade8.html</id>
    <published>2020-08-21T03:26:00.000Z</published>
    <updated>2020-10-19T13:59:13.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rnn"><a class="markdownIt-Anchor" href="#rnn"></a> RNN</h1><p>RNN的特点是上一次输入会对下一次产生影响，相当于有了记忆功能，常用于自然语言处理。</p><p><img src="/images/RNN1.jpg" alt="" /></p><p>这是RNN的结构图，它与传统神经网络的区别是在隐藏层有了一个循环。</p><p><img src="/images/RNN2.jpg" alt="" /></p><p>这张图的含义是每一个时间点都可以有输出o，也可以没有。每一个时间点隐藏层输出作为下一个隐藏层的输入，也就是说该次训练对下一次训练会产生影响。</p><p>网上演示的时候隐藏层只有一层，这里就以一层为例。</p><p>隐藏层计算：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z(h)(t)&#x3D;U⋅x(t)+W⋅s(t−1) #s(t-1)是前一刻隐藏层输出</span><br><span class="line">s(t)&#x3D;fh(z(h)(t))</span><br></pre></td></tr></table></figure><p>s(t)是隐藏层输出， fh是激活函数，一般使用tanh或LeRu。</p><p>输出层使用softmax函数进行转换，然后损失函数使用交叉熵</p><p>Lt=−∑（N， i=0）yi(t)log(oi(t))</p><p>其中yi是真实值，oi是预测值</p><h2 id="bptt"><a class="markdownIt-Anchor" href="#bptt"></a> BPTT</h2><p>BPTT是RNN所使用的反向传播算法。它和传统反向传播算法的区别是它还要照顾到W（前一层到这一层的权重）</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C15.PNG" alt="" /></p><p>大体上还是使用这四个式子</p><p>δk(t) 表示t时刻损失函数对output layer 节点的输入zk(t)的导数（也就是求上面方程中第一个式子）。</p><p>δk(t) = o(t) - 1</p><p>所以∂Lt \ ∂V = (o(t) - 1) * s(t)</p><p>δk(h)(t) = [δ(o)(t) ⋅ Vk] ∙ [1 − sk(t)^2]</p><p>所以 ∂Lt \ ∂U = δ(h)(t) * x(t)</p><p>向w传播的 δ(h)(t−1)=[δ(h)(t)⋅W] ∙ <a href="%E8%BF%99%E9%87%8C%E5%8C%BA%E5%88%AB%E5%B0%B1%E6%98%AFs(t-1)%E5%92%8CW">1−s(t−1)^2</a></p><p>∂Lt \ ∂W = δ(h)(t) *  s(t-1)</p><h1 id="lstm"><a class="markdownIt-Anchor" href="#lstm"></a> LSTM</h1><p>RNN的缺陷是会出现梯度消失现象，因此无法保存长时间记忆。LSTM通过两条记忆途径使得可以保存长时间记忆。</p><p><img src="/images/RNN2.webp" alt="" /><br />这是LSTM的结构图，其中上面那一条线代表长时间记忆，下面那一条代表短时记忆。而保存在尝试记忆中的信息由几个门控制。</p><p><img src="/images/RNN3.webp" alt="" /></p><p>这是第一个门控忘记门，用来剔除不重要的信息。至于为什么能忘掉不重要信息，只能说这是神经网络自己决定的（没找到解释）。如果某一项为0代表舍弃，为1代表全部保留。</p><p>公式中<code>Wf⋅[ht−1,xt] = Wfh * h(t−1) + Wfx * xt</code>。wf可以看成是两个矩阵拼接而成，然后对应和输入相乘。</p><p><img src="/images/DNN4.webp" alt="" /></p><p>记忆门，这个门决定我们要记忆什么，迁前一部分是删去要舍弃的记忆，后面一部分是加上要记住的东西。注意Ct是tanh</p><p><img src="/images/DNN5.webp" alt="" />更新长期记忆。</p><p><img src="/images/DNN6.webp" alt="" /> 输出门。更新ht并输出</p><h2 id="反向更新"><a class="markdownIt-Anchor" href="#反向更新"></a> 反向更新</h2><p>首先确定更新内容。我们要更新四个b，四个w。其中w又要拆分成两部分，所以总共更新12个量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">δTo,t&#x3D;δTt⨀tanh(ct)⨀ot⨀(1−ot)</span><br><span class="line">δTf,t&#x3D;δTt⨀ot⨀(1−tanh(ct)2)⨀ct−1⨀ft⨀(1−ft)</span><br><span class="line">δTi,t&#x3D;δTt⨀ot⨀(1−tanh(ct)2)⨀ct^⨀it⨀(1−it)</span><br><span class="line">δTc^,t&#x3D;δTt⨀ot⨀(1−tanh(ct)2)⨀it⨀(1−c^2)</span><br><span class="line"></span><br><span class="line">yt&#x3D;σ(Vht+by) &#x2F;&#x2F; 当前状态输出</span><br><span class="line">δt&#x3D;∂E \ ∂ht &#x3D; Vσ&#96;</span><br><span class="line"></span><br><span class="line">∂E \ ∂Woh,t &#x3D; δo,t * h(t−1)</span><br><span class="line">其他三个 同理</span><br><span class="line"></span><br><span class="line">∂E \ ∂bo,t &#x3D; δo,t</span><br><span class="line">其他三个同理</span><br><span class="line"></span><br><span class="line">∂E \ ∂Wox &#x3D; δo,t * xt</span><br></pre></td></tr></table></figure><p><a href="https://ilewseu.github.io/2018/01/06/LSTM%E5%8F%82%E6%95%B0%E6%9B%B4%E6%96%B0%E6%8E%A8%E5%AF%BC/">反向更新具体过程可看</a></p><h1 id="gru"><a class="markdownIt-Anchor" href="#gru"></a> GRU</h1><p>GRU相比于LSTM所花的时间更短，但是达成的效果差不多。</p><p><img src="/images/RNN7.svg" alt="" />可以看到GRU只有一个参量要传递给下一个单元，并且需要更新的量也减少。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rt&#x3D;σ(Xt * Wxr+H(t−1) * Whr+br)</span><br><span class="line">Zt&#x3D;σ(Xt * Wxz+H(t−1) * Whz+bz)</span><br></pre></td></tr></table></figure><p>这是重置门和更新门的计算公式，和LSTM计算方法相同，实际上GRU借鉴了LSTM的思想。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H~t&#x3D;tanh(Xt * Wxh + (Rt ⊙ H(t−1)) * Whh + bh) #重置门指的是重置H(t-1)</span><br><span class="line">Ht&#x3D;Zt ⊙ H(t−1) + (1−Zt) ⊙ H~t</span><br><span class="line">最后的zt和1-zt决定要记住新内容多还是老内容多，例如 zt&#x3D;1&#x2F;3, 那么老内容一次运行就只剩下1&#x2F;3.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rnn&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rnn&quot;&gt;&lt;/a&gt; RNN&lt;/h1&gt;
&lt;p&gt;RNN的特点是上一次输入会对下一次产生影响，相当于有了记忆功能，常用于自然语言处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/R</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://xinhecuican.github.io/post/fa288682.html"/>
    <id>http://xinhecuican.github.io/post/fa288682.html</id>
    <published>2020-08-03T01:30:00.000Z</published>
    <updated>2020-08-04T03:28:22.513Z</updated>
    
    <content type="html"><![CDATA[<p>numpy用于矩阵计算，内置了大量矩阵计算的函数，并且速度也比列表快</p><p><strong>创建</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a &#x3D; [1, 2, 3]</span><br><span class="line">b &#x3D; [[1,2],</span><br><span class="line">    [2, 3],</span><br><span class="line">    [5, 8]]</span><br><span class="line">c &#x3D; np.array(a)</span><br><span class="line">d &#x3D; np.array(b, int)</span><br></pre></td></tr></table></figure><p>通过array就把列表转化成了numpy的矩阵</p><ul><li>ones(shape, dtype): 这个是创建值全为1的矩阵，shape是矩阵的行和列数，dtype是矩阵数据类型。</li><li>zeros(shape, dtype): 创建全是零的矩阵</li><li>full(shape, constant_value, dtype): 创建指定数值的矩阵。其中constant_value是用来填充矩阵的值</li><li>eye(N): 创建单位矩阵，N是矩阵的维度</li><li>diag(v, k): 创建对角矩阵。v如果是一维则是创建对角矩阵，如果是二维是获取对角线上的元素。k=0表示获取主对角线上元素，k&gt;0则获取主对角线上方第k条对角线元素</li></ul><p><strong>创建随机数组</strong></p><ul><li>np.random.rand(shape): 创建一个值在0到1的随机数组。例如np.random.rand(10, 10, 3)是创建一个三维数组</li><li>uniform(low, high, shape): 创建一个值在low到high的随机数组</li><li>randint(low, high, shape): 创建一个值在low到high并且值是整数的随机数组</li><li>normal(loc, scale, shape): 给定均值，方差，维度的正态分布。</li></ul><p><strong>查看矩阵属性</strong></p><ul><li>size(): 获得矩阵元素个数</li><li>shape(): 获得矩阵的行和列，shape[0]是行，shape[1]是列.但是如果是一维数组那么shape[0]表示列数，没有shape[1]</li><li>ndim:  维数</li><li>dtype： 元素类型</li><li>T: 返回这个矩阵的转置</li></ul><p><strong>操作</strong></p><ul><li>np.copy(array): 复制矩阵</li><li>sort(a, axis): axis = 0是每行进行排序，1是每列进行排序，默认是对整个数组进行排序。a是用来排序的矩阵。如果是np.sort()那么原矩阵不改变。如果是array.sort()，原矩阵改变。</li><li>unique(a, return_index, retrun_inverse, return_counts, axis): 查找array中唯一元素。return_index是返回新列表中元素在旧列表出现第一个位置。return_counts是每个元素在原来矩阵中数量。return_inverse是返回一个索引数组，索引的是新列表元素位置。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">b &#x3D; np.diag(a)</span><br><span class="line">alpha, beta &#x3D; np.unique(b, return_counts&#x3D;True)</span><br><span class="line">print(alpha)</span><br><span class="line">print(beta)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[0 1 2 3 4 5]</span><br><span class="line">[20  1  1  1  1  1]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">b &#x3D; np.diag(a)</span><br><span class="line">alpha, beta &#x3D; np.unique(b, return_inverse&#x3D;True)</span><br><span class="line">print(alpha)</span><br><span class="line">print(beta)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[0 1 2 3 4 5]</span><br><span class="line">[1 0 0 0 0 0 2 0 0 0 0 0 3 0 0 0 0 0 4 0 0 0 0 0 5]</span><br></pre></td></tr></table></figure><ul><li>array.reshape(shape): 改变形状，但是元素个数不变，如果改变形状后元素数目和原来不同会报错。原数组改变</li><li>array.resize(shape): 改变形状,元素个数可变，不足补零。如果小于原来数目会输出None，采取逐个填充的方法。</li></ul><p><strong>计算</strong></p><ul><li><code>+</code>： 矩阵加法，让矩阵中每个元素都相加。例如a+5是矩阵中每个元素都加五。a+b是矩阵中对应元素相加</li><li><code>*</code>： 注意矩阵乘法是dot函数，这个是对应元素相乘</li><li>==: 矩阵中逐个元素进行比对，然后返回一个bool型矩阵，如果两个矩阵对应位置相同那么bool型矩阵对应位置就是True。</li><li>dot(): 矩阵相乘</li><li>delete(a, elements, axis): 矩阵删除行或列。elements是删除的行或列的序号</li><li>append()</li><li>insert()</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy用于矩阵计算，内置了大量矩阵计算的函数，并且速度也比列表快&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>层次聚类</title>
    <link href="http://xinhecuican.github.io/post/2ba82a45.html"/>
    <id>http://xinhecuican.github.io/post/2ba82a45.html</id>
    <published>2020-07-30T02:34:00.000Z</published>
    <updated>2020-08-05T00:59:43.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>层次聚类（hierarchical clustering)就是不断把最近的类合并知道达到要求为止。这是一种树形结构</p><p>大致过程：</p><ol><li>初始化，每个实例看做一类</li><li>合并， 算出每两个类之间的距离，然后把距离最近的两个类合并成一个类</li><li>终止条件可以是最近两个类之间的距离</li></ol><p>计算两个类之间距离的方法</p><ol><li>SingleLinkage: 这种方法是以两个类中最短距离代表两个类之间的距离。但是这种方法可能出现链式反应，即抓到了一个离其他点十分近的点就抓到了一群点，但实际上分属两团</li><li>CompleteLinkage： 这种方法是找两个类中最长点距离</li><li>AverageLinkage： 这种方法是把两个类中所有点的距离求出来再求平均值，或者也可以取中值</li></ol><h1 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Code for hierarchical clustering, modified from </span><br><span class="line">Programming Collective Intelligence by Toby Segaran </span><br><span class="line">(O&#39;Reilly Media 2007, page 33). </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class cluster_node: # 树节点</span><br><span class="line">    def __init__(self,vec,left&#x3D;None,right&#x3D;None,distance&#x3D;0.0,id&#x3D;None,count&#x3D;1):</span><br><span class="line">        self.left&#x3D;left</span><br><span class="line">        self.right&#x3D;right</span><br><span class="line">        self.vec&#x3D;vec</span><br><span class="line">        self.id&#x3D;id</span><br><span class="line">        self.distance&#x3D;distance</span><br><span class="line">        self.count&#x3D;count #only used for weighted average </span><br><span class="line"></span><br><span class="line">def L2dist(v1,v2):</span><br><span class="line">    return sqrt(sum((v1-v2)**2))</span><br><span class="line">    </span><br><span class="line">def L1dist(v1,v2):</span><br><span class="line">    return sum(abs(v1-v2))</span><br><span class="line"></span><br><span class="line"># def Chi2dist(v1,v2):</span><br><span class="line">#     return sqrt(sum((v1-v2)**2))</span><br><span class="line"></span><br><span class="line">def hcluster(features,distance&#x3D;L2dist):</span><br><span class="line">    #cluster the rows of the &quot;features&quot; matrix</span><br><span class="line">    distances&#x3D;&#123;&#125;</span><br><span class="line">    currentclustid&#x3D;-1</span><br><span class="line"></span><br><span class="line">    # clusters are initially just the individual rows</span><br><span class="line">    clust&#x3D;[cluster_node(array(features[i]),id&#x3D;i) for i in range(len(features))]</span><br><span class="line"></span><br><span class="line">    while len(clust)&gt;1:</span><br><span class="line">        lowestpair&#x3D;(0,1)</span><br><span class="line">        closest&#x3D;distance(clust[0].vec,clust[1].vec)</span><br><span class="line">    </span><br><span class="line">        # loop through every pair looking for the smallest distance</span><br><span class="line">        for i in range(len(clust)):</span><br><span class="line">            for j in range(i+1,len(clust)):</span><br><span class="line">                # distances is the cache of distance calculations</span><br><span class="line">                if (clust[i].id,clust[j].id) not in distances: </span><br><span class="line">                    distances[(clust[i].id,clust[j].id)]&#x3D;distance(clust[i].vec,clust[j].vec)</span><br><span class="line">        </span><br><span class="line">                d&#x3D;distances[(clust[i].id,clust[j].id)]</span><br><span class="line">        </span><br><span class="line">                if d&lt;closest:</span><br><span class="line">                    closest&#x3D;d</span><br><span class="line">                    lowestpair&#x3D;(i,j) # 这里是使用第一种方法</span><br><span class="line">        </span><br><span class="line">        # calculate the average of the two clusters</span><br><span class="line">        mergevec&#x3D;[(clust[lowestpair[0]].vec[i]+clust[lowestpair[1]].vec[i])&#x2F;2.0 \</span><br><span class="line">            for i in range(len(clust[0].vec))]</span><br><span class="line">        # 平均距离</span><br><span class="line">        </span><br><span class="line">        # create the new cluster</span><br><span class="line">        newcluster&#x3D;cluster_node(array(mergevec),left&#x3D;clust[lowestpair[0]],</span><br><span class="line">                             right&#x3D;clust[lowestpair[1]],</span><br><span class="line">                             distance&#x3D;closest,id&#x3D;currentclustid)</span><br><span class="line">        </span><br><span class="line">        # cluster ids that weren&#39;t in the original set are negative</span><br><span class="line">        currentclustid-&#x3D;1</span><br><span class="line">        del clust[lowestpair[1]]</span><br><span class="line">        del clust[lowestpair[0]]</span><br><span class="line">        clust.append(newcluster)</span><br><span class="line"></span><br><span class="line">    return clust[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def extract_clusters(clust,dist):</span><br><span class="line">    # extract list of sub-tree clusters from hcluster tree with distance&lt;dist</span><br><span class="line">    clusters &#x3D; &#123;&#125;</span><br><span class="line">    if clust.distance&lt;dist:</span><br><span class="line">        # we have found a cluster subtree</span><br><span class="line">        return [clust] </span><br><span class="line">    else:</span><br><span class="line">        # check the right and left branches</span><br><span class="line">        cl &#x3D; []</span><br><span class="line">        cr &#x3D; []</span><br><span class="line">        if clust.left!&#x3D;None: </span><br><span class="line">            cl &#x3D; extract_clusters(clust.left,dist&#x3D;dist)</span><br><span class="line">        if clust.right!&#x3D;None: </span><br><span class="line">            cr &#x3D; extract_clusters(clust.right,dist&#x3D;dist)</span><br><span class="line">        return cl+cr </span><br><span class="line">        </span><br><span class="line">def get_cluster_elements(clust):</span><br><span class="line">    # return ids for elements in a cluster sub-tree</span><br><span class="line">    if clust.id&gt;&#x3D;0:</span><br><span class="line">        # positive id means that this is a leaf</span><br><span class="line">        return [clust.id]</span><br><span class="line">    else:</span><br><span class="line">        # check the right and left branches</span><br><span class="line">        cl &#x3D; []</span><br><span class="line">        cr &#x3D; []</span><br><span class="line">        if clust.left!&#x3D;None: </span><br><span class="line">            cl &#x3D; get_cluster_elements(clust.left)</span><br><span class="line">        if clust.right!&#x3D;None: </span><br><span class="line">            cr &#x3D; get_cluster_elements(clust.right)</span><br><span class="line">        return cl+cr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printclust(clust,labels&#x3D;None,n&#x3D;0):</span><br><span class="line">    # indent to make a hierarchy layout</span><br><span class="line">    for i in range(n): print &#39; &#39;,</span><br><span class="line">    if clust.id&lt;0:</span><br><span class="line">        # negative id means that this is branch</span><br><span class="line">        print &#39;-&#39;</span><br><span class="line">    else:</span><br><span class="line">        # positive id means that this is an endpoint</span><br><span class="line">        if labels&#x3D;&#x3D;None: print clust.id</span><br><span class="line">        else: print labels[clust.id]</span><br><span class="line">    </span><br><span class="line">    # now print the right and left branches</span><br><span class="line">    if clust.left!&#x3D;None: printclust(clust.left,labels&#x3D;labels,n&#x3D;n+1)</span><br><span class="line">    if clust.right!&#x3D;None: printclust(clust.right,labels&#x3D;labels,n&#x3D;n+1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getheight(clust):</span><br><span class="line">    # Is this an endpoint? Then the height is just 1</span><br><span class="line">    if clust.left&#x3D;&#x3D;None and clust.right&#x3D;&#x3D;None: return 1</span><br><span class="line">    </span><br><span class="line">    # Otherwise the height is the same of the heights of</span><br><span class="line">    # each branch</span><br><span class="line">    return getheight(clust.left)+getheight(clust.right)</span><br><span class="line"></span><br><span class="line">def getdepth(clust):</span><br><span class="line">    # The distance of an endpoint is 0.0</span><br><span class="line">    if clust.left&#x3D;&#x3D;None and clust.right&#x3D;&#x3D;None: return 0</span><br><span class="line">    </span><br><span class="line">    # The distance of a branch is the greater of its two sides</span><br><span class="line">    # plus its own distance</span><br><span class="line">    return max(getdepth(clust.left),getdepth(clust.right))+clust.distance</span><br><span class="line">      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;层次聚类（hierarchical clustering)就是不断把最近的类合并知道达到要求为止。这是一种树形结构&lt;/p&gt;
&lt;p&gt;大致过程：&lt;/</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>K-means</title>
    <link href="http://xinhecuican.github.io/post/766f9b60.html"/>
    <id>http://xinhecuican.github.io/post/766f9b60.html</id>
    <published>2020-07-30T00:18:00.000Z</published>
    <updated>2020-07-30T02:34:24.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>k-means算法属于非监督学习，也就是事先不知道给的数据属于那一类，需要自己去分类。它的基本思想是把数据点密集的一群分成一类。</p><p>具体过程：</p><ol><li>随机选择k个类的初始中心</li><li>在c次迭代中，对任意一个样本，求到各中心点之间的距离，将该样本归类到最近中心的那个类</li><li>使用均值等方法更新中心点。</li><li>如果两次更新匪类相同也结束</li></ol><p>例如划分三个点(1, 1) (2, 3) (4, 6)是一类，那么新的中心点是((1+2+4)/3, (1+3+6)/3),不一定要在原有点上</p><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># Function: K Means</span><br><span class="line"># -------------</span><br><span class="line"># K-Means is an algorithm that takes in a dataset and a constant</span><br><span class="line"># k and returns k centroids (which define clusters of data in the</span><br><span class="line"># dataset which are similar to one another).</span><br><span class="line">def kmeans(X, k, maxIt): # maxIt是初始化次数</span><br><span class="line">    </span><br><span class="line">    numPoints, numDim &#x3D; X.shape</span><br><span class="line">    </span><br><span class="line">    dataSet &#x3D; np.zeros((numPoints, numDim + 1))</span><br><span class="line">    dataSet[:, :-1] &#x3D; X # 初始化赋值</span><br><span class="line">    </span><br><span class="line">    # Initialize centroids randomly</span><br><span class="line">    centroids &#x3D; dataSet[np.random.randint(numPoints, size &#x3D; k), :] # 随机选取中心点</span><br><span class="line">    #centroids &#x3D; dataSet[0:2, :]</span><br><span class="line">    #Randomly assign labels to initial centorid</span><br><span class="line">    centroids[:, -1] &#x3D; range(1, k +1)</span><br><span class="line">    </span><br><span class="line">    # Initialize book keeping vars.</span><br><span class="line">    iterations &#x3D; 0</span><br><span class="line">    oldCentroids &#x3D; None</span><br><span class="line">    </span><br><span class="line">    # Run the main k-means algorithm</span><br><span class="line">    while not shouldStop(oldCentroids, centroids, iterations, maxIt):</span><br><span class="line">        print &quot;iteration: \n&quot;, iterations</span><br><span class="line">        print &quot;dataSet: \n&quot;, dataSet</span><br><span class="line">        print &quot;centroids: \n&quot;, centroids</span><br><span class="line">        # Save old centroids for convergence test. Book keeping.</span><br><span class="line">        oldCentroids &#x3D; np.copy(centroids)</span><br><span class="line">        iterations +&#x3D; 1</span><br><span class="line">        </span><br><span class="line">        # Assign labels to each datapoint based on centroids</span><br><span class="line">        updateLabels(dataSet, centroids)</span><br><span class="line">        </span><br><span class="line">        # Assign centroids based on datapoint labels</span><br><span class="line">        centroids &#x3D; getCentroids(dataSet, k)</span><br><span class="line">        </span><br><span class="line">    # We can get the labels too by calling getLabels(dataSet, centroids)</span><br><span class="line">    return dataSet</span><br><span class="line"># Function: Should Stop</span><br><span class="line"># -------------</span><br><span class="line"># Returns True or False if k-means is done. K-means terminates either</span><br><span class="line"># because it has run a maximum number of iterations OR the centroids</span><br><span class="line"># stop changing.</span><br><span class="line">def shouldStop(oldCentroids, centroids, iterations, maxIt):</span><br><span class="line">    if iterations &gt; maxIt:</span><br><span class="line">        return True</span><br><span class="line">    return np.array_equal(oldCentroids, centroids)  </span><br><span class="line"># Function: Get Labels</span><br><span class="line"># -------------</span><br><span class="line"># Update a label for each piece of data in the dataset. </span><br><span class="line">def updateLabels(dataSet, centroids):</span><br><span class="line">    # For each element in the dataset, chose the closest centroid. </span><br><span class="line">    # Make that centroid the element&#39;s label.</span><br><span class="line">    numPoints, numDim &#x3D; dataSet.shape</span><br><span class="line">    for i in range(0, numPoints):</span><br><span class="line">        dataSet[i, -1] &#x3D; getLabelFromClosestCentroid(dataSet[i, :-1], centroids)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def getLabelFromClosestCentroid(dataSetRow, centroids):</span><br><span class="line">    label &#x3D; centroids[0, -1];</span><br><span class="line">    minDist &#x3D; np.linalg.norm(dataSetRow - centroids[0, :-1])</span><br><span class="line">    for i in range(1 , centroids.shape[0]):</span><br><span class="line">        dist &#x3D; np.linalg.norm(dataSetRow - centroids[i, :-1])</span><br><span class="line">        if dist &lt; minDist:</span><br><span class="line">            minDist &#x3D; dist</span><br><span class="line">            label &#x3D; centroids[i, -1]</span><br><span class="line">    print &quot;minDist:&quot;, minDist</span><br><span class="line">    return label</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"># Function: Get Centroids</span><br><span class="line"># -------------</span><br><span class="line"># Returns k random centroids, each of dimension n.</span><br><span class="line">def getCentroids(dataSet, k): # 算出新的中心点</span><br><span class="line">    # Each centroid is the geometric mean of the points that</span><br><span class="line">    # have that centroid&#39;s label. Important: If a centroid is empty (no points have</span><br><span class="line">    # that centroid&#39;s label) you should randomly re-initialize it.</span><br><span class="line">    result &#x3D; np.zeros((k, dataSet.shape[1]))</span><br><span class="line">    for i in range(1, k + 1):</span><br><span class="line">        oneCluster &#x3D; dataSet[dataSet[:, -1] &#x3D;&#x3D; i, :-1]</span><br><span class="line">        result[i - 1, :-1] &#x3D; np.mean(oneCluster, axis &#x3D; 0)</span><br><span class="line">        result[i - 1, -1] &#x3D; i</span><br><span class="line">    </span><br><span class="line">    return result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">x1 &#x3D; np.array([1, 1])</span><br><span class="line">x2 &#x3D; np.array([2, 1])</span><br><span class="line">x3 &#x3D; np.array([4, 3])</span><br><span class="line">x4 &#x3D; np.array([5, 4])</span><br><span class="line">testX &#x3D; np.vstack((x1, x2, x3, x4))</span><br><span class="line"></span><br><span class="line">result &#x3D; kmeans(testX, 2, 10)</span><br><span class="line">print &quot;final result:&quot;</span><br><span class="line">print result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;k-means算法属于非监督学习，也就是事先不知道给的数据属于那一类，需要自己去分类。它的基本思想是把数据点密集的一群分成一类。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xinhecuican.github.io/post/2ae43b86.html"/>
    <id>http://xinhecuican.github.io/post/2ae43b86.html</id>
    <published>2020-07-29T02:11:49.000Z</published>
    <updated>2020-07-29T02:14:41.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归logistic-regression"><a class="markdownIt-Anchor" href="#逻辑回归logistic-regression"></a> 逻辑回归（logistic regression)</h1><p>非线性回归例子：<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921.PNG" alt="" />.这个例子中的关系不能很好的用线性关系进行模拟，所以我们要另外做曲线模拟它。</p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E6%8B%9F2.PNG" alt="" />为了更好的处理，还需要用sigmoid函数平滑化。</p><p>sigmoid函数图像为 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C7.PNG" alt="" /></p><p>所以预测函数为： <img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%85%B3%E7%B3%BB3.PNG" alt="" /></p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%924.jpg" alt="" /></p><p>我们要求解的问题可以转化成，求解一组参数使得J()最小化。求解方法时求偏导让导数为零。</p><p>当然上面这个方法求解过于复杂，我们也可以使用梯度下降的方法。非线性方程其实就是一个超平面，我们可以求偏导找出梯度，沿着梯度下降的方向不断走就可以找到最低点。</p><p>求解函数为  <img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%925.PNG" alt="" /></p><p>其中a是更新率（learning weight）</p><p>所以求完偏导的结果为：<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%926.PNG" alt="" /></p><p>h(x) = theta * x(i)</p><p>这就是更新函数，我们呢需要重复更新直到收敛</p><h1 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def genData(numPoints,bias,variance):</span><br><span class="line"># 产生实验数据，其中numpoint是实验个数，bias是偏差，variance是方差</span><br><span class="line">    x &#x3D; np.zeros(shape&#x3D;(numPoints,2))</span><br><span class="line">    y &#x3D; np.zeros(shape&#x3D;(numPoints))</span><br><span class="line">    for i in range(0,numPoints):</span><br><span class="line">        x[i][0]&#x3D;1</span><br><span class="line">        x[i][1]&#x3D;i</span><br><span class="line">        y[i]&#x3D;(i+bias)+random.uniform(0,1)+variance</span><br><span class="line">    return x,y</span><br><span class="line"></span><br><span class="line">def gradientDescent(x,y,theta,alpha,m,numIterations):</span><br><span class="line"># alpha是学习率 \ theta是我们要求的，开始可以随意赋值 \ m是实例个数 \ numIterations是重复次数</span><br><span class="line">    xTran &#x3D; np.transpose(x) # 转置，为了好算</span><br><span class="line">    for i in range(numIterations):</span><br><span class="line">        hypothesis &#x3D; np.dot(x,theta) # dot是点积，算出h(x)。这个是一次全更新完</span><br><span class="line">        loss &#x3D; hypothesis-y</span><br><span class="line">        cost &#x3D; np.sum(loss**2)&#x2F;(2*m) # 这个算法和上面讲的有所不同，相当于(h(x)-y(i)) * x(j)求和</span><br><span class="line">        gradient&#x3D;np.dot(xTran,loss)&#x2F;m</span><br><span class="line">        theta &#x3D; theta-alpha*gradient</span><br><span class="line">        print (&quot;Iteration %d | cost :%f&quot; %(i,cost))</span><br><span class="line">    return theta</span><br><span class="line"></span><br><span class="line">x,y &#x3D; genData(100, 25, 10)</span><br><span class="line">print &quot;x:&quot;</span><br><span class="line">print x</span><br><span class="line">print &quot;y:&quot;</span><br><span class="line">print y</span><br><span class="line"></span><br><span class="line">m,n &#x3D; np.shape(x)</span><br><span class="line">n_y &#x3D; np.shape(y)</span><br><span class="line"></span><br><span class="line">print(&quot;m:&quot;+str(m)+&quot; n:&quot;+str(n)+&quot; n_y:&quot;+str(n_y))</span><br><span class="line"></span><br><span class="line">numIterations &#x3D; 100000</span><br><span class="line">alpha &#x3D; 0.0005</span><br><span class="line">theta &#x3D; np.ones(n)</span><br><span class="line">theta&#x3D; gradientDescent(x, y, theta, alpha, m, numIterations)</span><br><span class="line">print(theta)</span><br></pre></td></tr></table></figure><h1 id="使用线性回归还是非线性回归"><a class="markdownIt-Anchor" href="#使用线性回归还是非线性回归"></a> 使用线性回归还是非线性回归</h1><p>在高中已经学过了，如果是一元线性回归的话会使用相关系数r来描述相关性，来决定是否使用线性回归。它的公式是<br /><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%9210.png" alt="" /></p><p>如果是多元线性回归就要用<img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%9211.jpg" alt="" /></p><p>这个公式中第一个yi是估计值，也就是说先要把回归方程求出来再估计相关性。</p><p>但是R^2会受样本量影响，随样本量增大而增大，所以要一个小小的改进。</p><p><img src="/images/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%83%A1%E7%88%BD12.png" alt="" /></p><p>这个方程就是改进后的方程，先把开始的R^2算出来，然后带入，其中N是样本个数，P是维数（自变量个数）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逻辑回归logistic-regression&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#逻辑回归logistic-regression&quot;&gt;&lt;/a&gt; 逻辑回归（logistic regression)&lt;/h1&gt;
&lt;p&gt;非线性回归例子</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性回归</title>
    <link href="http://xinhecuican.github.io/post/40997091.html"/>
    <id>http://xinhecuican.github.io/post/40997091.html</id>
    <published>2020-07-26T00:39:00.000Z</published>
    <updated>2020-07-27T02:33:18.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><p>简单线性回归指的是只有一个x和一个y</p><p>用来描述自变量和因变量及偏差之间关系的模型叫做回归模型</p><p>简单线性回归的模型是：<img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921.png" alt="" /></p><p>b0是截距，b1是斜率，e是偏差。</p><p><strong>关于偏差</strong></p><ul><li>他是一个随机变量，均值是0</li><li>它的方差对于所有自变量x是相同的</li><li>它的值是独立的</li><li>它满足正太分布</li></ul><p>线性回归方程就是少了偏差，其他和基本模型是相同的。</p><p>我们现在给若干x和y，要解决的问题是找出最好的截距和斜率。</p><h1 id="线性回归的求解"><a class="markdownIt-Anchor" href="#线性回归的求解"></a> 线性回归的求解</h1><p>我们要找最能代表趋势的直线，实际上就是要找距离所有点最近的直线。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.PNG" alt="" />我们就是要找一条直线使得这个值最小，其中y^i是用这条直线求出来的估计值，yi是这个点的值。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%923.PNG" alt="" />求解这个问题的数学公式</p><h1 id="多元线性回归"><a class="markdownIt-Anchor" href="#多元线性回归"></a> 多元线性回归</h1><p>它与一元线性回归的区别就是有多个自变量</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%925.PNG" alt="" /> 具体模型求解过程涉及线代高数等内容，这里不再详解。</p><p>使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from numpy import genfromtxt</span><br><span class="line">from sklearn import linear_model</span><br><span class="line"></span><br><span class="line">dataPath &#x3D; r&quot;Delivery.csv&quot;</span><br><span class="line">deliveryData &#x3D; genfromtxt(dataPath,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line"></span><br><span class="line">print &quot;data&quot;</span><br><span class="line">print deliveryData</span><br><span class="line"></span><br><span class="line">x&#x3D; deliveryData[:,:-1]</span><br><span class="line">y &#x3D; deliveryData[:,-1]</span><br><span class="line"></span><br><span class="line">print x</span><br><span class="line">print y</span><br><span class="line"></span><br><span class="line">lr &#x3D; linear_model.LinearRegression() # 模型</span><br><span class="line">lr.fit(x, y)</span><br><span class="line"></span><br><span class="line">print lr</span><br><span class="line"></span><br><span class="line">print(&quot;coefficients:&quot;)</span><br><span class="line">print lr.coef_ # 估计参数 b1,...</span><br><span class="line"></span><br><span class="line">print(&quot;intercept:&quot;)</span><br><span class="line">print lr.intercept_ # b0</span><br><span class="line"></span><br><span class="line">xPredict &#x3D; [102,6]</span><br><span class="line">yPredict &#x3D; lr.predict(xPredict)</span><br><span class="line">print(&quot;predict:&quot;)</span><br><span class="line">print yPredict</span><br></pre></td></tr></table></figure><p>如果是分类型变量，我们需要转化成01再来运算。</p><p>例如男女就是分类型变量。假设一个人是男的，那么可以让它的自变量变成10。如果是女则是01，这样把一个自变量变成多个自变量从而当成数据型变量进行计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;p&gt;简单线性回归指的是只有一个x和一个y&lt;/p&gt;
&lt;p&gt;用来描述自变量和因变量及偏差之间关系的模型叫做回归模型&lt;/p&gt;
&lt;p&gt;简单线性回</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络（NN）</title>
    <link href="http://xinhecuican.github.io/post/7ca31f7.html"/>
    <id>http://xinhecuican.github.io/post/7ca31f7.html</id>
    <published>2020-07-24T02:35:00.000Z</published>
    <updated>2020-08-23T03:25:10.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多层向前神经网络"><a class="markdownIt-Anchor" href="#多层向前神经网络"></a> 多层向前神经网络</h1><p>该神经网络的层数大的有三层：输入层， 隐藏层（隐藏层可以有多层）， 输出层。</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C1.png" alt="" />该图是两层神经网络（输入层不算）</p><p>每层由单元组成（例如决策树算法中的一和零）。输入层就是传入一些特征向量。</p><p><strong>理解</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下一层的神经元可以看成y，然后每个w可以看成k，那么其实就是一条直线。有些层次用来做 &amp;&amp; 或 || 的操作，这样就可以用多条直线对区域进行划分.</span><br></pre></td></tr></table></figure><p>权重： 每两层有线进行连接，线上的数值就是权重，我们是通过特征向量和权重相乘求和再用非线性方程转化得到下一层的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 设计神经网络结构</span><br><span class="line">     3.1 使用神经网络训练数据之前，必须确定神经网络的层数，以及每层单元的个数</span><br><span class="line">     3.2 特征向量在被传入输入层时通常被先标准化(normalize）到0和1之间 （为了加速学习过程）</span><br><span class="line">     3.3 离散型变量可以被编码成每一个输入单元对应一个特征值可能赋的值</span><br><span class="line">          比如：特征值A可能取三个值（a0, a1, a2), 可以使用3个输入单元来代表A。</span><br><span class="line">                    如果A&#x3D;a0, 那么代表a0的单元值就取1, 其他取0；</span><br><span class="line">                    如果A&#x3D;a1, 那么代表a1de单元值就取1，其他取0，以此类推</span><br><span class="line"></span><br><span class="line">     3.4 神经网络即可以用来做分类(classification）问题，也可以解决回归(regression)问题</span><br><span class="line">          3.4.1 对于分类问题，如果是2类，可以用一个输出单元表示（0和1分别代表2类,例如黑和白，不是黑就是白，所以只需要输出一类）</span><br><span class="line">                   如果多于2类，每一个类别用一个输出单元表示</span><br><span class="line">                   所以输入层的单元数量通常等于类别的数量</span><br><span class="line"></span><br><span class="line">          3.4.2 没有明确的规则来设计最好有多少个隐藏层</span><br><span class="line">                    3.4.2.1 根据实验测试和误差，以及准确度来实验并改进</span><br></pre></td></tr></table></figure><p><strong>交叉验证方法</strong></p><p>这是一种验证正确率的方法。例如我们把样例集分成10份，第一次用第一份做测试集，其他做训练集，第二次用第二个做测试集，其他做训练集。这样做十次得到的正确率再求平均值。当然划分不一定是十份。</p><p><strong>神经网络训练大致过程</strong>： 先根据输入确定结果，通过预测结果和真实结果之间的误差反推更新权重。</p><p>开始的时候可以随机的在1到-1之间给权重</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C2.png" alt="" /></p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C3.png" alt="" /></p><p>下面这个式子就是从下一层的计算公式，单元值乘以权重求和然后再加上偏向(oj)</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C4.png" alt="" /></p><p>前面到Bias的部分已经提到了，就是上面那个方程，最后还需要经过一个非线性函数（激活函数）。</p><p>激活函数：</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C5.png" alt="" /></p><p>其中Ij就是前面提到的函数。</p><p>之后反向更新权重：</p><p>对于输出层：<br /><img src="/images/pasted-10.png" alt="" />Tj是输出层标签真实值</p><p>对于隐藏层：<br /><img src="/images/pasted-11.png" alt="" />其中Errk是前面一层的误差</p><p>权重更新：</p><p><img src="/images/pasted-12.png" alt="" /></p><p>l是学习率（learning weight），这是我们手工设置的值，在零到一之间</p><p>偏向更新：<br /><img src="/images/pasted-13.png" alt="upload successful" /></p><p>终止条件：</p><ul><li>权重的更新低于某个阈值</li><li><pre><code>         预测的错误率低于某个阈值</code></pre></li><li><pre><code>         达到预设一定的循环次数</code></pre></li></ul><h2 id="梯度下降算法"><a class="markdownIt-Anchor" href="#梯度下降算法"></a> 梯度下降算法</h2><p>数学中梯度指的是函数关于各个偏导的一个向量，它的意义是指向上升最快的方向。因此负梯度就是下降最快的方向。</p><p>梯度下降算法的基本思想就是沿着梯度每次走一定距离，然后再次计算梯度，重复步骤直到走到最低点。这里的最低点是极值而不是最值</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C14.jpg" alt="" />以二维为例。如果让x在最低点左边。x-梯度（导数），那么x增大，朝着最低点靠近。如果在右边x-梯度，x减小，同样朝着最低点靠近。</p><p>我们是根据loss function来对神经网络进行调整的。而lossfunction的参数就是w和bias，因此可以对w和bias求偏导然后w- 偏导对w进行修正。</p><p><strong>随机梯度下降算法</strong>： 多次随机选取一些样本（mini-batch)，直到所有样例都被选取。</p><h2 id="反向更新"><a class="markdownIt-Anchor" href="#反向更新"></a> 反向更新</h2><p>反向更新利用了梯度下降算法。也就是使用 w = wi - (delta)w的方式进行更新。</p><p>(delta)w = L * 偏Cost / 偏w ， 所以我们的目标就是要求出偏导。</p><p>反向更新主要用到了四个式子。<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C15.PNG" alt="" /></p><p>这几个式子都有证明，这里不详细描述。</p><ul><li>第三个和第四个式子就是偏导，我们看到其中的量可以通过第一个和第二个方程求出来。</li><li>第一个式子是对于输出层来说的。右边第一项指的是cost关于a（预测值）的偏导。这里cost的计算式为 (预测值-实际值)的平方求和再除以2n。因此偏导就是预测值减去实际值。后面一项是激活函数的导数。</li><li>第二个式子是对于其他层。</li></ul><p>这里还有另一种cost <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C16.PNG" alt="" /></p><p>它的偏导数为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C17.PNG" alt="" /> <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C18.PNG" alt="" />.</p><p>这个偏导数好在偏导的大小由a-y决定。a-y其实就是error。 error大，下降就要快。</p><p><strong>推导过程</strong></p><p>其实反向更新就是求偏导 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C27.png" alt="" /><br />这张图表示的是从输出反向推第一个权重，也就是上面的第一个式子。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net &#x3D; w * x + b</span><br><span class="line">out &#x3D; 1 &#x2F; 1 + e^(-net)</span><br><span class="line">∂E &#x2F; ∂out &#x3D; target - out</span><br><span class="line">∂out &#x2F; ∂net &#x3D; net * (1 - net)</span><br><span class="line">∂net &#x2F; ∂w &#x3D; x</span><br><span class="line">∂E &#x2F; ∂w &#x3D; (target - out) * net * (1 - net) * x</span><br></pre></td></tr></table></figure><p>再看另一个例子<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C28.png" alt="" />这里就可以解释为什么有个求和的过程了，到w不只有一条路，而这里多了两个偏导∂outh1 / ∂neth1 和 ∂neth1 / ∂w1.这里的数值和前面是一样的。</p><p>有一点和前面不同，前面是∂E / ∂w，这里是∂E / ∂outh1。所以前面最后乘了一个x而这里乘了一个w。</p><h2 id="非线性转化函数"><a class="markdownIt-Anchor" href="#非线性转化函数"></a> 非线性转化函数</h2><p>激活函数一般使用S型曲线（sigmoid）。一般是双曲函数(tanh)或逻辑函数。</p><p>广义上的sigmoid函数需要在-1到1之间变化并且平滑。</p><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C7.PNG" alt="" /></p><p><strong>双曲函数</strong>：</p><p>tanhx = sinhx/coshx =</p><p>sinhx = (e^x - e^(-x))/2 、 coshx = (e^x + e^(-x)) / 2</p><p>导数： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C10.PNG" alt="" /></p><p>图像为：<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C8.PNG" alt="" /></p><p><strong>逻辑函数</strong></p><p>p(t) = 1/(1 + e^(-t))</p><p>导数： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C11.PNG" alt="" /></p><p>图像为： <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C9.PNG" alt="" /></p><h2 id="减小overfitting"><a class="markdownIt-Anchor" href="#减小overfitting"></a> 减小overfitting</h2><ol><li><p>增加训练数据集</p></li><li><p>减神经网络的规模</p></li><li><p>regularization <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C21.PNG" alt="" />.这是一个例子，后面一项也可以应用于其他cost函数中。加了这一项后神经网络会倾向于学习较小的权重,更少可能受到局部噪音影响<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C22.PNG" alt="" />w的更新也有变化<br /><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C23.PNG" alt="" /> nameda随着n的变化而变化，目的是不让比值太小从而使作用失效</p><p>另一种regularization函数 <img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C24.PNG" alt="" />它的偏导数为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C25.PNG" alt="" />注意当w=0时，w不可导，所以直接使用没有regularization的。</p></li><li><ol start="3"><li>DropOut： 防止过拟合。具体方法时让需要dropout的层的百分之p的神经元关闭（即让需要关闭的神经元值为0）。然后多次随机剔除，最后再把权重除以p</li></ol></li><li><p><strong>softmax</strong></p></li></ol><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C19.PNG" alt="" /></p><p>这个函数有一些独特的性质。例如zj增大，那么对应输出增大，其他输出减小。并且同一层所有输出值的和一定是1，可以用来模拟概率。所以经常用在输出层当做概率</p><p>对应我们可以定义一个新的cost函数 Cost(p,q)=−∑xp(x)logq(x)， 其中p是真实值，q是估计值. 它的偏导为<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C20.PNG" alt="" />这个偏导和上面的cross-entropy类似。</p><h1 id="卷积神经网络"><a class="markdownIt-Anchor" href="#卷积神经网络"></a> 卷积神经网络</h1><p>卷积神经网络对隐藏层进行了细分，常用于对图像处理。</p><ul><li>input layer： 还需要对输入数据进行一些处理，如减去均值（只需要使用训练集上均值，测试集也是使用训练集均值）</li><li>卷积计算层（CONV layer）： 通过一个窗口进行移动然后再和w矩阵进行点乘过滤一些信息。有三个主要参数，深度，步长和填充值。深度指的是下一层神经元数目，步长指的是窗口一次移动的长度，填充值是为了防止移动超出范围在周围补的一圈零。</li></ul><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C6.PNG" alt="" />这里深度是2，步长是2，填充值是1.其中最右边绿色就是输出。它是通过左边蓝色的窗口和红色的w进行点乘然后相加得到的。有三层是因为输入一个32 * 32 * 3（RGB）的矩阵，然后通过运算可以得到输出矩阵。</p><ul><li>激励层： 将卷积层结果进行非线性映射，典型的激励函数是ReLu，sigmoid函数其实很少用了，因为在数据比较大的时候导数趋近于0，难以训练。</li></ul><p>ReLu方程式 y = max(0, x).也就是小于0时y=0，大于0时y=x。但是这个函数问题是小于0时导数=0，也无法训练。因此改进是小于0时y=0.01x</p><ul><li>池化层（pooling layer): 池化层一般夹在连续的卷积层中间，它是用来压缩数据量，减少过拟合。方法是max pooling。也是通过一个窗口，每次去窗口中的最大值形成一个矩阵。</li></ul><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C12.PNG" alt="" />由原来的4 * 4矩阵变成2 * 2矩阵</p><ul><li>全连接层： 该层和前一层之间一般所有神经元都有权重连接，一般是放在神经网络尾部，是用来防止信息丢失太多的。</li></ul><p><strong>注意点</strong></p><ol><li><p>权重初始化： 使用高斯函数（正态分布）去随机初始化可以让权重随机化。也就是numpy.random.randn(in, out) / np.sqrt(in/2). in是输入层个数，out是输出层个数</p></li><li><p>Batch Normalization: 它是用来减少初始值依赖的，通常在全连接层之后。具体算法<img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C13.PNG" alt="" />其中y和b是神经网络自己学习的。</p></li></ol><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><p>通过前面逻辑函数的导数可以得知，前面权重更新其实就是运用激活函数的导数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def tanh(x):</span><br><span class="line">    return np.tanh(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def tanh_deriv(x): # 导数</span><br><span class="line">    return 1.0 - np.tanh(x)*np.tanh(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logistic(x):</span><br><span class="line">    return 1&#x2F;(1 + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logistic_derivative(x): # 导数</span><br><span class="line">    return logistic(x)*(1-logistic(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NeuralNetwork:</span><br><span class="line">    def __init__(self, layers, activation&#x3D;&#39;tanh&#39;):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param layers: A list containing the number of units in each layer.</span><br><span class="line">        Should be at least two values</span><br><span class="line">        :param activation: The activation function to be used. Can be</span><br><span class="line">        &quot;logistic&quot; or &quot;tanh&quot;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # layers是一个列表，代表输入层，隐藏层和输出层，列表中每个数字代表隐藏层中单元的数目，列表长度代表总共有多少层</span><br><span class="line">        if activation &#x3D;&#x3D; &#39;logistic&#39;:</span><br><span class="line">            self.activation &#x3D; logistic</span><br><span class="line">            self.activation_deriv &#x3D; logistic_derivative</span><br><span class="line">        elif activation &#x3D;&#x3D; &#39;tanh&#39;:</span><br><span class="line">            self.activation &#x3D; tanh</span><br><span class="line">            self.activation_deriv &#x3D; tanh_deriv</span><br><span class="line"></span><br><span class="line">        self.weights &#x3D; [] # 初始化一个列表来装所有的weight，这后来是一个三重矩阵</span><br><span class="line">        for i in range(1, len(layers) - 1): # 随机初始化weight</span><br><span class="line">            self.weights.append((2*np.random.random((layers[i - 1] + 1, layers[i] + 1))-1)*0.25) # 生成一个layers[i-1]+1行，layer[i]+1列的范围在-0.25到0.25的矩阵</span><br><span class="line">            self.weights.append((2*np.random.random((layers[i] + 1, layers[i + 1]))-1)*0.25) # 第i层到第i+1层之间</span><br><span class="line"></span><br><span class="line">    def fit(self, X, y, learning_rate&#x3D;0.2, epochs&#x3D;10000):</span><br><span class="line">    # epochs是训练次数（循环次数）</span><br><span class="line">        X &#x3D; np.atleast_2d(X)</span><br><span class="line">        temp &#x3D; np.ones([X.shape[0], X.shape[1]+1])# 初始化一个矩阵，值全是一，行数和列数由参数提供</span><br><span class="line">        temp[:, 0:-1] &#x3D; X  # adding the bias unit to the input layer</span><br><span class="line">        X &#x3D; temp</span><br><span class="line">        y &#x3D; np.array(y)</span><br><span class="line"></span><br><span class="line">        for k in range(epochs):</span><br><span class="line">            i &#x3D; np.random.randint(X.shape[0])</span><br><span class="line">            a &#x3D; [X[i]]</span><br><span class="line"></span><br><span class="line">            for l in range(len(self.weights)):  #going forward network, for each layer</span><br><span class="line">                a.append(self.activation(np.dot(a[l], self.weights[l])))  #Computer the node value for each layer (O_i) using activation function</span><br><span class="line">              #正向所有更新</span><br><span class="line">            error &#x3D; y[i] - a[-1]  #Computer the error at the top layer</span><br><span class="line">            deltas &#x3D; [error * self.activation_deriv(a[-1])] #For output layer, Err calculation (delta is updated error)</span><br><span class="line"></span><br><span class="line">            #Staring backprobagation</span><br><span class="line">            for l in range(len(a) - 2, 0, -1): # we need to begin at the second to last layer</span><br><span class="line">                #Compute the updated error (i,e, deltas) for each node going from top layer to input layer</span><br><span class="line"></span><br><span class="line">                deltas.append(deltas[-1].dot(self.weights[l].T)*self.activation_deriv(a[l]))</span><br><span class="line">            deltas.reverse()</span><br><span class="line">            for i in range(len(self.weights)):</span><br><span class="line">                layer &#x3D; np.atleast_2d(a[i])</span><br><span class="line">                delta &#x3D; np.atleast_2d(deltas[i])</span><br><span class="line">                self.weights[i] +&#x3D; learning_rate * layer.T.dot(delta)</span><br><span class="line"></span><br><span class="line">    def predict(self, x):</span><br><span class="line">        x &#x3D; np.array(x)</span><br><span class="line">        temp &#x3D; np.ones(x.shape[0]+1)</span><br><span class="line">        temp[0:-1] &#x3D; x</span><br><span class="line">        a &#x3D; temp</span><br><span class="line">        for l in range(0, len(self.weights)):</span><br><span class="line">            a &#x3D; self.activation(np.dot(a, self.weights[l]))</span><br><span class="line">        return a</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多层向前神经网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多层向前神经网络&quot;&gt;&lt;/a&gt; 多层向前神经网络&lt;/h1&gt;
&lt;p&gt;该神经网络的层数大的有三层：输入层， 隐藏层（隐藏层可以有多层）， 输出层。&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>支持向量机</title>
    <link href="http://xinhecuican.github.io/post/280b588e.html"/>
    <id>http://xinhecuican.github.io/post/280b588e.html</id>
    <published>2020-07-21T02:39:00.000Z</published>
    <updated>2020-08-05T00:59:34.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h1><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA1.png" alt="" /></p><p>上图中黑色和白色的点分别代表一类事物，我们想用一条直线把这两类事物区分开，显而易见红线区分最好，那么为什么红线区分最好呢？</p><p>这里引入了一个概念，边际。边际指的是做一个超平面，使得两侧离的最近的点的距离。</p><p>如何选取使边际(margin)最大的超平面 (Max Margin Hyperplane)？</p><p>超平面到一侧最近点的距离等于到另一侧最近点的距离，两侧的两个超平面平行。</p><h1 id="选取最大超平面"><a class="markdownIt-Anchor" href="#选取最大超平面"></a> 选取最大超平面</h1><p>超平面可以定义为： W * X + b = 0</p><p>W是一个类似于权重的向量， X是我们给出的实例的特征向量， b是偏好</p><p>超平面方程也可以写成<img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA2.png" alt="" />这是二维的，b也就是w0.</p><p>上方的点满足大于零，下方的点小于零</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA4.png" alt="" /></p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA3.png" alt="" /></p><p>H1就是上边界，也就是两个图中上面的这条线，至于为什么后面是1？这只是用来区分上边界还是下边界，可以通过w0进行调节。我们输入其实就是(x1,x2,…, yi)，yi就是类别标记</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA5.png" alt="" />两个公式可以合并</p><p>在边界上的点叫做<strong>支持向量</strong></p><p>我们可以得出一个结论：<strong>分界的超平面和H1/H2之间的距离是1/||W||</strong>。</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA6.png" alt="" />也就是先平方再开方</p><p>所以最大边界距离是2/||W||</p><p>所以我们要找2/||W||最大值，也就是找w的最小值。所以我们需要找的是：</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA9.PNG" alt="" /></p><p>用1/2平方是因为好算</p><p>之后运用拉格朗日函数，KKT算法等得到了最大超平面方程</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA10.PNG" alt="" />.其中a和b是通过计算过程得出，暂时不清楚具体情况</p><h1 id="python使用"><a class="markdownIt-Anchor" href="#python使用"></a> python使用</h1> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> from sklearn import svm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x &#x3D; [[2, 0], [1, 1], [2, 3]] # 特征向量</span><br><span class="line">y &#x3D; [0, 0, 1] # yi</span><br><span class="line">clf &#x3D; svm.SVC(kernel &#x3D; &#39;linear&#39;)</span><br><span class="line">clf.fit(x, y)</span><br><span class="line"></span><br><span class="line">print clf</span><br><span class="line"></span><br><span class="line"># get support vectors</span><br><span class="line">print clf.support_vectors_</span><br><span class="line"></span><br><span class="line"># get indices of support vectors</span><br><span class="line">print clf.support_ # 支持向量点的索引</span><br><span class="line"></span><br><span class="line"># get number of support vectors for each class </span><br><span class="line">print clf.n_support_ # 每个类中有几个支持向量，yi所代表的类</span><br></pre></td></tr></table></figure><p>把结果画出来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pylab as pl</span><br><span class="line">from sklearn import svm</span><br><span class="line"></span><br><span class="line"># we create 40 separable points</span><br><span class="line">X &#x3D; np.r_[np.random.randn(20, 2) - [2, 2], np.random.randn(20, 2) + [2, 2]]</span><br><span class="line">Y &#x3D; [0]*20 +[1]*20</span><br><span class="line"></span><br><span class="line">#fit the model</span><br><span class="line">clf &#x3D; svm.SVC(kernel&#x3D;&#39;linear&#39;)</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line"></span><br><span class="line"># get the separating hyperplane</span><br><span class="line">w &#x3D; clf.coef_[0] # 获得w</span><br><span class="line">a &#x3D; -w[0]&#x2F;w[1] # 斜率</span><br><span class="line">xx &#x3D; np.linspace(-5, 5)</span><br><span class="line">yy &#x3D; a*xx - (clf.intercept_[0])&#x2F;w[1] # 截距</span><br><span class="line"></span><br><span class="line"># plot the parallels to the separating hyperplane that pass through the support vectors</span><br><span class="line">b &#x3D; clf.support_vectors_[0]</span><br><span class="line">yy_down &#x3D; a*xx + (b[1] - a*b[0])</span><br><span class="line">b &#x3D; clf.support_vectors_[-1]</span><br><span class="line">yy_up &#x3D; a*xx + (b[1] - a*b[0]) </span><br><span class="line"></span><br><span class="line">print &quot;w: &quot;, w</span><br><span class="line">print &quot;a: &quot;, a</span><br><span class="line"></span><br><span class="line"># print &quot;xx: &quot;, xx</span><br><span class="line"># print &quot;yy: &quot;, yy</span><br><span class="line">print &quot;support_vectors_: &quot;, clf.support_vectors_</span><br><span class="line">print &quot;clf.coef_: &quot;, clf.coef_</span><br><span class="line"></span><br><span class="line"># switching to the generic n-dimensional parameterization of the hyperplan to the 2D-specific equation</span><br><span class="line"># of a line y&#x3D;a.x +b: the generic w_0x + w_1y +w_3&#x3D;0 can be rewritten y &#x3D; -(w_0&#x2F;w_1) x + (w_3&#x2F;w_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># plot the line, the points, and the nearest vectors to the plane</span><br><span class="line">pl.plot(xx, yy, &#39;k-&#39;)</span><br><span class="line">pl.plot(xx, yy_down, &#39;k--&#39;)</span><br><span class="line">pl.plot(xx, yy_up, &#39;k--&#39;)</span><br><span class="line"></span><br><span class="line">pl.scatter(clf.support_vectors_[:, 0], clf.support_vectors_[:, 1],</span><br><span class="line">          s&#x3D;80, facecolors&#x3D;&#39;none&#39;)</span><br><span class="line">pl.scatter(X[:, 0], X[:, 1], c&#x3D;Y, cmap&#x3D;pl.cm.Paired)</span><br><span class="line"></span><br><span class="line">pl.axis(&#39;tight&#39;)</span><br><span class="line">pl.show()</span><br></pre></td></tr></table></figure><h1 id="线性不可分的情况"><a class="markdownIt-Anchor" href="#线性不可分的情况"></a> 线性不可分的情况</h1><p>要解决线性不可分的情况首先要看一个例子。</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA8.jpg" alt="" /></p><p>如图，左边明显不可分，但是投影到右边就可分了。因此解决线性不可分的基本思想就是投影到更高的维度。所以现在问题关键成了建立一个映射函数正确的映射到高维，然后找到超平面后再还原回原空间就可以找到超平面（其实现在超平面在原空间中是一个曲面）</p><p>核函数是为了把数据从低维到高维和减小运算量而使用的。</p><p><img src="/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA11.PNG" alt="" /></p><p>如果我们先解决多个类的问题，我们可以每次分成这个类和其他类，然后不断求解</p><h1 id="人脸识别例子"><a class="markdownIt-Anchor" href="#人脸识别例子"></a> 人脸识别例子</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">from time import time</span><br><span class="line">import logging</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">from sklearn.cross_validation import train_test_split</span><br><span class="line">from sklearn.datasets import fetch_lfw_people</span><br><span class="line">from sklearn.grid_search import GridSearchCV</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line">from sklearn.metrics import confusion_matrix</span><br><span class="line">from sklearn.decomposition import RandomizedPCA</span><br><span class="line">from sklearn.svm import SVC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(__doc__)</span><br><span class="line"></span><br><span class="line"># Display progress logs on stdout</span><br><span class="line">logging.basicConfig(level&#x3D;logging.INFO, format&#x3D;&#39;%(asctime)s %(message)s&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Download the data, if not already on disk and load it as numpy arrays</span><br><span class="line"></span><br><span class="line">lfw_people &#x3D; fetch_lfw_people(min_faces_per_person&#x3D;70, resize&#x3D;0.4) #下载人脸</span><br><span class="line"></span><br><span class="line"># introspect the images arrays to find the shapes (for plotting)</span><br><span class="line">n_samples, h, w &#x3D; lfw_people.images.shape</span><br><span class="line"></span><br><span class="line"># for machine learning we use the 2 data directly (as relative pixel</span><br><span class="line"># positions info is ignored by this model)</span><br><span class="line">X &#x3D; lfw_people.data # 特征向量</span><br><span class="line">n_features &#x3D; X.shape[1] #有多少列</span><br><span class="line"></span><br><span class="line"># the label to predict is the id of the person</span><br><span class="line">y &#x3D; lfw_people.target # 类</span><br><span class="line">target_names &#x3D; lfw_people.target_names # 所挑选的图片的人名</span><br><span class="line">n_classes &#x3D; target_names.shape[0] # 有多少行</span><br><span class="line"></span><br><span class="line">print(&quot;Total dataset size:&quot;)</span><br><span class="line">print(&quot;n_samples: %d&quot; % n_samples)</span><br><span class="line">print(&quot;n_features: %d&quot; % n_features)</span><br><span class="line">print(&quot;n_classes: %d&quot; % n_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Split into a training set and a test set using a stratified k fold</span><br><span class="line"></span><br><span class="line"># split into a training and testing set</span><br><span class="line">X_train, X_test, y_train, y_test &#x3D; train_test_split(</span><br><span class="line">    X, y, test_size&#x3D;0.25)</span><br><span class="line"># train_test_split把实例分成训练集和测试集</span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Compute a PCA (eigenfaces) on the face dataset (treated as unlabeled</span><br><span class="line"># dataset): unsupervised feature extraction &#x2F; dimensionality reduction</span><br><span class="line">n_components &#x3D; 150</span><br><span class="line"></span><br><span class="line">print(&quot;Extracting the top %d eigenfaces from %d faces&quot;</span><br><span class="line">      % (n_components, X_train.shape[0]))</span><br><span class="line">t0 &#x3D; time()</span><br><span class="line">pca &#x3D; RandomizedPCA(n_components&#x3D;n_components, whiten&#x3D;True).fit(X_train)</span><br><span class="line">print(&quot;done in %0.3fs&quot; % (time() - t0)) # RandomizedPCA使用来降维的，因为这个维度抬高难以计算</span><br><span class="line"></span><br><span class="line">eigenfaces &#x3D; pca.components_.reshape((n_components, h, w))</span><br><span class="line"></span><br><span class="line">print(&quot;Projecting the input data on the eigenfaces orthonormal basis&quot;)</span><br><span class="line">t0 &#x3D; time()</span><br><span class="line">X_train_pca &#x3D; pca.transform(X_train)</span><br><span class="line">X_test_pca &#x3D; pca.transform(X_test)</span><br><span class="line">print(&quot;done in %0.3fs&quot; % (time() - t0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Train a SVM classification model</span><br><span class="line"></span><br><span class="line">print(&quot;Fitting the classifier to the training set&quot;)</span><br><span class="line">t0 &#x3D; time()</span><br><span class="line">param_grid &#x3D; &#123;&#39;C&#39;: [1e3, 5e3, 1e4, 5e4, 1e5],</span><br><span class="line">              &#39;gamma&#39;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], &#125;</span><br><span class="line">clf &#x3D; GridSearchCV(SVC(kernel&#x3D;&#39;rbf&#39;, class_weight&#x3D;&#39;auto&#39;), param_grid)#核函数kernel， GridSearchCV是用来寻找最好的参数比例</span><br><span class="line">clf &#x3D; clf.fit(X_train_pca, y_train)</span><br><span class="line">print(&quot;done in %0.3fs&quot; % (time() - t0))</span><br><span class="line">print(&quot;Best estimator found by grid search:&quot;)</span><br><span class="line">print(clf.best_estimator_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Quantitative evaluation of the model quality on the test set</span><br><span class="line"></span><br><span class="line">print(&quot;Predicting people&#39;s names on the test set&quot;)</span><br><span class="line">t0 &#x3D; time()</span><br><span class="line">y_pred &#x3D; clf.predict(X_test_pca)</span><br><span class="line">print(&quot;done in %0.3fs&quot; % (time() - t0))</span><br><span class="line"></span><br><span class="line">print(classification_report(y_test, y_pred, target_names&#x3D;target_names))</span><br><span class="line">print(confusion_matrix(y_test, y_pred, labels&#x3D;range(n_classes)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Qualitative evaluation of the predictions using matplotlib</span><br><span class="line"></span><br><span class="line">def plot_gallery(images, titles, h, w, n_row&#x3D;3, n_col&#x3D;4):</span><br><span class="line">    &quot;&quot;&quot;Helper function to plot a gallery of portraits&quot;&quot;&quot;</span><br><span class="line">    plt.figure(figsize&#x3D;(1.8 * n_col, 2.4 * n_row))</span><br><span class="line">    plt.subplots_adjust(bottom&#x3D;0, left&#x3D;.01, right&#x3D;.99, top&#x3D;.90, hspace&#x3D;.35)</span><br><span class="line">    for i in range(n_row * n_col):</span><br><span class="line">        plt.subplot(n_row, n_col, i + 1)</span><br><span class="line">        plt.imshow(images[i].reshape((h, w)), cmap&#x3D;plt.cm.gray)</span><br><span class="line">        plt.title(titles[i], size&#x3D;12)</span><br><span class="line">        plt.xticks(())</span><br><span class="line">        plt.yticks(())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># plot the result of the prediction on a portion of the test set</span><br><span class="line"></span><br><span class="line">def title(y_pred, y_test, target_names, i):</span><br><span class="line">    pred_name &#x3D; target_names[y_pred[i]].rsplit(&#39; &#39;, 1)[-1]</span><br><span class="line">    true_name &#x3D; target_names[y_test[i]].rsplit(&#39; &#39;, 1)[-1]</span><br><span class="line">    return &#39;predicted: %s\ntrue:      %s&#39; % (pred_name, true_name)</span><br><span class="line"></span><br><span class="line">prediction_titles &#x3D; [title(y_pred, y_test, target_names, i)</span><br><span class="line">                     for i in range(y_pred.shape[0])]</span><br><span class="line"></span><br><span class="line">plot_gallery(X_test, prediction_titles, h, w)</span><br><span class="line"></span><br><span class="line"># plot the gallery of the most significative eigenfaces</span><br><span class="line"></span><br><span class="line">eigenface_titles &#x3D; [&quot;eigenface %d&quot; % i for i in range(eigenfaces.shape[0])]</span><br><span class="line">plot_gallery(eigenfaces, eigenface_titles, h, w)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引入&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引入&quot;&gt;&lt;/a&gt; 引入&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA1.png&quot; al</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>KNN算法</title>
    <link href="http://xinhecuican.github.io/post/94ceb2fd.html"/>
    <id>http://xinhecuican.github.io/post/94ceb2fd.html</id>
    <published>2020-07-21T00:26:00.000Z</published>
    <updated>2020-07-22T12:15:04.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大致步骤"><a class="markdownIt-Anchor" href="#大致步骤"></a> 大致步骤</h1><p>KNN是最临近规则分类算法。</p><p>为了判断未知分类，我们需要用已知分类进行参照。</p><ol><li>选择参照物个数k。 k的取值一般都比较小，可以是1,3,5,7等数，通过实验得知哪个比较好就用哪个。一般用奇数，避免两边数目相同</li><li>选择最近的k个实例然后看他们都属于哪个类，让这个实例成为数目最多的实例。</li></ol><p><strong>距离衡量方法</strong></p><ol><li>EUclidean Distance方法。和距离公式类似，对应特征值相减平方再开根号。<img src="/images/KNN1.PNG" alt="" /></li></ol><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn import neighbors</span><br><span class="line">from sklearn import datasets # 这个库中自带一些有名的数据集</span><br><span class="line"></span><br><span class="line">knn &#x3D; neighbors.KNeighborsClassifier() # 创建分类器</span><br><span class="line"></span><br><span class="line">iris &#x3D; datasets.load_iris() # 导入数据集</span><br><span class="line">knn.fit(iris.data, iris.target)</span><br><span class="line">predictedLabel &#x3D; knn.predict([[0.1, 0.2, 0.3, 0.4]])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大致步骤&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#大致步骤&quot;&gt;&lt;/a&gt; 大致步骤&lt;/h1&gt;
&lt;p&gt;KNN是最临近规则分类算法。&lt;/p&gt;
&lt;p&gt;为了判断未知分类，我们需要用已知分类进行参照。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择参照物个数</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>决策树算法</title>
    <link href="http://xinhecuican.github.io/post/ef296a07.html"/>
    <id>http://xinhecuican.github.io/post/ef296a07.html</id>
    <published>2020-07-19T02:42:00.000Z</published>
    <updated>2020-07-19T10:51:38.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> 基本结构</h1><p>决策树是一个类似流程图的树形结构：其中，每个节点表示在一个属性上的测试。每个分支表示一个输出，每个树叶节点代表类或类的分布。</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%91.PNG" alt="" /></p><p>上面这个例子中play和don’t play是结果，表示玩还是不玩。然后不是叶结点的节点都有一个问号，例如第一个outlook询问的是天气，后面还有湿度和是否刮风。通过这些条件得到了叶节点，叶结点都是只包含一种情况，要么是play要么是don’t play</p><p>熵： 不确定性的多少，越不确定的信息信息熵越大。</p><p>我们可以用比特(bit)来衡量信息的多少。公式为每种事情的概率* 以二为底该事情概率的对数。</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%912.PNG" alt="" />.变量不确定性越大，熵也就越大。</p><p>例如，我们想要知道世界杯谁会夺冠，我们可以从往届比赛中得知每个球队夺冠的大致概率，然后从而推测出bit的大小。</p><h1 id="决策树归纳算法id3"><a class="markdownIt-Anchor" href="#决策树归纳算法id3"></a> 决策树归纳算法（ID3）</h1><p>决策树适合小规模，类别比较少的数据集。</p><p>我们通过什么确定该节点应该是什么问题呢?</p><p>信息获取量 Gain(A) = info(D) - info_A(D)</p><p>info(D)表示只考虑结果时信息量（bit值）。 info_A(D)表示考虑A后的信息量</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%913.PNG" alt="" /></p><p>上面这个例子中，后面age的计算是该种类的概率（如5/14或4/14等）* 在这个种类里的信息获取量。上面青年有五种，然后求得五种里买电脑或者不买电脑的信息获取量。</p><p>最后可以求得gain，然后选取gain最大的作为该节点。 通过划分后如果只有一种目标，那么划分结束，如果有多种目标，那么重新用这种方法选取gain最大的。</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%914.PNG" alt="" /></p><p>如果所有属性都用完了，那么采用多数表决，即哪个结果多就把它划分成哪个类。例如最后所有属性都使用了一遍，最后三人买电脑，两人不买电脑，那么最后就把它划分成买电脑类。</p><p>如果分的太细也可能出现问题。所以有时候达到一定纯度就不再往下分。还可以先全部分完然后再剪。</p><h1 id="运用"><a class="markdownIt-Anchor" href="#运用"></a> 运用</h1><p>python中有一个scikit-learn库包含了决策树。</p><p>首先sklearn要求输入的属性值必须是数值型的值而不能是young，old之类模糊的数据。</p><p>具体可以变成由0和1组成的集合。例如假如是young，那么按照young Middle old排列的话取值是100，如果是middle那么就是010.</p><p>所有特征值形成了一串0和1,以这个作为输入。</p><p>python中提供了一个函数可以直接把属性转化成01， 他叫DictVectorizer(),使用它的条件是我们把属性转化成了一个列表（所有样例构成一个列表，但是单个样例可以用字典进行描述)</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%915.PNG" alt="" />这是上例所形成的列表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vec &#x3D; DictVectorizer()</span><br><span class="line">dummyx &#x3D; vec.fit_transform(featurelist).toarray()</span><br></pre></td></tr></table></figure><p>输出<br /><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%916.PNG" alt="" /></p><p>这是对于特征值的，对于目标标记也有专门的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lb &#x3D; processing.LabelBinarizer()</span><br><span class="line">dummyY &#x3D; lb.fit_transform(labellist)</span><br></pre></td></tr></table></figure><p><strong>创建分类器</strong></p><p>前面都是对数据进行预处理，预处理完毕之后我们就要把它转换成决策树模型了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clf &#x3D; tree.DecesionTreeClassifier(criterion &#x3D; &#39;entropy&#39;) #criterion是使用的决策树算法，具体可以看文档</span><br><span class="line">ans &#x3D; clf.fit(dummyX, dummyY)</span><br></pre></td></tr></table></figure><p><strong>可视化</strong></p><p>虽然我们产生了结果，但是结果非常不直观，我们可以用graphviz将结果变成上面看到的图。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&quot;allElectronicInformationGainOri.dot&quot;, &#39;w&#39;) as f:</span><br><span class="line">    f &#x3D; tree.export_graphviz(clf, feature_names&#x3D;vec.get_feature_names(), out_file&#x3D;f) # feature_names是属性的名字，因为在形成决策树过程中全变成0和1了</span><br></pre></td></tr></table></figure><p>通过这两行代码可以把结果输出到文件中<img src="/images/%E5%86%B3%E7%AD%96%E6%A0%917.PNG" alt="" />可以看到结果非常不直观，因此我们还需用graphviz进一步转化。</p><p>在cmd中输入<code>dot -Tpdf iris.dot -o output.pdf</code> iris.dot是原始文件的路径，-o是输出文件名</p><p><img src="/images/%E5%86%B3%E7%AD%96%E6%A0%918.PNG" alt="" /></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_extraction import DictVectorizer</span><br><span class="line">import csv</span><br><span class="line">from sklearn import tree</span><br><span class="line">from sklearn import preprocessing</span><br><span class="line">from sklearn.externals.six import StringIO</span><br><span class="line"></span><br><span class="line"># Read in the csv file and put features into list of dict and list of class label</span><br><span class="line">allElectronicsData &#x3D; open(r&#39;&#x2F;home&#x2F;zhoumiao&#x2F;MachineLearning&#x2F;01decisiontree&#x2F;AllElectronics.csv&#39;, &#39;rb&#39;)</span><br><span class="line">reader &#x3D; csv.reader(allElectronicsData)</span><br><span class="line">headers &#x3D; reader.next()</span><br><span class="line"></span><br><span class="line">print(headers)</span><br><span class="line"></span><br><span class="line">featureList &#x3D; []</span><br><span class="line">labelList &#x3D; []</span><br><span class="line"></span><br><span class="line">for row in reader:</span><br><span class="line">    labelList.append(row[len(row)-1])</span><br><span class="line">    rowDict &#x3D; &#123;&#125;</span><br><span class="line">    for i in range(1, len(row)-1):</span><br><span class="line">        rowDict[headers[i]] &#x3D; row[i]</span><br><span class="line">    featureList.append(rowDict)</span><br><span class="line"></span><br><span class="line">print(featureList)</span><br><span class="line"></span><br><span class="line"># Vetorize features</span><br><span class="line">vec &#x3D; DictVectorizer()</span><br><span class="line">dummyX &#x3D; vec.fit_transform(featureList) .toarray()</span><br><span class="line"></span><br><span class="line">print(&quot;dummyX: &quot; + str(dummyX))</span><br><span class="line">print(vec.get_feature_names())</span><br><span class="line"></span><br><span class="line">print(&quot;labelList: &quot; + str(labelList))</span><br><span class="line"></span><br><span class="line"># vectorize class labels</span><br><span class="line">lb &#x3D; preprocessing.LabelBinarizer()</span><br><span class="line">dummyY &#x3D; lb.fit_transform(labelList)</span><br><span class="line">print(&quot;dummyY: &quot; + str(dummyY))</span><br><span class="line"></span><br><span class="line"># Using decision tree for classification</span><br><span class="line"># clf &#x3D; tree.DecisionTreeClassifier()</span><br><span class="line">clf &#x3D; tree.DecisionTreeClassifier(criterion&#x3D;&#39;entropy&#39;)</span><br><span class="line">clf &#x3D; clf.fit(dummyX, dummyY)</span><br><span class="line">print(&quot;clf: &quot; + str(clf))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Visualize model</span><br><span class="line">with open(&quot;allElectronicInformationGainOri.dot&quot;, &#39;w&#39;) as f:</span><br><span class="line">    f &#x3D; tree.export_graphviz(clf, feature_names&#x3D;vec.get_feature_names(), out_file&#x3D;f)</span><br><span class="line"></span><br><span class="line">oneRowX &#x3D; dummyX[0, :]</span><br><span class="line">print(&quot;oneRowX: &quot; + str(oneRowX))</span><br><span class="line"></span><br><span class="line">newRowX &#x3D; oneRowX</span><br><span class="line">newRowX[0] &#x3D; 1</span><br><span class="line">newRowX[2] &#x3D; 0</span><br><span class="line">print(&quot;newRowX: &quot; + str(newRowX))</span><br><span class="line"></span><br><span class="line">predictedY &#x3D; clf.predict(newRowX) # 创建一个新的节点然后预测</span><br><span class="line">print(&quot;predictedY: &quot; + str(predictedY))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本结构&quot;&gt;&lt;/a&gt; 基本结构&lt;/h1&gt;
&lt;p&gt;决策树是一个类似流程图的树形结构：其中，每个节点表示在一个属性上的测试。每个分支表示一个输出，每个树叶节点代表类或类的分布。&lt;/p&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://xinhecuican.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>动态顺序统计</title>
    <link href="http://xinhecuican.github.io/post/20ff5ccb.html"/>
    <id>http://xinhecuican.github.io/post/20ff5ccb.html</id>
    <published>2020-07-12T07:48:00.000Z</published>
    <updated>2020-07-14T08:40:50.074Z</updated>
    
    <content type="html"><![CDATA[<p>首先要了解<a href="https://xinhecuican.github.io/post/f89cb603.html#more">红黑树</a>.</p><p>顺序统计树指示在普通的红黑树上附加了一个参量，x-&gt;size。这个参量表示的是该节点的子树含有元素个数。</p><p>为了找出第i小的关键字，可以用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select(node* x, int i)</span><br><span class="line">&#123;</span><br><span class="line">    int r &#x3D; x-&gt;left-&gt;size + 1;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;x的序号，因为红黑树也是一个排序树，所以x一定比左边元素都大</span><br><span class="line">    if(i &#x3D;&#x3D; r)</span><br><span class="line">    &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(i &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        return select(x-&gt;left, i);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return select(x-&gt;right, i-r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>确定一个元素的秩</strong></p><p>秩指的是排第几号元素。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rank(node* t, node* x)</span><br><span class="line">&#123;</span><br><span class="line">    int r &#x3D; x-&gt;left-&gt;size + 1;</span><br><span class="line">    node* y &#x3D; x;</span><br><span class="line">    while(y !&#x3D; t-&gt;root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(y &#x3D;&#x3D; y-&gt;p-&gt;right)&#x2F;&#x2F;如果是右子树，那么还要加上左子树的数目</span><br><span class="line">        &#123;</span><br><span class="line">            r &#x3D; r+y-&gt;p-&gt;left + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        y &#x3D; y-&gt;p;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，使用中序遍历可以得到排序树的排序。中间循环的过程就是找到x在父亲节点子树中位置然后再到祖宗节点中所处位置最后到根节点所处位置。</p><p><strong>维护</strong></p><p>对于插入，红黑树插入分为两个阶段，第一阶段是找位置，只需要沿途让size+1就好了，第二阶段是旋转。对于左子树， x是原来最上面的节点，现在size是<code>x-&gt;left-&gt;size + x-&gt;right-&gt;size + 1</code>， 对于右儿子y来说，y的size就是最开始x的size（因为现在它使根节点）</p><h1 id="区间树"><a class="markdownIt-Anchor" href="#区间树"></a> 区间树</h1><p>区间树是另一种红黑树的扩展。它和普通红黑树的区别是多了一个区间x-&gt;int(interval)表示，区间最大值是int.high(区间的右端点),最小值是int.low.</p><p>此外，还附加了max（以x为根的子树中所有区间端点的最大值）</p><p><code>x-&gt;max = max(x-&gt;int-&gt;high, x-&gt;left-&gt;max, x-&gt;right-&gt;max)</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search(node* t, int(interval) i)&#x2F;&#x2F;查找与i重叠的区间</span><br><span class="line">&#123;</span><br><span class="line">    node* x &#x3D; t-&gt;root;</span><br><span class="line">    while(x !&#x3D; NULL &amp;&amp; (x-&gt;int-&gt;low&gt;i-&gt;high || x-&gt;int-&gt;high&lt;i-&gt;low))&#x2F;&#x2F;x!&#x3D;NULL &amp;&amp; i不在x的区间范围内</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        if(x-&gt;left !&#x3D; NULL &amp;&amp; x-&gt;left-&gt;max &gt;&#x3D; i-&gt;low)</span><br><span class="line">        &#123;</span><br><span class="line">            x &#x3D; x-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            x &#x3D; x-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最优二叉搜索树"><a class="markdownIt-Anchor" href="#最优二叉搜索树"></a> 最优二叉搜索树</h1><p>给一个n个不同关键字的已排序序列，用这些关键字构建一个二叉搜索树。对于每个关键字ki，都有一个概率pi表示搜索概率。因为还有可能没有搜索到，所以还有n+1个伪关键字。</p><p>可以证明，最优二叉搜索树的子树也是最优二叉树。</p><p>所以我们求解的子问题为： 求解ki到kj的最优二叉搜索树。并且 j&gt;=i-1.当j=i-1时，不包含关键字。</p><p>当j=i-1时，子树中只包含伪关键字di-1， 所以搜索代价是qi-1</p><p>当j&gt;=i时，我们要选取一个根节点kr, ki到kr-1为左子树，kr+1到j为右子树。当一棵树成为另一棵树的子树时，因为每个节点的深度都加1，所以搜索代价的增加值应该是所有概率之和，记这个概率为w(i, j)</p><p>注意w(i, j) = w(i, r-1) + pr + w(r+1, j)</p><p>所以现在概率应该是原来左子树代价+原来右子树代价+增加代价</p><p><img src="/images/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%925.jpg" alt="" /></p><p>这就是最优搜索代价的递归公式。e[i, j]表示从i到j构成的二叉树的最优搜索代价。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bst(int* p, int* q, int n)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;q是伪关键字搜索频率</span><br><span class="line">    int max &#x3D; 2147483647;</span><br><span class="line">    int e[n+2][n+1], w[n+2][n+1], root[n+1][n+1];</span><br><span class="line">    for(int i&#x3D;1; i&lt;&#x3D;n+1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        e[i][i-1] &#x3D; q[i-1];</span><br><span class="line">        w[i][i-1] &#x3D; q[i-1];</span><br><span class="line">        for(int l&#x3D;1; l&lt;&#x3D;n; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            int j &#x3D; i + l - 1;</span><br><span class="line">            e[i][j] &#x3D; max;</span><br><span class="line">            w[i][j] &#x3D; e[i][j-1] + p[j] + q[j];</span><br><span class="line">            for(int r&#x3D;i; r&lt;&#x3D;j; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                t &#x3D; e[i][r-1] + e[r+1][j] + w[[i][j];</span><br><span class="line">                if(t &lt; e[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    e[i][j] &#x3D; t;</span><br><span class="line">                    root[i][j] &#x3D; r;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先要了解&lt;a href=&quot;https://xinhecuican.github.io/post/f89cb603.html#more&quot;&gt;红黑树&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;顺序统计树指示在普通的红黑树上附加了一个参量，x-&amp;gt;size。这个参量表示的是该节点的子树含有元素</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://xinhecuican.github.io/post/f89cb603.html"/>
    <id>http://xinhecuican.github.io/post/f89cb603.html</id>
    <published>2020-07-08T06:50:00.000Z</published>
    <updated>2020-07-10T08:35:52.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h1><p>红黑树是一颗二叉搜索树，并且在每个节点上增加一个变量来储存颜色，可以是红或者是黑。红黑树保证了没有一条路径会比其他路径长两倍。</p><p>每个节点有五个属性：color、key、left、right、p(parent)。</p><p>红黑树满足以下性质：</p><ul><li>根节点是黑色</li><li>每个叶结点是黑色的。</li><li>如果一个节点是红色，则两个子节点是黑色</li><li>对于每个节点，从这个节点到所有后代节点的简单路径上，均包含相同数目的黑色节点。</li></ul><p>在叶结点中不存在值，可以用一个哨兵节点来代指叶结点。哨兵节点颜色为黑，其他值任意，之后一旦到叶结点就连接到哨兵，这样可以减少空间占用。</p><p>从某一节点出发（不包含这个节点）的任意一条简单路径上黑色节点的个数叫这个点的黑高。定义红黑树的黑高是根节点的黑高。</p><p>可以证明，节点数为n的红黑树高度至多为2lg(n+1).</p><h1 id="旋转"><a class="markdownIt-Anchor" href="#旋转"></a> 旋转</h1><p>插入和删除可能会改变红黑树的性质，这个时候就需要通过旋转来恢复红黑树的性质。</p><p><img src="/images/%E7%BA%A2%E9%BB%91%E6%A0%911.jpg" alt="" /></p><p>左旋的过程是把y的左边给x，然后x变为y的左儿子。右旋可以类比</p><p>左旋函数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void left_rotate(node* t, node* x)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;t是根节点</span><br><span class="line">    node* y &#x3D; x-&gt;right;</span><br><span class="line">    x-&gt;right &#x3D; y-&gt;left;</span><br><span class="line">    if(y-&gt;left !&#x3D; NULL)&#x2F;&#x2F;设置y-&gt;left的父辈节点</span><br><span class="line">    &#123;</span><br><span class="line">        y-&gt;left-&gt;p &#x3D; x;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;p &#x3D; x-&gt;p;&#x2F;&#x2F;设置y的父辈节点</span><br><span class="line">    if(x-&gt;p &#x3D;&#x3D; NULL)&#x2F;&#x2F;如果x-&gt;p为NULL，说明它是根节点</span><br><span class="line">    &#123;</span><br><span class="line">        t-&gt;root &#x3D; y;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(x &#x3D;&#x3D; x-&gt;p-&gt;left)&#x2F;&#x2F;这是设置原来x的父辈的连接</span><br><span class="line">    &#123;</span><br><span class="line">        x-&gt;p-&gt;left &#x3D; y;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        x-&gt;p-&gt;right &#x3D;&#x3D; y</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;left &#x3D; x;</span><br><span class="line">    x-&gt;p &#x3D; y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h1><p>我们可以先找到插入位置（用二叉搜索树的方法），然后将这个点着色为红。为了保证性质，我们还要用一个函数对节点重新着色并旋转。</p><p>调整函数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void fixup(node* t, node* x)</span><br><span class="line">&#123;</span><br><span class="line">    while(x-&gt;p-&gt;color &#x3D;&#x3D; red)</span><br><span class="line">    &#123;</span><br><span class="line">        if(x-&gt;p &#x3D;&#x3D; x-&gt;p-&gt;p-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            node* y &#x3D; x-&gt;p-&gt;p-&gt;right;</span><br><span class="line">            if(y-&gt;color &#x3D;&#x3D; red)&#x2F;&#x2F;情况1</span><br><span class="line">            &#123;</span><br><span class="line">                x-&gt;p-&gt;color &#x3D; black;</span><br><span class="line">                y-&gt;color &#x3D; black;</span><br><span class="line">                x-&gt;p-&gt;p-&gt;color &#x3D; red;</span><br><span class="line">                x &#x3D; x-&gt;p-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(x &#x3D;&#x3D; x-&gt;p-&gt;right)&#x2F;&#x2F;情况2</span><br><span class="line">            &#123;</span><br><span class="line">                x &#x3D; x-&gt;p;</span><br><span class="line">                left_rotate(t, x);</span><br><span class="line">            &#125;</span><br><span class="line">            x-&gt;p-&gt;color &#x3D; black;&#x2F;&#x2F;情况3</span><br><span class="line">            x-&gt;p-&gt;p-&gt;color &#x3D; red;</span><br><span class="line">            right_rotate(t, x-&gt;p-&gt;p);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;和上面一样，就是把左右换一下</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;root-&gt;color &#x3D; black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为插入的是红色的节点，所以所有路径黑色节点数目相同这个性质不可能破坏。</p><p>这里可能被破坏的是根节点必须是黑色和红节点儿子必须是黑色两个性质。所以要从这两个性质着手去解决。</p><p>上面这个函数每次while都要保持下面性质：</p><ul><li>x是红节点</li><li>如果x-&gt;p是根节点，那么x-&gt;p是黑节点</li><li>如果性质被破坏，只可能是上面两条。如果是第一条，那么x是根节点并且是红节点，如果是第二条，那么它是红并且它的父亲是红。</li></ul><p>上面三种情况区别是叔节点颜色不同。在所有情况中，相同的地方是x-&gt;p-&gt;p一定是黑色，因为x-&gt;p一定是红色。</p><p><strong>情况1：叔节点是红色</strong></p><p><img src="/images/%E7%BA%A2%E9%BB%91%E6%A0%912.jpg" alt="" /></p><p>如图，左边是最开始的情况，白色代表红色。我们就可以把A和D图成黑色，然后C变成红色，这样每条路径黑色节点数目仍没变，但是此时C变成了红节点，可能和C的父亲有冲突，所以我们要把指针移动到C点</p><p><strong>情况2，情况3： 叔节点是黑色并且x是左孩子/右孩子</strong></p><p>情况2是x为右孩子。</p><p><img src="/images/%E7%BA%A2%E9%BB%91%E6%A0%913.png" alt="" /></p><p>情况2可以通过一个左旋变成情况3，此时x是左孩子。</p><p>此时把D和A都是红色。再让C一个右旋就让D到了上面（开始进行了一次左旋D到了A上面）然后让D为黑色，A和C为红色就可以了。并且这个时候循环也会结束，因为</p><h1 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h1><p>首先要基于基础的搜索二叉树删除操作，即如果删除节点是叶结点，直接删除，如果删除节点只有一个子节点，那么删除这个节点后还要让它的父节点连接这个节点的子节点，如果有两个子节点，那么要让它的前驱（或后继）来替代他。并且它的前驱的右子节点连接它的父节点。</p><p>总的函数过程为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transplant(node* t, node* u, node* v)&#x2F;&#x2F;删u节点操作，用v替代</span><br><span class="line">&#123;</span><br><span class="line">    if(u-&gt;p &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        t-&gt;root &#x3D; v;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(u &#x3D;&#x3D; u-&gt;p-&gt;left)</span><br><span class="line">    &#123;</span><br><span class="line">        u-&gt;p-&gt;left &#x3D; v;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        u-&gt;p-&gt;right &#x3D; v;</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;p &#x3D; u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixup(node* t, node* x)</span><br><span class="line">&#123;</span><br><span class="line">    while(x !&#x3D; t-&gt;root &amp;&amp; x-&gt;color &#x3D;&#x3D; black)</span><br><span class="line">    &#123;</span><br><span class="line">        if(x &#x3D;&#x3D; x-&gt;p-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            node* w &#x3D; x-&gt;p-&gt;right;</span><br><span class="line">            if(w-&gt;color &#x3D;&#x3D; red)&#x2F;&#x2F;情况1</span><br><span class="line">            &#123;</span><br><span class="line">                w-&gt;color &#x3D; black;</span><br><span class="line">                x-&gt;p-&gt;color &#x3D; red;</span><br><span class="line">                left_rotate(t, x-&gt;p);</span><br><span class="line">                w &#x3D; x-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            if(w-&gt;left-&gt;color &#x3D;&#x3D; black &amp;&amp; w-&gt;right-&gt;color &#x3D;&#x3D; black)</span><br><span class="line">            &#123;</span><br><span class="line">                w-&gt;color &#x3D; red;&#x2F;&#x2F;情况2</span><br><span class="line">                x &#x3D; x-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(w-&gt;right-&gt;color &#x3D;&#x3D; black)&#x2F;&#x2F;情况3</span><br><span class="line">            &#123;</span><br><span class="line">                w-&gt;left-&gt;color &#x3D; black;</span><br><span class="line">                w-&gt;color &#x3D; red;</span><br><span class="line">                right_rotate(t, w);</span><br><span class="line">                w &#x3D; w-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            w-&gt;color &#x3D; x-&gt;p-&gt;color;&#x2F;&#x2F;情况4</span><br><span class="line">            x-&gt;p-&gt;color &#x3D; black;</span><br><span class="line">            w-&gt;right-&gt;color &#x3D; black;</span><br><span class="line">            left_rotate(t, x-&gt;p);</span><br><span class="line">            x &#x3D; t-&gt;root;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;就是左右交换一下</span><br><span class="line">        &#125;</span><br><span class="line">    x-&gt;color &#x3D; black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">delete(node* t, node* x)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;y-&gt;original-&gt;color保存的是y发生改变之前的颜色</span><br><span class="line">    node* z;</span><br><span class="line">    node *y &#x3D; x;</span><br><span class="line">    y-&gt;original-&gt;color &#x3D; y-&gt;color;</span><br><span class="line">    if(x-&gt;left &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        z &#x3D; x-&gt;left;</span><br><span class="line">        transplant(t, x, x-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(x-&gt;right &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        z &#x3D; x-&gt;right;</span><br><span class="line">        transplant(t, x, x-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#x2F;&#x2F;如果两个子树都不为空</span><br><span class="line">    &#123;</span><br><span class="line">        y &#x3D; minimum(x-&gt;right);&#x2F;&#x2F;找到x的后继</span><br><span class="line">        y-&gt;original-&gt;color &#x3D; y-&gt;color;</span><br><span class="line">        z &#x3D; y-&gt;right;</span><br><span class="line">        if(y-&gt;p &#x3D;&#x3D; x)</span><br><span class="line">        &#123;</span><br><span class="line">            z-&gt;p &#x3D; y;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            transplant(t, y, y-&gt;right);</span><br><span class="line">            y-&gt;right &#x3D; x-&gt;right;</span><br><span class="line">            y-&gt;right-&gt;p &#x3D; y;</span><br><span class="line">        &#125;</span><br><span class="line">        transplant(t, x, y);</span><br><span class="line">        y-&gt;left &#x3D; x-&gt;left;</span><br><span class="line">        y-&gt;color &#x3D; x-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">    if(y-&gt;original-&gt;color &#x3D;&#x3D; black)</span><br><span class="line">    &#123;</span><br><span class="line">        fixup(t, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保持y是要被删除的元素,因此如果y最初的颜色是黑色就可能改变性质。而z保存的是y的原始位置。</p><p>在fixup中，while循环总目标是把额外的黑色沿着树往上提。</p><p>while节点退出条件：</p><ul><li>x指向红黑节点（两种颜色）。然后再最后再将颜色变成单独的颜色。</li><li>x指向根节点</li><li>执行适当的旋转和重新着色，退出循环。</li></ul><p>在循环中，x总是指向双重黑色节点（双重黑色就是假设z位置处额外有一个黑色，之后y删除会移走一个黑色然后性质就符合了，但是多了一个黑色会导致开开始路径黑色数目就不同，所以要把这个双重黑色的节点放到根节点处，这样就不会有影响了，红黑色就是z处原来是红色。另外这是为了理解说的，和书上的不同）。</p><p>如果x是双重黑色，那么w（x的兄弟）不可能是NULL，因为这会导致两边黑色不相等。</p><p><strong>情况1： x的兄弟w是红色的</strong><br /><img src="/images/%E7%BA%A2%E9%BB%91%E6%A0%915.jpg" alt="" /></p><p>它的目的是把兄弟节点变成黑色。先把父亲节点和兄弟节点的颜色设置好，然后进行旋转。会把情况变成情况2或3</p><p><strong>情况2： w黑色，并且w的两个子节点是黑色</strong></p><p>这个时候可以从w上去除一层黑色，也就是x变成单黑然后w变成红色，然后x到父亲节点（一定是红色），也就是说这个时候去掉了黑色但是性质不满足了（有两个红色），所以跳出循环后还要加一个把x变成黑色</p><p><strong>情况3： w黑色，w左孩子红色，右孩子黑色</strong></p><p>通过这种变换，会把情况变成情况4.</p><p><strong>情况4： w黑色，w右孩子红色</strong></p><p>这种情况也是可以去掉黑色的。然后把x设置成根是为了退出循环。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;性质&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#性质&quot;&gt;&lt;/a&gt; 性质&lt;/h1&gt;
&lt;p&gt;红黑树是一颗二叉搜索树，并且在每个节点上增加一个变量来储存颜色，可以是红或者是黑。红黑树保证了没有一条路径会比其他路径长两倍。&lt;/p&gt;
&lt;p&gt;每</summary>
      
    
    
    
    <category term="数据结构" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>python wxpython</title>
    <link href="http://xinhecuican.github.io/post/235252ea.html"/>
    <id>http://xinhecuican.github.io/post/235252ea.html</id>
    <published>2020-07-08T00:58:00.000Z</published>
    <updated>2020-07-15T03:24:16.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件处理"><a class="markdownIt-Anchor" href="#事件处理"></a> 事件处理</h1><p>事件就是状态改变时发出的信号，然后你可以通过绑定指定一个函数去处理。例如按下按钮就产生了一个事件，之后可以让一个函数去处理按下按钮之后的反应。</p><p>绑定函数使用 Bind(event, handler, source=None, id=wx.ID_ANY, id2=wx.ID_ANY).event是产生的事件，handler是处理事件的方法,source是触发事件的对象。</p><p>例如 Bind(wx.EVT_BUTTON, self.Button_enter, button1)这样button1按下时会使用Button_enter函数</p><h1 id="frame"><a class="markdownIt-Anchor" href="#frame"></a> Frame</h1><p>方法： <code>Wx.Frame (parent, id, title, pos, size, style, name)</code></p><ul><li>parent是窗口父类，主要控制打开这个窗口时显示位置，一般显示在父窗口中央。如果是None显示在屏幕正中央。</li><li>id是窗口标识，一般选-1让id自动生成。</li><li>pos是左上角位置，用元组表示，例如(0,0),wx.DefaultPosition是由操作系统决定.</li><li>size是长和宽，wx.DefaultSize 是由操作系统决定。</li><li>style： 有wx.DEFAULT_FRAME_STYLE，wx.CAPTION，wx.MINIMIZE_BOX，wx.MAXIMIZE_BOX，wx.CLOSE_BOX，wx.SYSTEM_MENU，wx.RESIZE_BORDER，wx.STAY_ON_TOP，wx.FRAME_FLOAT_ON_PARENT</li><li>name： 内部用名</li></ul><p><img src="/images/wxpython4.png" alt="" /></p><p>例： window = wx.Frame(None, -1, “Hello”, pos = (10,10), size = (300,200),style = wxDEFAULT_FRAME_STYLE, name = “frame”)</p><p>成员函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>CreateStatusBar()</td><td>创建窗口底部状态栏</td></tr><tr><td>CreateToolBar()</td><td>在顶部或左侧创建工具栏</td></tr><tr><td>GetMenuBar()</td><td>获取引用菜单栏</td></tr><tr><td>GetStatusBar()</td><td>获取引用状态栏</td></tr><tr><td>SetMenuBar()</td><td>显示菜单栏对象</td></tr><tr><td>setStatusBar()</td><td>关联状态栏对象到框架</td></tr><tr><td>SetToolBar()</td><td>关联工具栏对象到框架</td></tr><tr><td>SetStatusText()</td><td>在状态栏上显示的文字</td></tr><tr><td>Create()</td><td>创建有参数的框架</td></tr><tr><td>Centre()</td><td>让这个框架在中心</td></tr><tr><td>SetPosition()</td><td></td></tr><tr><td>SetSize()</td><td></td></tr><tr><td>SetTitle()</td><td></td></tr></tbody></table><p>事件：</p><ul><li>EVT_CLOSE： 当点击关闭按钮时</li><li>EVT_MENU_OPEN： 一个菜单要被打开时</li><li>EVT_MENU_CLOSE: 一个菜单被关闭后时</li><li>EVT_MENU_HIGHLIGHT： 让指定菜单凸显</li></ul><h1 id="panel"><a class="markdownIt-Anchor" href="#panel"></a> panel</h1><p>创建： wx.panel(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,<br />style=TAB_TRAVERSAL, name=PanelNameStr)</p><p>parent指定了和Frame之间的父子关系。要定位布局或确定其他父子关系通过sizer(定位器)来完成(相当于layout)</p><h1 id="定位器"><a class="markdownIt-Anchor" href="#定位器"></a> 定位器</h1><p>下面是常见定位器：</p><ul><li>wx.BoxSizer(): 把窗口布置成水平或垂直框,有水平(wx.HORIZONTAL)和垂直布局(wx.VERTICAL)，默认水平</li><li>wx.StaticBoxSizer(orient,parent,label=&quot;&quot;)： 这是带有名字的StaticBoxSizer.创建的是一个静态框，也就是一个边框并且边框上有label</li><li>wx.StaticBoxSizer(box,orient=HORIZONTAL)： box是一个staticbox对象。</li><li>GridSizer(rows,cols,vgap,hgap): GridSizer创建一个若干行和列的小方格。其中vgap和hgap是两个方格之间的水平间隔和垂直间隔。</li><li>wx.FlexGridSizer(): GridSizer创建的方格大小是固定的，而FlexGridSizer大小可以改变。他有两个特殊的方法：AddGrowableRow(idx,proportion=0)、AddGrowableCo(idx,proportion=0).</li><li>wx.GridBagSizer(vgap,hgap): 这个可以横跨多个行和列。它的Add(control, pos, span, flags, border)，其中span是横跨的行数和列数，用一个元组表示。position是必须参数。它也可以用AddGrowableCo().idx是你想扩张的行，proportion是增加的比例。只要你的控件在那个行里拉伸时就会拉伸那个控件</li></ul><p>BoxSizer方法：</p><ul><li>AddSpacer()： 添加不可伸缩空间</li><li>AddStretchSpacer() ： 添加可伸缩空间</li><li>Clear(): 删除控件</li><li>Remove(): 销毁并删除一个控件</li></ul><p>调用容器的Fit()可以自动调整大小</p><p><strong>定位器的add函数</strong></p><p>add都是继承自wx.Sizer.</p><p>语法： Add(window,proportion=0,flag=0,border=0,userData=None)： window可以使要添加的组件，也可以是另外一个Sizer（嵌套）。</p><ul><li>proportion： 权重。如果为1表示sizer大小变化时，组件大小也会随之变化，变化速度为1。其值有0,1,2</li><li>flag： 用来控制对齐，边框和调整尺寸</li><li>border： 边框</li><li>userData： 用来传递额外的数据</li></ul><p>flag类型：</p><p><img src="/images/wxpython1.png" alt="" /><br /><img src="/images/wxpython2.png" alt="" /><br /><img src="/images/wxpython3.png" alt="" /></p><h1 id="statictext"><a class="markdownIt-Anchor" href="#statictext"></a> StaticText</h1><p>statictext是一个只读文本。</p><p>创建： Wx.StaticText(parent, id, label, position, size, style)：size是字号。style和上面的有所不同</p><p>style类型：</p><ul><li>wx.ALIGN_RIGHT,wx.ALIGN_LEFT,wx.ALIGN_CENTER: 控制文本出现位置</li><li>wx.ST_NO_AUTORESIZE: 防止标签的自动调整大小</li><li>wx.ST_ELLIPSIZE_START， wx.ST_ELLIPSIZE_MIDDLE， wx.ST_ELLIPSIZE_END: 省略号显示位置，有开始中间或结尾</li></ul><p>如果想要设置字体，首先要创建一个<code>wx.Font(pointSize,family,style,weight,underline,faceName,encoding)</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">family: wx.DECORATIVE：一个正式的，老的英文样式字体。</span><br><span class="line">wx.DEFAULT：系统默认字体。</span><br><span class="line">wx.MODERN：一个单间隔（固定字符间距）字体。</span><br><span class="line">wx.ROMAN：serif字体，通常类似于Times New Roman。</span><br><span class="line">wx.SCRIPT：手写体或草写体。</span><br><span class="line">wx.SWISS：sans-serif字体，通常类似于Helvetica或Arial。</span><br><span class="line">wx.FONTSTYLE_ITALIC是斜体、wx.FONTSTYLE_SLANT罗马式斜体</span><br><span class="line"></span><br><span class="line">style: 指定文本是否倾斜，SLANT是罗马式倾斜</span><br><span class="line">wx.NORMAL,</span><br><span class="line">wx.SLANT,</span><br><span class="line">wx.ITALIC</span><br><span class="line"></span><br><span class="line">weight：控制字体醒目程度</span><br><span class="line">wx.NORMAL,</span><br><span class="line">wx.LIGHT,</span><br><span class="line">wx.BOLD</span><br><span class="line"></span><br><span class="line">underline： 下划线，如果是True就是有</span><br><span class="line"></span><br><span class="line">faceName： 指定字体名字</span><br></pre></td></tr></table></figure><p>最后使用SetFont方法添加</p><h1 id="textctrl-文本框"><a class="markdownIt-Anchor" href="#textctrl-文本框"></a> TextCtrl 文本框</h1><p>创建： wx.TextCtrl(parent, id, value, pos, size, style)</p><p>value是起始文本</p><p>style参数：</p><ul><li>wx.TE_MULTILINE。允许文本框多行</li><li>wx.TE_PASSWORD。 输入变成星号，相当于密码框</li><li>wx.TE_READONLY. 只读</li><li>wx.TE_LEFT</li><li>wx.TE_RIGHT</li><li>wx.TE_CENTER</li><li>wx.HSCROLL: 纵向滚动条</li><li>wx.VSVROLL: 横向滚动条</li></ul><p>wx.TextAttr(colText, colBack=wx.NullColor, font=wx.NullFont)  : 分别是 分别为字体颜色，背景色，字体。文本色和背景色为wxPython对象，可由颜色名或颜色的RGB值（红，绿，蓝）来 指定</p><p>绑定事件：EVT_TEXT(改变文本框内容时），EVT_TEXT_ENTER(按下enter键时），EVT_TEXT_MAXLEN（当文本长度达到SetMaxLength()设定的长度时）</p><h1 id="button"><a class="markdownIt-Anchor" href="#button"></a> Button</h1><p>button是最普通的按钮，BitmapButton是用图片做按钮，ToggleButton有两种状态：按下和弹起。</p><p>button和ToggleButton的构造函数的参数都相同：<code>Wx.Button(parent, id, label, pos, size, style)。</code></p><p>其中label是显示在button上的文本。wx.BU_EXACTFIT是跨平台标记，使用了它就不会用系统默认的的尺寸作为最小尺寸，可以使用wx.BU_LEFT等标记设置对齐</p><p>BitmapButton的构造函数：</p><ul><li>Wx.Bitmap(fiiename, wx.BITMAP_TYPE)</li><li>Wx.BitmapButton(parent, id, bitmap, pos, size, style)</li></ul><p>BitmapButton有一些预定义的图片类型常量：</p><ul><li>wx.BITMAP_TYPE_BMP</li><li>wx.BITMAP_TYPE_ICO</li><li>wx.BITMAP_TYPE_CUR</li><li>wx.BITMAP_TYPE_TIFF</li><li>wx.BITMAP_TYPE_TIF</li><li>wx.BITMAP_TYPE_GIF</li><li>wx.BITMAP_TYPE_PNG</li><li>wx.BITMAP_TYPE_JPEG</li><li>wx.BITMAP_TYPE_PCX</li><li>wx.BITMAP_TYPE_ICON</li><li>wx.BITMAP_TYPE_ANY</li></ul><p>方法：</p><ul><li><p>SetLabel()： 设置标题</p></li><li><p>GetLabel()</p></li><li><p>SetDefault()： 按钮设置为默认顶层窗口。模拟click事件按下回车键</p></li><li><p>GetValue()： 这是ToggleButton的，获得按钮的状态。此外还有SetValue</p></li></ul><p>Button的事件是EVT_BUTTON</p><h2 id="radiobutton-radiobox"><a class="markdownIt-Anchor" href="#radiobutton-radiobox"></a> RadioButton &amp; RadioBox</h2><p>每个RadioButton会显示一个圆形的框。一般是用它做一组按钮，同一时刻只能选择其中一个。</p><p>如果想要多个选项中选择一个选项，首先需要把样式设置成wx.RB_GROUP。</p><p>RadioBox提供了边框和标签组.</p><p>构造函数： RadioButton(parent, id, label, pos, size, style)</p><p>style参数仅用于该组中的第一个按钮。它的值是wx.RB_GROUP。对于组中的随后的按钮，wx.RB_SINGLE的style 参数可以任选地使用。</p><p>事件： wx.EVT_RADIOBUTTON</p><p>RadioBox构造函数：<code>RadioBox(parent, id, label, pos, size, choices[], initialdimensions, style)</code></p><ul><li>style: wx.RA_SPECIFY_ROWS或wx.RA_SPECIFY_COLS</li><li>initialdimensions: 最初的行\列数</li><li>choices[]: 按钮名列表</li><li>label也可以是一个图片</li></ul><p>RadioBox的方法：</p><ul><li>GetSelection()： 返回所选项目的索引</li><li>SetSelection()： 选择编程项目</li><li>GetString(): 获得所选项的标签</li><li>Show(): 显示或隐藏指定标签</li></ul><p>事件： wx.EVT_RADIOBOX。</p><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.rb1 &#x3D; wx.RadioButton(pnl,11, label &#x3D; &#39;Value A&#39;, pos &#x3D; (10,10), style &#x3D; wx.RB_GROUP) </span><br><span class="line">self.rb2 &#x3D; wx.RadioButton(pnl,22, label &#x3D; &#39;Value B&#39;,pos &#x3D; (10,40)) </span><br><span class="line">self.rb3 &#x3D; wx.RadioButton(pnl,33, label &#x3D; &#39;Value C&#39;,pos &#x3D; (10,70))</span><br><span class="line"></span><br><span class="line">RadioBox</span><br><span class="line"></span><br><span class="line">lblList &#x3D; [&#39;Value X&#39;, &#39;Value Y&#39;, &#39;Value Z&#39;]     </span><br><span class="line">self.rbox &#x3D; wx.RadioBox(pnl,label &#x3D; &#39;RadioBox&#39;, pos &#x3D; (80,10), choices &#x3D; lblList ,majorDimension &#x3D; 1, style &#x3D; wx.RA_SPECIFY_ROWS)</span><br></pre></td></tr></table></figure><h1 id="checkbox"><a class="markdownIt-Anchor" href="#checkbox"></a> CheckBox</h1><p><img src="/images/wxpython7.PNG" alt="" /></p><p>上图就是复选框，复选框可以有多个，允许用户多选</p><p>构造函数： Wx.CheckBox(parent, id, label, pos, size, style)</p><p>style有：</p><ul><li>wx.CHK_2STATE： 有两种选择，选或不选，这也是默认选项。</li><li>wx.CHK_3STATE： 三态复选框，第三状态称为混合或不确定的状态，一般用在“不适用”情景。</li><li>wx.ALIGN_RIGHT： 把名字放在左边，复选框放在右边</li></ul><p>方法：</p><ul><li>GetState()返回true或false</li><li>GetLabel()</li></ul><h1 id="combobox-choice"><a class="markdownIt-Anchor" href="#combobox-choice"></a> ComboBox &amp; Choice</h1><p>ComboBox是一个下拉列表或者也可以永久显示。Choice也是下拉列表，但是只能只读。</p><p>构造方法： ComboBox(parent, id, value, pos, size, choices[], style)：choices是要填充进下拉列表的文本。value是最开始在框中显示的文本</p><p>style参数：</p><ul><li>wx.CB_SIMPLE: 组合框和永久显示的列表</li><li>wx.CB_DROPDOWN: 组合框和永久显示的列表</li><li>wx.CB_READONLY： 只读</li><li>wx.CB_SORT： 按字母排序</li></ul><p>方法：</p><ul><li>GetCurrentSelection (): 获得当前被选中的项目</li><li>SetSelection(i)： 设置i为被选中状态</li><li>GetString(i): 获得i的字符串</li><li>SetString()</li><li>SetValue()</li><li>FindString()： 搜索列表中字符串</li><li>GetStringSelection()： 获得当前项目选中的文本</li></ul><p>事件：</p><ul><li>wx. COMBOBOX： 当有项目被选择时</li><li>wx. EVT_TEXT： 组合框文本发生变化</li><li>wx. EVT_COMBOBOX_DROPDOWN： 下拉列表时</li><li>wx. EVT_COMBOBOX_CLOSEUP： 列表折叠时</li></ul><h1 id="gauge-测量仪"><a class="markdownIt-Anchor" href="#gauge-测量仪"></a> Gauge 测量仪</h1><p>Gauge其实是进度条，有确定模式和不确定模式两种。确定模式即显示百分比</p><p>在确定模式，进度位置会定期更新。在不确定模式，调用 Pulse() 函数将更新进度条。</p><p>构造函数： wx.Gauge(parent, id, range, pos, size, style)： range是表上的最大值，如果是不确定模式忽略此参数。</p><p>style参数：</p><ul><li>wx.GA_HORIZONTAL</li><li>wx.GA_VERTICAL</li><li>wx.GA_SMOOTH： 平滑的进度条，一个像素一个像素的更新</li><li>wx.GA_TEXT： 显示百分比形式</li></ul><p>方法：</p><ul><li>GetRange(): 获得进度条的最大值</li><li>SetRange()： 设置进度条的最大值</li><li>GetValue()</li><li>Pulse(): 切换成不确定模式</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import wx</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">class my_frame(wx.Frame):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__(parent&#x3D;None, title&#x3D;&quot;差评原因&quot;, size&#x3D;(1000, 600))</span><br><span class="line">        self.Centre()</span><br><span class="line">        panel &#x3D; wx.Panel(parent&#x3D;self)</span><br><span class="line">        value &#x3D; [&#39;choice1&#39;, &#39;choice2&#39;, &#39;choice3&#39;]</span><br><span class="line">        self.gauge &#x3D; wx.Gauge(panel, range&#x3D;20, style&#x3D;wx.GA_HORIZONTAL)</span><br><span class="line">        button &#x3D; wx.Button(panel, label&#x3D;&#39;开始&#39;)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.Onstart, button)</span><br><span class="line"></span><br><span class="line">        sizer &#x3D; wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        sizer.Add(self.gauge)</span><br><span class="line">        sizer.Add(button)</span><br><span class="line">        panel.SetSizer(sizer)</span><br><span class="line">    def Onstart(self, e):</span><br><span class="line">        value &#x3D; 0</span><br><span class="line">        for i in range(20):</span><br><span class="line">            time.sleep(1)</span><br><span class="line">            value +&#x3D; 1</span><br><span class="line">            self.gauge.SetValue(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class app(wx.App):</span><br><span class="line">    def OnInit(self):</span><br><span class="line">        frame &#x3D; my_frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def OnExit(self):</span><br><span class="line">        print(&quot;退出&quot;)</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; app()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/wxpython8.PNG" alt="" /></p><h1 id="slider"><a class="markdownIt-Anchor" href="#slider"></a> Slider</h1><p>Slider是一个滑块</p><p>构造函数： wx.Slider(parent, id, value, minValue, maxValue, pos, size, style) :</p><p>style参数：</p><ul><li>wx.SL_HORIZONTAL</li><li>wx.SL_VERTICAL</li><li>wx.SL_AUTOTICKS: 自动显示刻度线</li><li>wx.SL_LABELS: 显示最大值，最小值和当前值</li><li>wx.SL_MIN_MAX_LABELS: 只显示最大值和最小值</li><li>wx.SL_VALUE_LABEL： 只显示当前值</li></ul><p>方法：</p><ul><li>上面参数的set和get方法</li><li>SetTick()： 在给定位置显示刻度线</li><li>SetTickFreq()： 显示最大刻度和最小刻度之间的刻度间隔</li></ul><p>事件：</p><ul><li>wx.EVT_SCROLL： 因为他类似于滚动条，所以绑定滚动事件也可以发挥作用</li><li>wx.EVT_SLIDER: 刻度条位置发生变化时</li></ul><h1 id="menuitem-menu-menubar-菜单栏"><a class="markdownIt-Anchor" href="#menuitem-menu-menubar-菜单栏"></a> MenuItem, Menu &amp; MenuBar 菜单栏</h1><p>菜单栏就是应用程序最顶端显示的一些菜单。</p><p>MenuBar是创建一个菜单栏，然后Menu就是菜单栏上的菜单，MeunItem是菜单中的一个个选项</p><p>ManuBar构造函数： wx.MenuBar(n, menus, titles, style) ： n是菜单数量，menus是标题的字符串，style只有wx.MB_DOCKABLE，菜单栏可以停靠。</p><p>设置完后可以用frame.SetMenuBar()把菜单加进去</p><p>方法：</p><ul><li>Append()： 添加菜单到菜单栏</li><li>Check()： 选中菜单</li><li>Enable()</li><li>Remove()</li></ul><p>Menu一般使用空的构造方法</p><p>Menu的方法；</p><ul><li><p>Append(menu, title)： 添加一个菜单项,title是菜单的名字。</p></li><li><p>AppendMenu()： 添加一个子菜单</p></li><li><p>AppendRadioItem()： 追加可选当前项</p></li><li><p>AppendCheckItem()： 追加可检查当前项</p></li><li><p>AppendSeparator()： 添加分割线</p></li><li><p>Insert()： 在指定位置插入一个新菜单。后面还有几个Insert和上面一样</p></li><li><p>GetMenuItems() ： 返回菜单项列表</p></li><li><p>Remove()</p></li><li><p>wx.MenuItem.SetBitmap(wx.Bitmap(image file))： 设置图像</p></li></ul><p>MenuItem构造函数： wx.MenuItem(parentMenu, id, text, kind)：text是菜单项的名字</p><ul><li>kind是菜单项的类型，有wx.ITEM_NORMAL(普通菜单项,相当于Button),wx.ITEM_CHECK（检查菜单项，相当于ToggleButton), wx.ITEM_RADIO(单选菜单项,相当于RadioButton）</li></ul><p>如果想要添加快捷键，使用text参数。<code>text = &quot;名称/t快捷键&quot;</code>.例如text = &quot;Quit/tCtrl+Q&quot;这样为名称是Quit的菜单项注册了Ctrl+Q的快捷键</p><p>菜单项有一系列标准ID： wx.ID_SEPARATOR，wx.ID_ANY，wx.ID_OPEN，wx.ID_CLOSE，wx.ID_NEW，wx.ID_SAVE，wx.ID_SAVEAS，wx.ID_EDIT，wx.ID_CUT，wx.ID_COPY，wx.ID_PASTE</p><p>事件： EVT_MENU。然后可以使用e.GetId()的方法得知选了哪个菜单项</p><h1 id="toolbar"><a class="markdownIt-Anchor" href="#toolbar"></a> ToolBar</h1><p>工具栏包括文本文字说明或图标按钮的一个或多个水平条，通常放在MenuBar下面。</p><p>构造函数： Wx.ToolBar(parent, id, pos, size, style)：</p><p>style:</p><ul><li>wx.TB_FLAT: 平面效果</li><li>wx.TB_HORIZONTAL</li><li>wx.TB_VERTICAL</li><li>wx.TB_DEFAULT_STYLE: 综合FLAT和HORIZONAL</li><li>wx.TB_DOCKABLE： 使工具栏可以浮动和停靠</li><li>wx.TB_NO_TOOLTIPS ： 不显示提示</li><li>wx.TB_NOICONS： 没有图标</li><li>wx.TB_TEXT： 显示文本，默认情况下只有图标</li></ul><p>函数：</p><ul><li>AddTool(parent, id, bitmap)： 添加工具到工具栏</li><li>AddRadioTool()： 添加Radio组，即这些选项中只能选择一个</li><li>AddCheckTool()： 添加复选框</li><li>AddLabelTool()： 添加标签</li><li>AddSeparator()： 添加分隔符</li><li>AddControl()： 添加其他组件。例如Button ComboBox等</li><li>ClearTools()： 删除所有在工具栏中的按钮</li><li>RemoveTool()： 删除组件</li><li>Realize()： 增加调用，最后必须要写</li></ul><p>事件： EVT_TOOL。这个事件只负责传递，具体实现还需要GetId然后判断ID进行处理。</p><p>注意，如果是通过AddControl加进来的方法不能通过EVT_TOOL响应，必须要通过他们自己的事件进行响应。</p><h1 id="dialog"><a class="markdownIt-Anchor" href="#dialog"></a> Dialog</h1><p>Dialog就是平常弹出的对话框，如程序崩溃时发出的警告消息等。</p><p>wxpython中预定义了一些Dialog。如：MessageDialog，FileDialog，FontDialog类等。</p><p>构造函数：wx.Dialog(parent, id, title, pos, size, style)</p><p>style：</p><ul><li>wx.CAPTION： 对话框的文字说明</li><li>wx.DEFAULT_DIALOG_STYLE；相当于wx.CAPTION，wx.CLOSE_BOX和wx.SYSTEM_MENU的组合</li><li>wx.RESIZE_BORDER: 显示可调框架窗口大小</li><li>wx.SYSTEM_MENU: 显示系统菜单</li><li>wx.CLOSE_BOX： 显示关闭</li><li>wx.MAXIMIZE_BOX： 显示最大化菜单</li><li>wx.MINIMIZE_BOX</li><li>wx.STAY_ON_TOP: 该窗口显示在所有窗口顶部</li><li>wx.DIALOG_NO_PARENT</li></ul><p>事件：</p><ul><li>EVT_CLOSE： 关闭时产生</li><li>EVT_INIT_DIALOG： 初始化时产生</li></ul><p>函数：</p><ul><li>DoOK()： 当按下ok键时调用</li><li>ShowModal()： 显示了在应用程序模态方式的对话框</li><li>ShowWindowModal()： 对话框显示在顶层父窗口的模式</li><li>EndModal()： ShowModal调用传递值结束一个对话框模式</li></ul><h2 id="messagedialog"><a class="markdownIt-Anchor" href="#messagedialog"></a> MessageDialog</h2><p>构造函数： wx.MessageDialog(parent, message, caption, style, pos) :caption是标题</p><p>style:</p><ul><li>wx.OK： 有是否两个选项，用了这个就不能用YES_NO或YES</li><li>wx.CANCEL</li><li>wx.YES_NO: 有是否取消三个选项。</li><li>WX.YES_DEFAULT: 使yes按钮为默认</li><li>wx.NO_DEFAULT</li><li>wx.ICON_EXCLAMATION： 显示警告图标</li><li>wx.ICON_ERROR</li><li>wx.ICON_INFORMATION： 显示一个信息图标</li><li>wx.ICON_QUESTION</li></ul><p>还有一种简便形式是MessageBox,直接就可以展示，不需要Show。</p><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; wx.MessageDialog(self.panel, &quot;消息&quot;, &quot;标题&quot;, style&#x3D;wx.OK | wx.CANCEL | wx.ICON_ERROR).ShowModal()</span><br><span class="line"></span><br><span class="line">wx.MessageBox(&quot;消息&quot;, &#39;标题&#39;, style&#x3D;wx.OK | wx.CANCEL | wx.ICON_ERROR)</span><br></pre></td></tr></table></figure><p><img src="/images/wxpython9.PNG" alt="" /></p><h2 id="textentrydialog"><a class="markdownIt-Anchor" href="#textentrydialog"></a> TextEntryDialog</h2><p>这个类的对象显示一个文本字段，可定制的标签，提示用户输入以及两个按钮使用预定义样式的对话框。里面的文本框是TextCtrl，所以Style可以使用TextCtrl的</p><p>构造函数： wx.TextEntryDialog(parent, id, message, caption, value, style, pos) ： value是默认字符串。</p><p>方法：</p><ul><li>SetMaxLength()： 设置文本输入最大长度</li><li>SetValue()</li><li>GetValue()： 返回文本框中的内容</li><li>ShowModal()： 返回 wx.ID_OK 如果用户确认输入，以及 wx.ID_CANCEL 如果对话框被拒绝</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; wx.TextEntryDialog(self.panel, message&#x3D;&#39;看一看&#39;, caption&#x3D;&#39;标题&#39;)</span><br><span class="line">a.SetMaxLength(20)</span><br><span class="line">if(a.ShowModal() &#x3D;&#x3D; wx.ID_OK):</span><br><span class="line">    print(a.GetValue())</span><br><span class="line">else:</span><br><span class="line">    print(&#39;nothing&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/wxpython10.PNG" alt="" /></p><h2 id="filedialog"><a class="markdownIt-Anchor" href="#filedialog"></a> FileDialog</h2><p>此类表示一个文件选择对话框。它使用户可以浏览文件系统并选择要打开文件或保存.文件滤波器也可以应用到只显示指定扩展名的文件。启动目录和默认的文件名也可以设置。</p><p>构造函数： wx.FileDialog(parent, message, DefaultDir, DefaultFile, wildcard, style, pos, size) ： DefaultDir是默认目录， DefaultFile是默认选择文件.wildcard是筛选器，可以使用正则表达式</p><p>style参数：</p><ul><li>wx.FD_DEFAULT_STYLE： 相当于wx.FD_OPEN</li><li>wx.FD_OPEN： 打开对话框，默认标题是打开</li><li>wx.FD_SAVE</li><li>wx.FD_OVERWRITE_PROMPT： 保存对话框，如果一个文件被覆盖时会提示</li><li>wx.FD_MULTIPLE： 允许选择多个文件</li><li>wx.FD_CHANGE_DIR： 更改当前工作目录到用户选择的文件目录</li></ul><p>方法：</p><ul><li>GetDirectory()： 返回默认目录</li><li>GetFileName()： 返回默认文件名</li><li>GetPath()： 获得选定文件的完整目录</li><li>SetDirectory()</li><li>SetFileName()</li><li>SetPath()</li><li>ShowModal(): 如果用户单击OK按钮返回wx.ID_OK，否则 wx.ID_CANCEL</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filesFilter &#x3D; &quot;txt(*.txt) | *.txt|&quot; &quot;All files (*.*)|*.*&quot;</span><br><span class="line">        a &#x3D; wx.FileDialog(self.panel, &#39;看一看&#39;, &#39;C:&#x2F;&#39;, &#39;C:&#x2F;Program Files&#39;, filesFilter, wx.FD_OPEN)</span><br><span class="line">        if(a.ShowModal() &#x3D;&#x3D; wx.ID_OK):</span><br><span class="line">            with open(a.GetPath(), &#39;r&#39;) as f:</span><br><span class="line">                self.text.SetValue(f.read())</span><br><span class="line">        a.Destroy()</span><br></pre></td></tr></table></figure><p><img src="/images/wxpython12.PNG" alt="" /></p><h1 id="fontdialog"><a class="markdownIt-Anchor" href="#fontdialog"></a> FontDialog</h1><p>这个类的对象是一个字体选择对话框,所选字体的形式返回作为此对话框的返回值。</p><p>构造函数：wx.FontDialog(parent, data)： data一般使用wx.FontData()</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; wx.FontDialog(self, wx.FontData())</span><br><span class="line">        if(a.ShowModal() &#x3D;&#x3D; wx.ID_OK):</span><br><span class="line">            data &#x3D; a.GetFontData()</span><br><span class="line">            font &#x3D; data.GetChosenFont()</span><br><span class="line">            self.text.SetFont(font)</span><br></pre></td></tr></table></figure><p><img src="/images/wxpython13.PNG" alt="" /></p><h1 id="window"><a class="markdownIt-Anchor" href="#window"></a> Window</h1><h2 id="splitterwindow"><a class="markdownIt-Anchor" href="#splitterwindow"></a> SplitterWindow</h2><p>这个类的对象是一个布局管理器，它拥有两个子窗口的大小可以通过拖动它们之间的界限来动态变化。Splitter控件给出了句柄来拖动调整控件。</p><p>构造函数： wx.SplitterWindow(self, id, pos, size, style)</p><p>style：</p><ul><li>wx.SP_3D： 绘制3D效果的边框和窗扇(sash)</li><li>wx.SP_THIN_SASH： 绘制一个薄的sash</li><li>wx.SP_3DSASH: 绘制3D效果的sash</li><li>wx.SP_BORDER: 绘制标准边框</li><li>wx.SP_NOBORDER： 无边框（默认）</li><li>wx.SP_PERMIT_UNSPLIT: 总是允许取消分割，即使采用最小的窗格大小不为零</li></ul><p>方法：</p><ul><li>SplitVertically(panel1, panel2): 设置左右面板，这两个面板的父亲必须是该splitterwindow</li></ul><p>事件：</p><ul><li>EVT_SPLITTER_SASH_POS_CHANGING()： sash位置改变时</li><li>EVT_SPLITTER_SASH_POS_CHANGED()： 窗框位置改变时</li><li>EVT_SPLITTER_UNSPLIT()： 一直取消分割</li><li>EVT_SPLITTER_DCLICK()： 窗框被双点击。默认行为是在取消分割窗口出现这种情况时</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import wx</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">class my_frame(wx.Frame):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__(parent&#x3D;None, title&#x3D;&quot;差评原因&quot;, size&#x3D;(1000, 600))</span><br><span class="line">        split &#x3D; wx.SplitterWindow(self, style&#x3D;wx.SP_3D)</span><br><span class="line">        self.Centre()</span><br><span class="line">        self.panel &#x3D; wx.Panel(parent&#x3D;split)</span><br><span class="line">        value &#x3D; [&#39;choice1&#39;, &#39;choice2&#39;, &#39;choice3&#39;]</span><br><span class="line"></span><br><span class="line">        panel2 &#x3D; wx.Panel(split)</span><br><span class="line"></span><br><span class="line">        button &#x3D; wx.Button(self.panel, label&#x3D;&#39;按钮&#39;)</span><br><span class="line">        self.text &#x3D; wx.TextCtrl(self.panel, style&#x3D;wx.TE_MULTILINE)</span><br><span class="line">        self.text.SetEditable(False)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.Onstart, button)</span><br><span class="line">        sizer &#x3D; wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        sizer.Add(button, flag&#x3D;wx.ALIGN_CENTER)</span><br><span class="line">        sizer.Add(self.text, border&#x3D;20, proportion&#x3D;1, flag&#x3D;wx.ALL | wx.EXPAND)</span><br><span class="line"></span><br><span class="line">        sizer2 &#x3D; wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        sizer2.Add(wx.ListBox(panel2, style&#x3D;wx.LB_SINGLE), flag&#x3D;wx.EXPAND, proportion&#x3D;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.panel.SetSizer(sizer)</span><br><span class="line">        panel2.SetSizer(sizer2)</span><br><span class="line">        split.SplitVertically(panel2, self.panel)</span><br><span class="line">    def Onstart(self, e):</span><br><span class="line">        a &#x3D; wx.FontDialog(self, wx.FontData())</span><br><span class="line">        if(a.ShowModal() &#x3D;&#x3D; wx.ID_OK):</span><br><span class="line">            data &#x3D; a.GetFontData()</span><br><span class="line">            font &#x3D; data.GetChosenFont()</span><br><span class="line">            self.text.SetFont(font)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class app(wx.App):</span><br><span class="line">    def OnInit(self):</span><br><span class="line">        frame &#x3D; my_frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def OnExit(self):</span><br><span class="line">        print(&quot;退出&quot;)</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; app()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="/images/wxpython14.PNG" alt="" /></p><h2 id="htmlwindow"><a class="markdownIt-Anchor" href="#htmlwindow"></a> HtmlWindow</h2><p>wx.HtmlWindow对象是一个通用的HTML浏览器。他是在html1库中的。</p><p>构造函数： wx.htmll.HtmlWindow(Parent, id, pos, size, style)</p><p>样式：</p><ul><li>wx.HW_SCROLLBAR_NEVER: 永运不显示进度条</li><li>wx.HW_SCROLLBAR_AUTO： 只有在窗口放不下时才显示进度条</li><li>wx.HW_NO_SELECTION： 不让用户选择文本</li></ul><p>事件：</p><ul><li>EVT_HTML_CELL_CLICKED： 当一个wx.HtmlCell被点击</li><li>EVT_HTML_CELL_HOVER： 经过一个HtmlCell</li><li>EVT_HTML_LINK_CLICKED: 一个超链接被点击</li></ul><p>方法；</p><ul><li>AppendToPage()： Html追加到当前显示的文本，并刷新</li><li>HistoryBack()： 回到以前访问过的网页</li><li>HistoryForward()： 转到历史的下一页</li><li>LoadPage()： 加载一个Html文件</li><li>OnLinkClicked()： 超链接被点击时调用</li><li>SetPage()： 设置标记HTML的标签，文字作为页面内容</li></ul><h1 id="可停靠窗口"><a class="markdownIt-Anchor" href="#可停靠窗口"></a> 可停靠窗口</h1><p>大致过程：</p><ol><li>创建一个AuiManager对象。<code>self.mgr = wx.aui.AuiManager(self)</code></li><li>创建面板和里面的控件。</li><li>创建AuiPanelInfo. <code>info1 = wx.aui.AuiPaneInfo().Bottom()</code></li><li>把设计的面板添加到管理器。 <code>self.mgr.AddPane(pnl,info1)</code></li></ol><p>AuiPaneInfo参数：</p><ul><li>方向： Top, Bottom, Left, Right, 或 Center</li><li>位置： 多个窗格中可以放置一个可停靠的区域内。每个被赋予位置编号。</li><li>行： 多个窗格中显示在一排。就像一个以上的工具栏出现在同一行中。</li><li>层： 窗格可以放置在层中</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件处理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#事件处理&quot;&gt;&lt;/a&gt; 事件处理&lt;/h1&gt;
&lt;p&gt;事件就是状态改变时发出的信号，然后你可以通过绑定指定一个函数去处理。例如按下按钮就产生了一个事件，之后可以让一个函数去处理按下按钮之</summary>
      
    
    
    
    <category term="Python" scheme="http://xinhecuican.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 爬取</title>
    <link href="http://xinhecuican.github.io/post/3de4bc69.html"/>
    <id>http://xinhecuican.github.io/post/3de4bc69.html</id>
    <published>2020-07-01T12:16:00.000Z</published>
    <updated>2020-07-16T01:39:49.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="requests"><a class="markdownIt-Anchor" href="#requests"></a> requests</h1><p>requests用来爬取网站上的信息。有七个主要方法</p><ul><li>r = requests.get(url， params， ** kwargs): url是你想爬取网站的url。通过get构造了一个向服务器请求资源的Request对象。返回一个包含服务器资源的Response对象。</li><li>head(): 获取网页头部信息</li><li>post(url, data, json, kwargs): 在后面添加数据。默认如果是列表等会存储到form字段下，如果是字符串会存在data字段下</li><li>put(): 覆盖网页某一字段数据。例如上传字符串会把data字段覆盖</li><li>patch(): 删改某一位置信息（和put的区别是put必须全部删除，patch只需要修改需要改的部分）</li><li>delete(): 删除url处的资源</li><li>request(method, url, ** kwargs): method有七种，分别是’GET’,'OPTIONS’等，注意其中delete是小写。</li></ul><p>kwargs参数（get,put, patch要比request少params，head,delete相同，post11个）：</p><ul><li>params： 输入参数</li></ul><p>例子 <img src="/images/python%E7%88%AC%E5%8F%963.PNG" alt="" /></p><ul><li>data： 提交资源，一般用用字典的形式</li><li>json： 可以作为request的内容</li><li>headers： http头字段</li><li>cookies：</li><li>auth： http认证功能</li><li>files： 传输文件时使用</li><li>timeout： 设定的超时时间</li><li>proxies： 设定访问代理服务器</li><li>allow_redirects: 默认是True。重定向开关</li><li>stream： 是否对获取内容立即下载。默认立即下载</li><li>verify： 认证SSL证书字段</li><li>cert： 保存本地ssl路径字段</li></ul><p>Response对象属性：</p><ul><li>status_code: 200表示成功，404表示失败（不是200就是失败）</li><li>text： 爬取内容的字符串形式。</li><li>encoding： 猜测的编码形式。这是从服务器的charset字段获得的。如果服务器中没有charset字段，那么会返回ISO-8859-1</li><li>apparent_encoding: 备选编码形式.它是根据内容分析的（可能这个更加准确）</li><li>content： 爬取内容的二进制形式</li><li>request: response对应的request对象</li></ul><h2 id="爬取模板"><a class="markdownIt-Anchor" href="#爬取模板"></a> 爬取模板</h2><p>requests异常种类：<img src="/images/python%E7%88%AC%E5%8F%961.PNG" alt="" /></p><p>模板：<img src="/images/python%E7%88%AC%E5%8F%962.PNG" alt="" /></p><p>有些网页会拒绝爬虫的爬取，这个时候我们可以通过更改头部信息让我们看上去是浏览器爬取。模板为：</p><p><img src="/images/python%E7%88%AC%E5%8F%964.PNG" alt="" /></p><p>想要运用爬虫使用搜索引擎。首先要知道搜索引擎的接口，百度的接口是<code>http://www.baidu.com/s?wd=keyword</code>.360的接口是 <code>http://www.so.com/s?q=keyword</code>。其中keyword就是我们要搜索的内容。所以我们只需要在搜索时让url加上wd或q字段即可。</p><p>模板：<img src="/images/python%E7%88%AC%E5%8F%966.PNG" alt="" /></p><p>获取图片要用二进制读取的方式，模板为<img src="/images/python%E7%88%AC%E5%8F%967.PNG" alt="" /></p><p>ip138是一个用来查询ip内容的网站。它的接口是<code>&quot;http://m.ip138.com/ip.asp?ip=...&quot;</code>于是我们可以通过这个接口去访问ip地址的内容。</p><p>模板：<br /><img src="/images/python%E7%88%AC%E5%8F%968.PNG" alt="" /></p><h1 id="beautifulsoup4"><a class="markdownIt-Anchor" href="#beautifulsoup4"></a> beautifulsoup4</h1><p>beautifulsoup4可以用来解析html和xml。</p><p>导入： import bs4或from bs4 import Beautifulsoup</p><p>基本元素：</p><ul><li>Tag： 标签，如<code>&lt;&gt;&lt;/&gt;</code></li><li>Name: 标签的名字，如<code>&lt;p&gt;&lt;/p&gt;</code>中的p</li><li>Attribute： 标签属性，如<code>&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;</code> 中的src和alt。它是一个字典类型，可以用<code>&lt;tag&gt;.attrs</code>访问</li><li>NavigableString: 两个标签之间的字符串。用<code>&lt;tag&gt;.string</code>访问</li><li>Comment： 标签中间字符串的注释</li></ul><p>一些函数：</p><ul><li>prettify(): 在标签之间添加换行符，让html文本易读。</li><li>find_all(name, attrs, recursive, string, ** kwargs); 查找所有标签，返回列表，它有一种简写形式,标签(…)，因为它十分常用。name是标签名字。attrs是对某一属性值的检索（如果某个标签有这个属性返回的还是这个标签）。recursive是是否对所有子孙进行搜索，默认是True。string是检索两个标签之间的字符串。</li><li>find(),find_parents(),find_parent(),find_next_siblings(),find_next_sibling,find_preivous_siblings,find_previous_sibling(): 这些方法的参数和使用方法相同。其中find()只返回第一个结果并且是字符串类型。</li></ul><p>解析器:  <img src="/images/python%E7%88%AC%E5%8F%969.PNG" alt="" /></p><p>例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&quot;F:&#x2F;html&#x2F;test.html&quot;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    soup &#x3D; BeautifulSoup(f, &quot;html.parser&quot;) # soup代指这个文档，算作一种标签</span><br></pre></td></tr></table></figure><h2 id="标签树的遍历"><a class="markdownIt-Anchor" href="#标签树的遍历"></a> 标签树的遍历</h2><p>任何html文档都可以看成是一个标签树，树的根节点就是<html>，因此我们可以从根节点出发得到整个标签树。</p><p>可以通过soup.html获得html标签。然后标签有如下属性：</p><ul><li>contents。子节点列表。\n也在列表中</li><li>children。子节点迭代类型，用于循环遍历儿子节点</li><li>descendants。包括所有的子孙节点，用于循环遍历</li><li>parent。 父亲标签</li><li>parents。 所有前辈</li><li>next_sibling: 返回html文本顺序的下一个平行标签(也就是父亲节点相同）。navigable_string也在列表中</li><li>previous_sibling： 返回html文本顺序的上一个平行标签</li><li>next_siblings</li><li>previous_siblings</li></ul><h1 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h1><p><img src="/images/python%E7%88%AC%E5%8F%9610.PNG" alt="" /><br /><img src="/images/python%E7%88%AC%E5%8F%9611.PNG" alt="" /></p><p>例如： 0-99表示 [1-9]?/d</p><p>python使用rowstring类型来表达正则表达式，即r’…’。这种String不会出现转义现象</p><p>函数：</p><ul><li>re.compile(pattern, flags=0): 把正则表达式编译成对象，便于多次使用。形成对象之后就可以使用下面的六个方法，都是相对的少了pattern参数</li></ul><p><img src="/images/python%E7%88%AC%E5%8F%9612.PNG" alt="" /></p><ul><li>search(pattern, string, flags=0): pattern是正则表达式字符串后者原生字符串。因为原生字符串有些字符要转义，比较麻烦。String是要搜寻的文本，flags是控制标记</li><li>match匹配的字符串必须是从字符串开头开始。例如r3，如果我们用match搜寻数字，会返回空，因为数字不是从开头开始的。</li><li>split(pattern, string, maxsplit=0, flags=0): maxsplit是最大分割数，多余的部分将作为最后一个元素输出。split函数会去掉匹配上的部分，然后剩下的部分用一个列表输出，maxsplit就是最多去掉多少个匹配的</li><li>sub(pattern, repl, string, count=0, flags=0): repl是替换字符串，count是替换次数</li></ul><p><img src="/images/python%E7%88%AC%E5%8F%9613.PNG" alt="" />这是flags常用标记</p><p>match对象的属性：</p><ul><li>string： 待匹配的文本</li><li>re： 匹配时用的正则表达式</li><li>pos： 正则表达式搜索文本的开始位置</li><li>endpos： 结束位置</li></ul><p>match的方法：</p><ul><li>group(0): 获得匹配后的字符串</li><li>start(): 匹配字符串在原来字符串的开始位置</li><li>end(): 结尾位置</li><li>span(): 返回(start(), end())</li></ul><p>如果没有匹配上，会返回一个空指针</p><p>python默认是贪婪匹配，即返回多个匹配结果，例如search返回的就是最长的那个</p><p>如果我们想匹配最短字符串，就需要在匹配多个字符的后面加上一个问号。例如：</p><p><code>*?</code>、<code>+?</code>、<code>??</code>、<code>&#123;m, n&#125;?</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;requests&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#requests&quot;&gt;&lt;/a&gt; requests&lt;/h1&gt;
&lt;p&gt;requests用来爬取网站上的信息。有七个主要方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r = requests.g</summary>
      
    
    
    
    <category term="Python" scheme="http://xinhecuican.github.io/categories/Python/"/>
    
    
  </entry>
  
</feed>
