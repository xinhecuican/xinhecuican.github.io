<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinhecuican&#39;s Blog</title>
  
  
  <link href="http://xinhecuican.github.io/atom.xml" rel="self"/>
  
  <link href="http://xinhecuican.github.io/"/>
  <updated>2021-03-02T11:21:59.955Z</updated>
  <id>http://xinhecuican.github.io/</id>
  
  <author>
    <name>星河璀璨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无限网络与移动网络</title>
    <link href="http://xinhecuican.github.io/post/4f4fc0a1.html"/>
    <id>http://xinhecuican.github.io/post/4f4fc0a1.html</id>
    <published>2021-03-02T07:53:56.000Z</published>
    <updated>2021-03-02T11:21:59.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础名词"><a class="markdownIt-Anchor" href="#基础名词"></a> 基础名词</h1><ul><li>无线链路： 决定无线链路好坏的有两个特性： 覆盖区域和链路速率</li><li>基站： 基站负责向与之关联的无限主机发送数据和从主机那里接受数据。但是和交换机或路由器还有些不同，它只负责传输数据，其他诸如路由选择，地址分配，DNS名称转换服务都是主机自己沟通。</li></ul><p>无线网络和有线网络在信号上有着显著区别</p><ul><li>递减信号强度： 穿过物体信号减弱</li><li>其他源干扰： 同一个频段的信号会相互干扰。</li><li>多径传播： 电磁波受物体反射和地面反射，会使发送方和接收方之间形成了许多长度不等的路径，使接收方收到的信号模糊。</li></ul><p>**信噪比（SNR）**是收到的信号和噪声强度的比值，也就是说信噪比越高这个信号越可信。</p><p>**比特差错率（BER）**是接收方收到有错传输比特的概率。</p><p><strong>比特传输率</strong>： 也可以认为是传输速度</p><p><img src="/images/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C1.png" alt="" /></p><p>对于一定信噪比来说，传输率越高，比特差错率越低。并且传输率越高,需要越高的信噪比才可以保证比特差错率，但是传输率越高越费电。</p><h1 id="wifi-80211"><a class="markdownIt-Anchor" href="#wifi-80211"></a> WIFI: 802.11</h1><p><img src="/images/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C2.jpg" alt="" /></p><h2 id="体系结构"><a class="markdownIt-Anchor" href="#体系结构"></a> 体系结构</h2><p>该体系结构基本模块为<strong>基本服务集</strong>（BSS）。一个BSS中有一或多个无线站点和一个叫接入点（AP）的中央基站。中央基站类似于以太网，都有MAC地址。</p><h3 id="信道与关联"><a class="markdownIt-Anchor" href="#信道与关联"></a> 信道与关联</h3><p>每个无线站点要发送或接受数据之前都要和一个AP关联。</p><p>当管理员安装一个AP时，管理员会分配一个单字或双字的服务集标识符（SSID)，还要为这个AP分配一个信道号。</p><p>例如802.11运行在2.4 - 2.4835GHZ的频段中，然后802.11将这个频段划分成11个重叠的信道（一个区间）。只有在两个信道相隔4个信道及以上时才没有重叠，这意味着1、6、11是没有重叠的。</p><p>我们想要接入网，就要和一个AP相关联。关联后AP才会向你发送数据，你也只会向它发送数据。但是如果有多个AP要如何选择呢?</p><p>802.11要求每个AP周期性的发送<strong>信标帧</strong>，其中包含SSID和MAC地址。之后就可以从接收到的信标帧中进行选择。</p><p>一般来说会选择最高信号强度的信标帧，但是这也不是唯一的。有时候可能有许多主机同时使用这个AP，从而导致这个AP过载。</p><p>同时主机也可以主动进行广播，如果AP收到了会发送一个探测响应帧应答。</p><h2 id="mac协议"><a class="markdownIt-Anchor" href="#mac协议"></a> MAC协议</h2><p>WIFI的多路访问使用带碰撞避免的CSMA，但是和<a href="https://xinhecuican.github.io/post/bd608ff7.html#%E8%BD%BD%E6%B3%A2%E4%BE%A6%E5%90%AC%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AEcsma">链路层的CSMA有很大区别</a></p><p>802.11发送数据到AP过程大致为：</p><ul><li>主机发送数据到AP，在AP通过CRC校验之后，过了一小段时间发送确认帧，如果主机在一定时间内没有收到确认帧他会重新发送。</li><li>在若干次重传失败之后，主机会放弃该帧。</li></ul><p>由于无线网络信号衰减问题严重，所以数据传输可能不及时，因此不使用传统的方法而是一次传输一个帧，大致过程为</p><ul><li>如果最开始检测信道空闲，将会在一个分布式帧间间隔（DIFS）的时间后发送该帧</li><li>如果不空闲，那么会选择一个随机回退值，在信道空闲时减去该值，直到减到0。减到0后就会发送</li><li>如果收到确认，结束。如果没有收到确认，则将DIFS扩大范围随机选择，重复上述过程。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础名词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>链路层</title>
    <link href="http://xinhecuican.github.io/post/bd608ff7.html"/>
    <id>http://xinhecuican.github.io/post/bd608ff7.html</id>
    <published>2021-02-22T08:18:00.000Z</published>
    <updated>2021-02-26T10:37:52.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><ul><li>节点： 运行链路层协议的设备，例如主机、路由器等</li><li>链路： 将信息传输到相邻节点的通信信道</li><li>链路层帧： 数据报封装在链路层帧中</li></ul><p>链路层提供的服务有：</p><ul><li>链路接入： 媒体访问控制（MAC）协议规定了帧在链路上的传输规则，还协调了多个节点共享当个链路时的问题。</li><li>可靠交付： 和TCP协议一样，这里的可靠交付也是通过差错检测和重发保证的。</li><li>差错检测</li></ul><p>链路层的主题是在网络适配器中实现的，也叫网络接口卡。</p><h1 id="差错检测技术"><a class="markdownIt-Anchor" href="#差错检测技术"></a> 差错检测技术</h1><h2 id="奇偶校验"><a class="markdownIt-Anchor" href="#奇偶校验"></a> 奇偶校验</h2><p>假设发送的信息中有d比特，那么发送方只需要附加上一个比特使得1的个数为偶数即可。接收方接收时检查是否有偶数个1那么就可以得知是否有差错。</p><p>但是这种检测方式检测出错的可能性很大，达到50%，因此需要一种更健壮的检测方式。</p><p>另一种方法时把这些比特划分成i行j列的矩阵，每一行每一列都有一个检验比特，这样不仅可以检测出错误还可以在出错时纠正他。</p><h2 id="检验和方法"><a class="markdownIt-Anchor" href="#检验和方法"></a> 检验和方法</h2><p><a href="https://xinhecuican.github.io/post/2cad8b04.html#%E6%8A%A5%E6%96%87%E6%AE%B5%E7%BB%93%E6%9E%84">在运输层中使用了这个技术</a></p><h2 id="循环冗余检测crc"><a class="markdownIt-Anchor" href="#循环冗余检测crc"></a> 循环冗余检测（CRC）</h2><p>该检测方法的基本思路为： 在d位比特后加上r位校验比特，使得他可以被G正好整除。公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>∗</mo><msup><mn>2</mn><mi>r</mi></msup><mi>X</mi><mi>O</mi><mi>R</mi><mi>R</mi><mo>=</mo><mi>n</mi><mi>G</mi><mspace linebreak="newline"></mspace><mi>D</mi><mo>∗</mo><msup><mn>2</mn><mi>r</mi></msup><mo>=</mo><mi>n</mi><mi>G</mi><mi>X</mi><mi>O</mi><mi>R</mi><mi>R</mi><mspace linebreak="newline"></mspace><mi>R</mi><mo>=</mo><mi>r</mi><mi>e</mi><mi>m</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>r</mi><mfrac><mrow><mi>D</mi><mo>∗</mo><msup><mn>2</mn><mi>r</mi></msup></mrow><mi>G</mi></mfrac></mrow><annotation encoding="application/x-tex">D *  2^r XOR R  = nG\\D * 2^r = nG XOR R\\R = remainder \frac{D * 2^r}{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">G</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">G</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中第二个式子告诉我们如果使用G / (D * 2^r)，余数正好是R（remainder就是余数的意思）,另外这里的除法没有进位借位，遵循异或规则</p><p>例：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">D = <span class="number">101110</span></span><br><span class="line">G = <span class="number">1001</span></span><br><span class="line">r = <span class="number">3</span></span><br><span class="line">      <span class="number">101011</span></span><br><span class="line"><span class="number">1001</span><span class="comment">----------</span></span><br><span class="line">   <span class="number">101110000</span></span><br><span class="line">   <span class="number">1001</span></span><br><span class="line">   <span class="comment">----------</span></span><br><span class="line">    <span class="number">1010</span></span><br><span class="line">    <span class="number">1001</span></span><br><span class="line">    <span class="comment">---------</span></span><br><span class="line">    <span class="number">001100</span>(注意是异或操作）</span><br><span class="line">    <span class="number">001001</span></span><br><span class="line">    <span class="comment">---------------</span></span><br><span class="line">    <span class="number">0001010</span></span><br><span class="line">    <span class="number">0001001</span></span><br><span class="line">    <span class="comment">---------</span></span><br><span class="line">       <span class="number">011</span></span><br><span class="line">结果为<span class="number">011</span></span><br></pre></td></tr></table></figure><h1 id="多路访问链路和协议"><a class="markdownIt-Anchor" href="#多路访问链路和协议"></a> 多路访问链路和协议</h1><p>如何协调多个发送和接收节点对共享广播信道的访问，就是多路访问问题。因为所有节点都可以传输帧，因此可能会出现由节点同时接收到多个帧，也称为碰撞。发生碰撞时，，所有的帧都会混杂在一起，也就是说没有一个帧是有效的。</p><h2 id="信道划分协议"><a class="markdownIt-Anchor" href="#信道划分协议"></a> 信道划分协议</h2><p>一种划分方式是时分多路复用（TDM）。他将时间划分成多个时间帧，然后在时间帧中划分N个时隙，每个时隙给一个节点使用。但是如果同时传输的节点少的话会造成巨大的资源浪费。</p><p>另一种方式是频分多路复用（FDM），他将R bps的信道划分成多段，并且把每一段分给一个节点。</p><p>第三种方式是码分多址（CDMA）。CDMA对每个节点分配一种不同的编码，然后每个节点使用这种编码方式对数据进行编码，这样的话就可以使得信息同时传输而不混淆。</p><h2 id="随机接入协议"><a class="markdownIt-Anchor" href="#随机接入协议"></a> 随机接入协议</h2><h3 id="时隙aloha"><a class="markdownIt-Anchor" href="#时隙aloha"></a> 时隙ALOHA</h3><p>首先进行下列假设：</p><ul><li>所有帧由L比特组成</li><li>时间被划分成L/R秒时隙（一个时隙就是传输一帧的时间）</li><li>节点只在时隙起点传输帧</li><li>节点是同步的，每个节点都知道时隙何时开始</li><li>如果一个时隙中有碰撞，那么在时隙结束前所有节点都可以检测到该事件</li></ul><p>p是一个频率，在每个节点中，时隙ALOHA的操作为：</p><ul><li>当节点有一个新帧要发送时，它等到下一个时隙开始传输</li><li>如果没有碰撞，该节点成功传输，则无需重传</li><li>如果有碰撞，那么该节点在时隙结束前检测到该碰撞。该节点以概率p在后续的每个时隙中重传帧</li></ul><p>假设每个节点都在试图以p概率传输一帧，那么该帧成功传输的概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">p * (1-p)^{N-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，求极限得最大效率为0.37。也就是说一个100Mbps速率的系统成功吞吐量为37Mbps</p><h3 id="aloha"><a class="markdownIt-Anchor" href="#aloha"></a> ALOHA</h3><p>它没有时隙，每次直接传输，如果发生碰撞立刻以概率p重新发送，之后每隔一帧判断一次。</p><p>它的最大效率为时隙ALOHA的一半。</p><h3 id="载波侦听多路访问csma"><a class="markdownIt-Anchor" href="#载波侦听多路访问csma"></a> 载波侦听多路访问（CSMA）</h3><p><strong>具有碰撞检测的CSMA</strong></p><p>这种方法在检测到碰撞时会立刻停止传输，但是这时已经上传的数据都是损坏的。大致过程为</p><ol><li>适配器从网络层获得数据报，准备链路层帧，并放入到帧适配器缓存中</li><li>如果信道空闲则传输</li><li>如果传输过程中发现该信到有其他适配器传输，则停止传输</li><li>终止传输后，等待一个随机时间年，返回步骤2</li></ol><p>这里要求随机时间量是因为多个适配器会在接近时间发现碰撞，如果等待相同时间同时传输则又会发生碰撞。</p><p>随机选择的时间在[0, 1, 2, …, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>]范围内</p><p>它的效率为 $ \frac{1}{1 + 5d_{prop} / d_{trans}$.</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{prop}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示信号在适配器传播所需最大时间，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{trans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示传输一个最大长度的以太网帧的时间</p><h3 id="轮流协议"><a class="markdownIt-Anchor" href="#轮流协议"></a> 轮流协议</h3><p>轮流就是每个节点轮流来，他和前面的时隙ALOHA不同的是这里轮流的基础是帧而不是一定的时间。</p><p>一种实现方法为让一个节点作为主节点，有他向其他节点发送报文来告诉他可以传输几个帧，传输完成之后主节点又进行调度。</p><p>另一种是用一个称为令牌的特殊帧在节点之间以某种固定次序传递。</p><h1 id="交换局域网"><a class="markdownIt-Anchor" href="#交换局域网"></a> 交换局域网</h1><p>在链路层，帧不通过网络层地址进行传输和识别，他有自己的一套寻址方法</p><p><img src="/images/%E9%93%BE%E8%B7%AF%E5%B1%821.jpg" alt="" /></p><p>如图，方形式链路层交换机，而圆形是路由器。而通过链路层交换机就完成了一个微型的网络。</p><h2 id="链路层寻址"><a class="markdownIt-Anchor" href="#链路层寻址"></a> 链路层寻址</h2><h3 id="mac地址"><a class="markdownIt-Anchor" href="#mac地址"></a> MAC地址</h3><p>实际上不是主机或路由器有链路层地址，而是适配器（网络接口）有链路层地址，也就是说一个主机上可能有多个链路层地址。注意链路层交换机上并没有链路层地址，交换机自行发送而不需要主机或者路由器明确到哪个交换机。</p><p>MAC地址具有两个字节，通常是以16进制进行描述。例如: 1A-23-F9-CD-06-9B。他和IP的一点区别是MAC地址不可改变（虽然现在通过某些软件也可以改变）。</p><p>MAC地址没有相同的，因为IEEE在进行管理，一般是IEEE控制前24个比特，后24个比特由购买商自己决定。</p><h3 id="地址解析协议"><a class="markdownIt-Anchor" href="#地址解析协议"></a> 地址解析协议</h3><p>我们可以获得目的IP是因为DNS解析，但是我们怎么获得目的适配器（主机）的MAC地址呢？这就需要ARP了。</p><p>ARP可以将IP地址转换成MAC地址。他和DNS作用类似但是又有不同。DNS可以在全球范围内解析但是ARP只能解析同一个局域网中的地址。</p><p>ARP是通过ARP表进行工作的，ARP表包含IP地址、MAC地址、TTL三部分，例如：</p><p>| IP地址 | MAC地址 | TTL<br />|-|-|<br />| 222.222.222.221 | 88-B2-2F-54-1A-0F | 13:45:00 |<br />| 222.222.222.223 | 5C-66-AB-90-75-B1 | 13:52:00 |</p><p>这个表并不包含所有MAC地址。并且它的过期时间一般也不长（20分钟），想要通过这个表找到目标MAC地址，就需要发送一个特殊的<strong>ARP分组</strong>。ARP分组包括发送和接收的IP和MAC地址。</p><ul><li>如果ARP表中有对应IP，则直接返回MAC地址</li><li>向适配器发送一个ARP分组，并且适配器通过MAC广播地址发送分组。</li><li>接收到ARP分组的模块都检查自己的IP地址。如果匹配就发送响应分组。与此同时将发送方的IP和MAC记录到ARP分组中</li></ul><h2 id="以太网"><a class="markdownIt-Anchor" href="#以太网"></a> 以太网</h2><p>以太网是一种有限局域网</p><h3 id="结构"><a class="markdownIt-Anchor" href="#结构"></a> 结构</h3><p>发送适配器将以太网帧发送到物理层，然后接收适配器从物理层中接收到帧并且提取出IP数据报将其传递到网络层。</p><p>以太网帧分为六个字段，分别是：</p><ul><li>数据字段（46 - 1500字节）： 这个字段承载IP数据报</li><li>目的地址： 目的地址是MAC地址</li><li>源地址：</li><li>类型字段（2字节）： 类型字段允许以太网复用不同的网络层协议。</li><li>CRC（循环冗余检测， 4字节）： 检测帧是否有差错</li><li>前同步码（8字节）： 前同步码的前7个字节都是10101010， 最后一个字节是10101011. 它的作用是唤醒接收适配器，并且将它的时钟和发送方时钟同步</li></ul><h3 id="链路层交换机"><a class="markdownIt-Anchor" href="#链路层交换机"></a> 链路层交换机</h3><p>链路层交换机进行过滤和转发。过滤指的是拒绝某些帧，转发指的是发送到某个输出接口。他们都依赖<strong>交换机表</strong>，例如</p><table><thead><tr><th>地址</th><th>接口</th><th>时间</th></tr></thead><tbody><tr><td>62-FE-F7-11-89-A3</td><td>1</td><td>9:32</td></tr><tr><td>7C-BA-B2-B4-91-10</td><td>3</td><td>9:36</td></tr></tbody></table><p>交换机表和ARP表类似，都不包含所有的表项。当一个帧传输到交换机时，有几种可能。</p><p>首先假设从x接口进入</p><ol><li>如果表中没有对应地址，则向除x外的接口发送该帧的副本</li><li>如果表中有地址并且接口不是x，则发送到对应接口</li><li>如果表中有地址并且接口是x，则直接丢弃。（因为这表明它已经在这个接口内广播过了）</li></ol><p>交换机表具有<strong>自学习</strong>功能，它可以自动更新表项。每次有入帧就将发出地址和接口记录。并且在一段时间后会抛弃表项。</p><h2 id="虚拟局域网"><a class="markdownIt-Anchor" href="#虚拟局域网"></a> 虚拟局域网</h2><p>局域网一般都是一块一块的，每个部分都有自己的交换机，并且交换机之间互联。但是这种构建方式有一些缺点。</p><ul><li>缺乏流量隔离： 限制流量的作用，一是限制广播的流量来改善局域网的性能，二是有利于安全保护</li><li>交换机的无效使用： 例如有很多个小组，每个小组都只有很少的人，如果每个小组都需要一台交换机的话就会带来流量的浪费，但是如果只用一台交换机就无法流量隔离。</li><li>管理用户： 用户的位置发生改变就需要改变物理布线。</li></ul><p>为了解决这些难题，提出了<strong>虚拟局域网（VLAN）</strong>。虚拟局域网可以在一个物理设备中定义多个虚拟局域网。一种方法时交换机端口由管理员进行分组，每一组可以看成一个虚拟局域网，广播时也只会从这个虚拟局域网中发出而不是直接发送到所有端口。</p><p>具体可以在交换机中维护一张端口到VLAN的映射表，交换机仅在相同VLAN的端口之间交付帧。</p><p>但是如何把一个VLAN中的数据传输到另外的VLAN？一种方式是将VLAN交换机的一个端口和外部路由器相连，这样经由路由器就可以实现VLAN的数据传输了（有时在交换机内部就有一个路由器）。</p><p>一种扩展性较好的交换机互联方式为<strong>VLAN干线链接</strong>。也就是交换机上有一个端口和其他交换机链接，所有的VLAN共享这个端口，可以通过这个端口传递数据到其他交换机上。这时为了识别不同的VLAN，需要在以太网帧首部加上四字节的VLAN标签。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="网络" scheme="http://xinhecuican.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="http://xinhecuican.github.io/post/769365ef.html"/>
    <id>http://xinhecuican.github.io/post/769365ef.html</id>
    <published>2021-02-13T11:41:00.000Z</published>
    <updated>2021-02-21T11:27:02.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h1><p>在应用层和运输层已经将数据封装号了，网络层所做的工作就是把数据尽可能传输过去，其中的难点在于选择传输的路径。有些传输算法可能导致需要经过4个路由器，而有的只需要两个。</p><ul><li>转发： 从输入接口转移到输出接口，是路由器内部过程。路由器本身有许多个接口，可能要从一个接口输入再从另一个接口输出。</li><li>路由选择： 选择从源到目的地的路径。</li></ul><p>路由器中的一个关键元素就是<strong>转发表</strong>，它决定了这个路由器可以传输到哪些路由器，</p><h1 id="路由器工作原理"><a class="markdownIt-Anchor" href="#路由器工作原理"></a> 路由器工作原理</h1><p>路由器的组件有：</p><ul><li>输入端口： 输入端口负责接收数据和查找。查找指的是通过转发表找到输出端口。这里的端口并不是逻辑端口（如计算机上的端口）而是交换机上实实在在的端口。</li><li>交换结构： 将输入端口连接到输出端口</li><li>输出端口：</li><li>路由选择处理器： 它是操作转发表的结构。它通过路由选择协议来改变维护转发表</li></ul><h2 id="输入端口处理"><a class="markdownIt-Anchor" href="#输入端口处理"></a> 输入端口处理</h2><p>例如：</p><table><thead><tr><th>目的地址范围</th><th>链路接口</th></tr></thead><tbody><tr><td>0xC8171000 - 0xC81717FF</td><td>0</td></tr><tr><td>0xC8171800 - 0xC81718FF</td><td>1</td></tr><tr><td>0xC8171900 - 0xC8171FFF</td><td>2</td></tr><tr><td>其他</td><td>3</td></tr></tbody></table><p>可以看到他们的范围中前缀都是一样的，因此我们可以使用前缀来表示范围</p><table><thead><tr><th>前缀</th><th>接口</th></tr></thead><tbody><tr><td>1100 1000 0001 0111 0001 0</td><td>0</td></tr><tr><td>1100 1000 0001 0111 0001 1000</td><td>1</td></tr><tr><td>1100 1000 0001 0111 0001 1</td><td>2</td></tr><tr><td>其他</td><td>3</td></tr></tbody></table><p>从最高位向最低位匹配，寻找最长的匹配项。这种比较是在硬件中实现的，速度在纳秒级别。</p><h2 id="交换"><a class="markdownIt-Anchor" href="#交换"></a> 交换</h2><p>交换就是从输入端口到输出端口的过程，交换也有多种实现方式。</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%821.jpg" alt="" /></p><ul><li>经内存交换： 经内存交换是在路由选择处理器的直接控制之下完成的。处理器决定输出端口并且将数据输送到输出窗口的缓存中</li><li>经总线交换： 输入端口通过一条共用的总线传递，这条总线连接所有的输出端口。然后在输入端口处贴上一个标签然后在总线处决定具体要传输到哪条总线，在输出端口消除标签</li><li>经互联网络交换： 如图2，这种模式可以并行的转发多个分组，但是输出总线一次只能运输一条数据，因此如果有多个数据到了同一个输出端口还需要等待。</li></ul><h2 id="排队"><a class="markdownIt-Anchor" href="#排队"></a> 排队</h2><p><strong>输入排队</strong></p><p>如果交换速率不够快，例如输入速率为v，交换速率为1.5v,有两个输入口进入同一个输出端口，那么两个输入口接收完毕之后还必须等N / 3v时间。而如果交换速率&gt;=2v,那么就可以边输入边转移，当输入完毕时全部转移到输出接口（理想情况）</p><p><strong>输出排队</strong></p><p>当有许多个输入分组到达同一个输出端口时就会导致数据的积累，输出端口中有一个缓存，但是如果持续的输入到这个缓存中便会使缓存满，缓存满要么丢弃已有分组，要么拒绝新接收的分组，都会导致丢包。</p><p>现在一般都有丢弃不重要分组的机制，但是具体丢弃哪些分组就涉及到了<strong>分组调度</strong></p><h2 id="分组调度"><a class="markdownIt-Anchor" href="#分组调度"></a> 分组调度</h2><p><strong>先进先出</strong></p><p><strong>优先权排队</strong></p><p>优先权高的在前面，同一优先权先来先服务。有时每个优先权都有自己的队列。</p><p><strong>循环和加权公平排队</strong></p><p>同样有多个队列，输入到同一队列中的归为一队。最简单的方式就是先服务第一队，再服务第二队，这样依次循环下去。</p><p>其次还可以为每一类赋一个加权值w，然后每个类的服务时间是 w / w总</p><h1 id="ipv4"><a class="markdownIt-Anchor" href="#ipv4"></a> IPv4</h1><h2 id="数据报格式"><a class="markdownIt-Anchor" href="#数据报格式"></a> 数据报格式</h2><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%822.png" alt="" /></p><ul><li>版本： 指的是IPv4协议的版本</li><li>首部长度： 因为有可变长度的选项，所以要表明首部长度</li><li>服务类型： 讲一些需要低时延、高吞吐量的数据报和可靠性的数据报分开来</li><li>数据包长度： 总长度</li><li>标识、标志、位偏移： 和IP分片有关</li><li>寿命（TTL）： 确保数据包不会永远由于路由选择环路在网络中循环。每当一台路由器处理数据报时，TTL-1</li><li>协议： 只有到目的地才会使用。指示了要交给哪个运输层协议。例如6代表要交给TCP，17则要交个UDP</li><li>首部检验和： 计算过程为： 每两个字节当成一个数，然后求和再取反码。</li></ul><h2 id="数据报分片"><a class="markdownIt-Anchor" href="#数据报分片"></a> 数据报分片</h2><p>由于在链路层所能一次输送的数据量不一致并且可能小于数据报，因此可能会出现把一个数据报拆分成若干个小数据报然后合并的事件。这个时候就要使用标识位来标识这是第节个小数据报，每发送一个就让他加一。标志位是为了区分最后一个小数据报的，最后一个小数据报标志位是0，其他都是1，这样一旦检测到0就可以立刻合并。</p><h2 id="编址"><a class="markdownIt-Anchor" href="#编址"></a> 编址</h2><p>我们将主机和物理链路之间的边界叫接口，通常主机只有一个接口，而交换机有多个接口。</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%823.jpg" alt="" /></p><p>如图一个路由器连接着一些主机，可以看到有些主机前缀相同。</p><p>例如： 223.1.1.1 和 223.1.1.2 和 223.1.1.3 和 223.1.1.4前面24位都相同。可以把这些前缀相同的主机看成一个小的网络，而这些网络之间通过交换机进行连接。</p><p>我们可以把前缀相同的记成223.1.1.0/24，其中/24可以称为<strong>子网掩码</strong>，他表示这条线路之后的前24位都相同。</p><p>一般来讲每一个ISP或组织机构都会分配一个掩码，然后从本地ISP接入网时都会分配一个掩码下的IP地址，然后本地ISP在一个更大掩码的交换机下。但是组织不是固定不变的，并且更换IP所需工作量巨大， 如果它跑到另一个地区并且在那里接入网络这时就会出现查无此机的现象（因为数据一定会分发到原来的ISP下）</p><p>考虑这样的情况223.1.1.1跑到了223.1.3.1的地盘，而数据还是从223.1.1.0/24接口转发。</p><p>为了解决这个问题，在接入新的网络时上层交换及还要接受和新转入主机有关的数据并且采用最长前缀匹配。也就是说223.1.3.0/24还需要接收223.1.1.1的数据</p><p><strong>动态主机配置协议</strong></p><p>现在用户是经常移动的，每移动到新地区就需要拥有对应的掩码，不然就无法联网。为了处理移动用户，便专门使用<strong>动态主机配置协议（DHCP）</strong></p><p>DHCP是在某个ISP或接口处连接一个DHCP服务器，或者至少给出处理该接口的DHCP服务器IP地址。通过DHCP服务器，我们可以动态的分配IP。</p><p>连接过程：</p><ul><li>DHCP服务器发现： 一台新到达的主机首先要发现负责的DHCP服务器，这可以使用DHCP发现报文。用户使用UDP向67端口发送发现报文。并且它的目的地址是255.255.255.255（广播目的地址）并且本地IP设定为0.0.0.0.</li><li>DHCP服务器提供： 当DHCP服务器收到DHCP发现报文时，会发一个返回报文，这个报文的目的地址也是255.255.255.255（发现报文没告诉源地址，也没有源地址），如果有几台响应，那么就根据向客户推荐IP数量，IP地址有效时间等因素挑最好的。</li><li>DHCP请求：</li><li>DHCP ACK：</li></ul><p><strong>网络地址转换</strong></p><p>在一些小家庭中的网络可能编址一模一样（因为之间开始并没有联系也没有连接到互联网），但是 如果小家庭中的网络连接到互联网时怎么办呢？如果不进行地址转换，可能会导致成千上万个重复地址。这时就需要NAT进行转换了。</p><p>NAT路由器甚至不像路由器，所有进入家庭网络的报文首先都需要经过它，所有从家庭网络发出的报文首先要经过NAT的转换。它相当于是家庭网络和外界的接口。</p><p>所有从家庭网络发出的报文首先要经过NAT，NAT会把端口号改成自己空闲的端口号并且把IP地址改成自己的IP地址（因为家庭网络中的IP对外界而言是无效的，而NAT路由器使用的是DHCP分配的IP）。并且有一张<strong>NAT转换表</strong>记录了内网的IP和端口号。</p><p>响应报文的目的地也是NAT路由器，然后由NAT路由器根据NAT转换表转发给家庭网络内的成员。</p><h1 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h1><p>由于IPv4地址即将耗尽，人们不得不开发出地址更多的空间。IPv6有128字节，是IPv4的2^96倍，也就是说不可能被用完。</p><h2 id="数据报格式-2"><a class="markdownIt-Anchor" href="#数据报格式-2"></a> 数据报格式</h2><ul><li>版本：</li><li>流量类型： 和IPv4中服务类型类似</li><li>流标签： 用来表示优先级的</li><li>有效载荷长度： 表示了跟在40字节数据报后的字节数量（也就是除首部外的大小）</li><li>下一个首部： 标识数据报要交给哪个协议</li><li>跳限制： 每过一个路由器减一</li></ul><p>他和IPv4相比少了</p><ul><li>分片： IPv4不允许在路由器中拆分合并。如果IPv6数据报太大而不能传输，路由器只需丢掉数据报然后发送一个分组太大的差错报文即可。</li><li>首部检验和： 因为IPv6的设计者认为在应用层和传输层都有了检验和，这里显得有些多余，并且耗时巨大</li></ul><h2 id="从ipv4到ipv6的迁移"><a class="markdownIt-Anchor" href="#从ipv4到ipv6的迁移"></a> 从IPv4到IPv6的迁移</h2><p>一种方式是借用现有的IPv6网络，起点和终点是IPv6网络，中间是IPv4网络，我们将中间的IPv4网络称为<strong>隧道</strong>。首先在IPv6网络中使用IPv6数据报，然后到IPv4部分再套一个IPv4数据报的头部，IPv4数据报的内容就是IPv6数据报，之后在IPv4网络中进行传输。</p><h1 id="路由选择算法"><a class="markdownIt-Anchor" href="#路由选择算法"></a> 路由选择算法</h1><p>我们可以把路由器简化成一个图，图中的节点代表路径，边上的值代表路径之间的消耗（一般由物理长度确定），如果两个路由器之间没有路，那么长度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>,现在任务简化成了找单源最短路。</p><p>路由算法的一种分类方式是根据算法是集中计算还是分类计算来划分。</p><ul><li>集中式路由算法： 这种算法在计算开始之前就有全局的网络信息，知道每一个节点的消耗。</li><li>分散式路由选择算法： 每个节点只知道部分信息，然后通过这部分信息知道下一步的路径。</li></ul><h2 id="链路状态路由选择算法"><a class="markdownIt-Anchor" href="#链路状态路由选择算法"></a> 链路状态路由选择算法</h2><p>这种算法是一种集中式算法，每个节点都知道完整的网络信息。在实践中，通常用<strong>链路状态广播算法</strong>来实现。在知道信息之后，就可以使用<a href="https://xinhecuican.github.io/post/15201.html#dijkstra">Dijkstra算法</a></p><h2 id="距离向量"><a class="markdownIt-Anchor" href="#距离向量"></a> 距离向量</h2><p>距离向量算法是一种分散式的路由选择算法。其实这里使用的是<a href="https://xinhecuican.github.io/post/15201.html#bellman-ford">Ford算法</a></p><p>首先每个端点对它直接相连的端点的消耗值是清楚的。消耗值是c(x, v)【从x节点到v节点】</p><ul><li>设定从n节点到某个节点（m）的最短距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{n}(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，初始化距离为从n到m的距离。也就是图中的第一列。</li><li>之后首先向各个端点传输一次自己的最短距离表，然后发现和自己表不同并且如果开始时无穷就直接填表</li><li>之后按照<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">dis_x(y) = min{c(x, v) + dis_v(y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span>更新值（更新值时使用传过来的表），每次更新完成之后就向直接相邻的节点发送更新后的值，然后邻居节点也用上式进行比较，如果有新值也进行更新</li></ul><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%825.jpg" alt="" /></p><h3 id="链路故障"><a class="markdownIt-Anchor" href="#链路故障"></a> 链路故障</h3><p>上面算法不是完全可靠的，例如x到y的值从2到60。那么我们计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_y(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>时会得到$D_y(x) = min{c(y, x) + D_x(x), c(y,z) + D_z(x)} = min{60 + 0, 1 + 3} = 4 $.这毫无疑问是错误的，更重要的是这会导致一直循环。</p><p>解决问题的一个方法时首先让到达终点的路变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>，例如D_z(x) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>。这样就会先将其他的路径全更新了，待到更新完成之后再换成真实值，然后再进行更新。</p><h2 id="自治系统内部的路由选择策略"><a class="markdownIt-Anchor" href="#自治系统内部的路由选择策略"></a> 自治系统内部的路由选择策略</h2><p>互联网是一个庞大的系统，如果所有主机都参与路由选择，那么开销是不可估计的，并且不同的机构可能想使用不同的管理策略。因此可以按照机构或地区分成一个个子系统，子系统中可以单独操作。</p><h3 id="开放最短路优先ospf"><a class="markdownIt-Anchor" href="#开放最短路优先ospf"></a> 开放最短路优先（OSPF)</h3><p>开放最短路优先使用的算法是Dijkstra算法。但是这里有一个管理员设置链路开销，可能会把所有开销设置成1，那么关注的是最少跳数。如果按链路容量反比设置，那么表示不鼓励使用低宽带链路。</p><p>并且为了保证链路的健壮性，当链路接入或断开时会第一时间发送信息。如果没有变化也会每隔30分钟发送当前状态信息。</p><h2 id="isp之间路由选择bgp"><a class="markdownIt-Anchor" href="#isp之间路由选择bgp"></a> ISP之间路由选择：BGP</h2><p>如果路由器在自治系统边缘，那么就叫他网关路由器，否则叫他内部路由器。网关路由器负责两个自治系统之间的链接，他们的连接叫外部BGP。反之为内部BGP。</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%826.jpg" alt="" /></p><p>使用BGP选择策略时要传递一些信息，这些信息统称为路由，其中最重要的两个属性是AS-PATH和NEXT-HOP</p><ul><li>AS-PATH: 指的是已经通过的自治系统的列表，它可以痛啊哦路径并且检测环路。例如从1a到3d，当他到达3a时AS-PATH = “AS2 AS3”,而如果是1d到3d，那么值为AS3</li><li>NEXT-HOP: 指的是AS-PATH中起始位置的IP地址（注意AS-PATH中不包含起始的自治系统）。例如上面第一个例子NEXT-HOP = 2a左边端口地址。第二个例子NEXT-HOP = 3d左边端口地址。</li></ul><h3 id="热土豆路由选择"><a class="markdownIt-Anchor" href="#热土豆路由选择"></a> 热土豆路由选择</h3><p>热土豆选择算法是一种贪心算法，它的思想是尽快将数据穿输出自己的自治系统。假设我们已经知道了到终点的所有可能路径，然后计算起始点到NEXT-HOP之间的最短开销，然后把这个最短开销对应的接口和终点自治系统记录(x, I)到自己的转发表上</p><h3 id="路由器选择算法"><a class="markdownIt-Anchor" href="#路由器选择算法"></a> 路由器选择算法</h3><p>路由器选择算法是热土豆选择算法的改进。它对热土豆选择算法加了许多限制。它的运行流程如下</p><ol><li>路由被指定一个本地偏好值。这个值可能由路由器设置或者从相同自治系统中的另一台路由器中学习得到。具有最高本地路由编号值的将被优先选择。</li><li>如果学习偏好值相同，那么寻找最短AS-PATH的路由</li><li>否则，按照热土豆路由选择</li><li>否则，按照BGP标识符选择</li></ol><h2 id="ip任播"><a class="markdownIt-Anchor" href="#ip任播"></a> IP任播</h2><p>IP任播服务通常被利用于DNS中，他主要对具有相同内容但是位置不同的服务器进行最佳选择。</p><p>例如CDN公司的多台服务器配制了相同的IP地址。然后某台BGP路由器收到了该IP地址的多个路由通告，之后根据路由器选择算法选出最佳的一个。</p><h1 id="sdn控制平面"><a class="markdownIt-Anchor" href="#sdn控制平面"></a> SDN控制平面</h1><p>传统路由器和交换机基于IP地址进行转发，而通用转发除了IP地址外，还有许多其他因素如TCP端口、IP协议等用于<strong>匹配</strong>，匹配完成之后不一定只有转发一个<strong>动作</strong>，还可能重写、拒绝等等一系列操作。</p><p>通用转发是传统转发的拓展，它拓展了匹配和动作的范围。</p><h2 id="匹配和动作"><a class="markdownIt-Anchor" href="#匹配和动作"></a> 匹配和动作</h2><p>在分组交换机中有匹配和动作表，这个表由远程控制器进行维护，这个表又被称为<strong>流表</strong>，它包含以下内容</p><ul><li>首部字段值集合： 这是用于匹配的部分，也就是下图的字段。这些字段可以是空也可以使用正则表达式替代</li><li>计数器集合： 计数器可以包括该表项已经匹配的分组数量，还可以记录自上次更新所经过的时间</li><li>动作集合： 每个匹配就会对应一个动作。这些动作可以是转发到给定的输出端口，丢弃分组，复制分组和发送到多个输出端口。</li></ul><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%827.jpg" alt="" /></p><p>如图是OpenFlow(一种通用转发标准）的匹配字段。这些匹配字段实际上就是各个协议的首部字段中一些重要内容。</p><p>每个流表项可以有零个或多个动作列表，如果有多个动作，那么这些动作按序执行。</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E5%B1%828.jpg" alt="" /></p><p>例如我们想把h5的数据发送到h3,并且想要从s3-&gt;s1-&gt;s2方式进行发送，那么流表为</p><table><thead><tr><th>匹配</th><th>动作</th></tr></thead><tbody><tr><td><strong>s1流表</strong></td><td></td></tr><tr><td><code>Ingress Port=1; IP Src=10.3.*.*; IP Dst=10.2.*.*</code></td><td>Forward(4)</td></tr><tr><td><strong>s3流表</strong></td><td></td></tr><tr><td><code>IP Src=10.3.*.*; IP Dst=10.2.*.*</code></td><td>Forward(3)</td></tr><tr><td><strong>s2流表</strong></td><td></td></tr><tr><td><code>Ingress Port=2; IP Dst=10.2.0.3</code></td><td>Forward(3)</td></tr></tbody></table><p>其中的Forward表示要把数据发送到哪个输出接口</p><h1 id="icmp因特网控制报文协议"><a class="markdownIt-Anchor" href="#icmp因特网控制报文协议"></a> ICMP：因特网控制报文协议</h1><p>ICMP被用来进行主机和路由器之间的沟通，它最典型的用途是差错报告。它在体系结构中位于IP之上，换言之ICMP包括IP。</p><p>ICMP结构为一个类型字段和一个编码字段，不同的类型和编码组合有不同的作用</p><table><thead><tr><th>ICMP类型</th><th>编码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>回显回答</td></tr><tr><td>3</td><td>0</td><td>目的网络不可达</td></tr><tr><td>3</td><td>1</td><td>目的主机不可达</td></tr><tr><td>3</td><td>2</td><td>目的协议不可达</td></tr><tr><td>3</td><td>3</td><td>目的端口不可达</td></tr><tr><td>3</td><td>6</td><td>目的网络未知</td></tr><tr><td>4</td><td>0</td><td>拥塞控制</td></tr><tr><td>8</td><td>0</td><td>回显请求</td></tr><tr><td>10</td><td>0</td><td>路由器发现</td></tr><tr><td>11</td><td>0</td><td>TTL过期</td></tr><tr><td>12</td><td>0</td><td>IP首部损坏</td></tr></tbody></table><p>其中回显请求也就是ping命令所发送的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="网络" scheme="http://xinhecuican.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>运输层</title>
    <link href="http://xinhecuican.github.io/post/2cad8b04.html"/>
    <id>http://xinhecuican.github.io/post/2cad8b04.html</id>
    <published>2021-02-05T02:57:00.000Z</published>
    <updated>2021-02-12T08:07:00.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="多路复用和多路分解"><a class="markdownIt-Anchor" href="#多路复用和多路分解"></a> 多路复用和多路分解</h1><p>多路分解： 多路分解指的是将报文段中的数据提交到正确的套接字<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="应用程序接受信息的接口">[1]</span></a></sup></p><p>多路复用：从主机不同套接字上收集数据，并为每个数据块加上首部信息（如源端口号和目的端口号等）形成报文段，然后传到网络层。</p><p>多路复用也就是从传输层到网络层的过程，而多路分解是从传输层到应用层的过程</p><p>要想提交到正确的套接字，其实也就是提交到正确的端口。在计算机中端口范围在0-65535中，其中0-1023是周知端口号，有特殊用途，而其他就是分配给应用程序使用的了。</p><p><strong>UDP的多路复用和多路分解</strong></p><p>UDP的运输层报文段包括应用程序数据，源端口号，目的端口号和其他两个值。通过目的端口号可以标识要送到目的的具体位置，而源端口号则是为了送回数据时使用的。</p><p><strong>TCP的多路复用和多路分解</strong></p><p>TCP和UDP区别是TCP套接字是一个四元组(源IP地址， 源端口号， 目的IP地址， 目的端口号）来标识的。因此他还可以让两个到同一个端口号的TCP连接互不干扰（因为有了源IP地址，所以可以分辨出这个数据时从哪发出的）</p><h1 id="udp"><a class="markdownIt-Anchor" href="#udp"></a> UDP</h1><p>UDP是一种不可靠运输，数据可能会丢失，那为什么需要UDP而不使用TCP呢？</p><ul><li>速度更快， TCP在链接建立之前需要经过三次握手，而UDP直接传输</li><li>无连接状态： TCP需要维护连接状态。包括接受发送缓存，用色控制参数和序号及确认号参数等。</li></ul><h2 id="报文段结构"><a class="markdownIt-Anchor" href="#报文段结构"></a> 报文段结构</h2><p>UDP报文段包括源端口号，目的端口号，长度，检验和和报文组成。长度指示了该报文段总的字节数（包括报文的）并且前面四个字段大小都是两字节</p><p>检验和是为了提供差错检验机制的。具体过程为将其他三个字段相加，舍去溢出并取反。之后检验就将这四个字段相加，如果结果全是1则正常。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0110011001100000</span><br><span class="line">0101010101010101</span><br><span class="line">1000111100001100</span><br><span class="line"></span><br><span class="line">相加并舍去溢出为：</span><br><span class="line">0100101011000010</span><br><span class="line"></span><br><span class="line">取反为：</span><br><span class="line">1011010100111101</span><br><span class="line">这就是检验和的值</span><br><span class="line"></span><br><span class="line">然后检验时将四个相加舍去溢出结果应该是1111111111111111</span><br></pre></td></tr></table></figure><h1 id="可靠数据传输"><a class="markdownIt-Anchor" href="#可靠数据传输"></a> 可靠数据传输</h1><p>传输过程为从应用层到传输层是可靠传输，然后从传输层到网络层是不可靠传输，然后从网络层到传输层是可靠传输。</p><h2 id="经完全可靠信道的可靠数据传输"><a class="markdownIt-Anchor" href="#经完全可靠信道的可靠数据传输"></a> 经完全可靠信道的可靠数据传输</h2><p><img src="/images/%E8%BF%90%E8%BE%93%E5%B1%82.jpg" alt="" /></p><p>等待上层的调用指的是从应用层到网络层，等待下层代用相反。rdt_send是从应用层向传输层传输（并且是可靠传输）。</p><p>这是一个有限状态自动机， 横线上方是引起变动的事件，横线下方是发生是采取的动作。</p><h2 id="经比特差错信道的可靠数据运输"><a class="markdownIt-Anchor" href="#经比特差错信道的可靠数据运输"></a> 经比特差错信道的可靠数据运输</h2><p>底层信道可能会出现某些问题导致数据不可靠。因此为了保证数据的可靠性，可能需要对传输过来的数据进行重新检测，返回报文可能会出现肯定确认和否定确认两种情况。为了保证传输稳定，可以使用自动重传请求协议（ARQ)</p><p>ARQ还需要另外三种功能才能进行自动重传</p><ul><li>差错检测：</li><li>接收方反馈： 也就是前面说的肯定确认(ACK)和否定确认(NAK)</li><li>重传： 当接收方收到有差错的分组时，发送方将重传该分组。</li></ul><p>但是接收方反馈的信号也可能出现问题，本来是肯定确认现在变成了无意义的代码。为了解决这个问题可以使用下列方法</p><ul><li>让接收方再次发送信息，但是存在这次信息仍然被干扰的问题。</li><li>增加足够多的检验和比特</li><li>第三种方法是接收到模糊信息直接重发分组。但是这种方法的问题是接收方不知道下一个分组是否是重发的分组，因此无法决定信息用途。</li></ul><p>为了解决第三种方法的问题，可以在分组前加一个序号字段。这个字段对分组进行了编号。现在假设这个字段不会受到干扰，那么接收方接受到的分组和上一个分组相同，表明这是重发分组。</p><h2 id="经丢包信道的可靠数据传输"><a class="markdownIt-Anchor" href="#经丢包信道的可靠数据传输"></a> 经丢包信道的可靠数据传输</h2><p>假设现在发送的分组或者接收方反馈的信息发生了丢失，这种情况下发送方都接收不到反馈，那么发送方可以选择在等待足够长的时间过后认为<strong>分组已丢失</strong>，只需要重新发送分组即可。</p><p>为了实现等待一定时间重传的机制，可以使用倒计时计时器。每次经过一定时间后，如果没有受到恢复，则可以进行重传。</p><h2 id="流水线可靠数据传输协议"><a class="markdownIt-Anchor" href="#流水线可靠数据传输协议"></a> 流水线可靠数据传输协议</h2><p>前面加上了计时器机制之后数据可靠性已经可以保证，但是它的速度不够快，因为它是<strong>停等协议</strong>。停等协议指的是它可以每次发送完数据之后都需要等待响应（ACK或NAK）才进行下一步发送。</p><p>一个简单的方法是发送方可以发送多个分组而无需等待，这种技术称为流水线。</p><p>为了保证流水线正常工作，还需要考虑以下内容</p><ul><li>需要增加序号的范围</li><li>发送方和接收方不得不缓存多个分组，发送方最少要缓存那些已发送但是没有得到确认的分组，接收方也需要保存接收的分组</li><li>对于丢失或损坏的分组，有两种基本方法是： 回退N步和选择重传</li></ul><h3 id="回退n步gbn"><a class="markdownIt-Anchor" href="#回退n步gbn"></a> 回退N步（GBN）</h3><p>在GBN中序号范围分隔成四段。</p><p><img src="/images/%E8%BF%90%E8%BE%93%E5%B1%822.webp" alt="" /></p><p>基序号是最早未确认分组的序号，下一个序号是最小未使用序号。</p><p>窗口长度是被发送当未确认的分组最大数量。要限制最大长度是为了对发送方进行限制。</p><p>发送方需要响应三种事件</p><ul><li>上层调用: 当上层调用rdt_send()发送数据时，如果窗口未满，则产生分组，如果已满，则通知上层。</li><li>收到ACK： 在GBN中，对序号为n的分组的确认采取累积确认。表示接收方已正确接收n及之前所有的分组</li><li>超时事件： 如果出现超时，发送方重传所有已发送但未确认的分组。</li></ul><p>接收方只有接收到n分组并且前一个接收的分组是n-1分组才会交付到上层。其他情况都会丢弃分组。之所以这样是为了减小接收方的负担及简化设计流程。</p><h3 id="选择重传"><a class="markdownIt-Anchor" href="#选择重传"></a> 选择重传</h3><p>GBN缺点就是性能利用率低，可能需要不断大量的重复传输。选择重传（SR）协议让发送方仅重传怀疑接收方未正确接收的分组，从而避免不必要的重传。</p><p><img src="/images/%E8%BF%90%E8%BE%93%E5%B1%823.jpg" alt="" /></p><p>这里和回退N步的模式大致相同，区别是在这个窗口中确认不一定是按序了，例如2已经确认但是0和1未确认。</p><p>如果序号在[base, base + N -1]的数据被正确接收，那么一个ACK传给发送方。如果是[base_ - N, base - 1]的数据被接收，一定要发送ACK。其他情况忽略分组。</p><p>这里可能出现发送方窗口和接收方窗口不一致的现象。因为ACK信息可能丢失，此时接收方已经接收到信息窗口滑动而发送方并不知道，他认为丢失再次发送。因此对于小于接收方base的数据，无论是否收到（一定是收到的，不然无法移动）都要重新发送ACK数据。这样发送方才可以确认已经收到信息并滑动窗口</p><p><img src="/images/%E8%BF%90%E8%BE%93%E5%B1%824.jpg" alt="" /></p><p>SR接收方将缓存分组知道比他小的分组全部接收到为止。</p><h2 id="使用技术总结"><a class="markdownIt-Anchor" href="#使用技术总结"></a> 使用技术总结</h2><table><thead><tr><th>机制</th><th>用途</th></tr></thead><tbody><tr><td>检验和</td><td>检验传输分组是否有错误</td></tr><tr><td>定时器</td><td>用于超过一定时间重传</td></tr><tr><td>序号</td><td>与定时器配合使用，让接收方知道这是新的还是重传的</td></tr><tr><td>确认</td><td>用于告诉发送方收到了</td></tr><tr><td>否定确认</td><td>告诉某个分组未被正确接收</td></tr><tr><td>窗口、流水线</td><td>用于连续发送分组 ，需要前面技术配合</td></tr></tbody></table><h1 id="tcp连接"><a class="markdownIt-Anchor" href="#tcp连接"></a> TCP连接</h1><p>TCP连接时点对点的协议，也就是说必须在两个进程之间建立联系然后发送数据。</p><p>建立TCP连接的大致过程为： 客户发送特殊的TCP报文段，服务器用特殊的TCP报文段响应。最后客户再用第三个特殊报文段进行响应。前两个报文段没有有效数据，而第三个可以由有效数据。经过三个报文段后，TCP连接就可以说建立了。因为发送了三个特殊报文段，所以也可以说是三次握手。</p><p>在数据经过套接字之后就会受到TCP控制。TCP首先将数据放到发送缓存中（在握手期间设置）。然后TCP会时不时的拿出一块数据放到网络层，每次可以拿的数据受限于最大报文段长度（通常由本地发送主机最大链路层帧长度也就是最大传输单元决定）</p><h2 id="报文段结构-2"><a class="markdownIt-Anchor" href="#报文段结构-2"></a> 报文段结构</h2><p><img src="/images/%E8%BF%90%E8%BE%93%E5%B1%825.jpg" alt="" /></p><p>包括源端口号和目的端口号，检验和字段三个熟悉的。还有</p><ul><li>序号： 序号就是报文段首字节编号。例如一个数据大小50000字节，MSS为1000字节。那么第一个报文段就是0-999,第二个报文段是1000-1999.那么第一个报文段的序号是0，第二个报文段的序号是1000</li><li>确认号： 确认号是想对方发来的数据中首字节的序号。例如现在0-100和200-300已经接收到了，但是中间的可能由于某种原因没有接收到，这时候就需要用确认号让对方将101开始的数据重发一次。</li><li>接收窗口字段： 用于指示接收方愿意接受的字节数量</li><li>首部长度字段： 指示了TCP的首部长度</li><li>选项字段：</li><li>标志字段： 就是中间那些小的。ACK表示确认字段中的值是有效的。RST、SYN和FIN用于连接的建立和拆除。CWR和ECE用于明确拥塞通告。PSH指示需要将数据立即交给上层。</li></ul><h2 id="往返时间估计"><a class="markdownIt-Anchor" href="#往返时间估计"></a> 往返时间估计</h2><p>首先样本往返时间（SampleRTT)。然后每次发送并接收到数据时（对重传的不计算SampleRTT）对这个往返时间进行更新，因为网络会有波动。计算公式为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mi>α</mi><mo>∗</mo><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">EstimatedRTT = (1 - \alpha ) * EstimatedRTT + \alpha * SampleRTT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></p><p>SampleRTT是这次数据来回所需要的时间，EstimatedRTT是估计出来的平均时间，最终使用EstimatedRTT。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>一般取0.125。</p><p>而估算SampleRTT偏移EstimatedRTT的程度也是有价值的。计算公式为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mi>β</mi><mo>∗</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>−</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">DevRTT = (1 - \beta) * DevRTT + \beta * | SampleRTT - EstimatedRTT|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">∣</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>一般取0.25.</p><p>重传时间间隔可以用<code>TimeoutInterval = EstimatedRTT + 4 * DevRTT</code>计算得出</p><h2 id="可靠数据传输-2"><a class="markdownIt-Anchor" href="#可靠数据传输-2"></a> 可靠数据传输</h2><p>首先考虑最简单的情况，即只需要考虑定时器。定时器重置的时期有</p><ul><li>如果从上层应用接收到数据并且定时器未启动，则启动定时器</li><li>定时器超时重置定时器</li><li>收到ACK并且ACK的确认号值比SendBase（最早未被确认的字节序号）大，那么则更新SendBase并且重置定时器。这是因为TCP采取<strong>累积确认</strong>的模式，只有前面字节全部接收到才会继续往后确认。</li></ul><p>例如主机A上传序号92，长度8字节和序号100，长度20字节的数据。结果两个都被接收但是两个的ACK都丢失了，那么这是时第二种情况一次只会上传一个，等到第二次超时或者接收ACK才会进行下一步。</p><p>或者接收到了序号100的ACK，确认号是120，那么下次直接从120开始传输数据。</p><p>下面是超时重传的一些改进方法</p><h3 id="超时间隔加倍"><a class="markdownIt-Anchor" href="#超时间隔加倍"></a> 超时间隔加倍</h3><p>因为在某些情况下网络可能比较拥堵，原来推测出来的间隔值太小了。这就会导致不断的重传。为了避免这种问题，可以每次超时重传就让时间间隔乘2.</p><h3 id="快速重传"><a class="markdownIt-Anchor" href="#快速重传"></a> 快速重传</h3><p>超时重传另外一个原因是超时周期可能过长。例如接收方接收到了许多失序的数据，但是低端始终有一块没有接收到，这种情况只有等待发送方超时重传，但是如果发送方重传时间间隔过长便会降低性能。</p><p>为了解决这个问题，可以在发送方接收到三次确认号相同的ACK后选择立刻重传。接收方在接收失序的数据时会发送一个ACK，它的确认号仍是未被接收数据中的首地址。</p><h3 id="流量控制"><a class="markdownIt-Anchor" href="#流量控制"></a> 流量控制</h3><p>TCP通过让发送方维护一个叫接收窗口的变量来提供流量控制。接受窗口也就是接收方还有多少缓存可用于接收。定义下列变量进行控制</p><ul><li>LastByteRead: 接收方应用程序从缓存中读出的最后一个字节编号</li><li>LastByteRcvd：到达接收方的最后一个字节编号</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>R</mi><mi>c</mi><mi>v</mi><mi>d</mi><mo>−</mo><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>≤</mo><mi>R</mi><mi>c</mi><mi>v</mi><mi>B</mi><mi>u</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">LastByteRcvd - LastByteRead \le RcvBuffer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p><p>接受窗口 rwnd = RcvBuffer - [LastByteRcvd - LastByteRead]</p><p>LastByteSend指的最后发送的字节，LastByteAcked表示最后确认的字节。LastByteSend-LastByteAcked表示已经发送但是没有得到响应的字节数。</p><p>$ LastByteSent - LastByteAcked &lt;= rwnd$</p><p>当rwnd为零（缓存满）的时候，规定主机A继续发送一字节的报文段，这些报文段会被接收方确认，直到确认报文中rwnd非0.</p><p>这样做的目的是只有发送方发送接收方才会发送确认报文，才会通知rwnd改变，如果发送方满了就不发送那么接收方已经处理完数据发送方也不知道。</p><h2 id="tcp连接和关闭过程"><a class="markdownIt-Anchor" href="#tcp连接和关闭过程"></a> TCP连接和关闭过程</h2><ol><li>客户端的TCP首先向服务器的TCP发送一个报文，报文首部一个标志位（SYN比特）被置为1.另外客户会随机选择一个初始序号，并将此编号放在序号字段中，用来保证安全。</li><li>报文到了服务器后，服务器将分配缓存和变量，并向客户发送允许连接的报文段。这个允许连接的报文中SYN被置1，并且确认号字段是初始序号+1，并且服务器也选择了一个初始序号并且放入序号字段中。这个报文又叫SYNACK报文段</li><li>在收到返回报文后，客户也要给该连接分配缓存，然后又发送一个报文段，这个报文段的确认字段为服务器初始序号+1， 因为TCP已经建立，SYN被置0，并且这个报文段中可以存放数据。</li></ol><p>参与TCP连接的双方都有权利终止连接，终止连接的过程为：</p><ol><li>例如客户进程终止连接。客户向服务器发出一个特殊的TCP报文段，报文段中FIN标志位为1</li><li>服务器接收到之后，发送确认报文段，然后发送它自己的终止报文段。</li></ol><h1 id="拥塞控制"><a class="markdownIt-Anchor" href="#拥塞控制"></a> 拥塞控制</h1><p>在理想情况下，两个主机通过一个路由器传输数据，并且这个路由器的缓存无限大。假设这个链路的容量为R，发送数据速率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>字节/秒。那么当\lamdba小于R/2时，传输数据速率就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>，当速率大于R/2时，传输速率为R/2（因为是发送和接收双向的）。</p><p>现在考虑容量有限并且分组会丢失。这种情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> = R/2 时传输速率达不到R/2（因为要重传），大概在R/3左右。如果发送方提前发送分组会导致重复发送，利用率更低。</p><h2 id="tcp拥塞控制"><a class="markdownIt-Anchor" href="#tcp拥塞控制"></a> TCP拥塞控制</h2><p>为了实现拥塞控制，需要添加一个变量cwnd，他和流量控制变量rwnd有类似的作用</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>S</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>−</mo><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>A</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>d</mi><mo>&lt;</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mrow><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo separator="true">,</mo><mi>r</mi><mi>w</mi><mi>n</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span></span></p><p>那么cwnd在什么情况下会被调节呢</p><ul><li>丢失报文段。 丢失报文段代表拥塞，因此用降低发送方的发送速率，也就是降低cwnd。</li><li>确认报文段。 当一个先前未被确认数据的确认报文段到达时，表示现在网络情况良好，可以增大速率。</li></ul><h3 id="慢启动-拥塞避免和快速恢复"><a class="markdownIt-Anchor" href="#慢启动-拥塞避免和快速恢复"></a> 慢启动、拥塞避免和快速恢复</h3><p>在启动时，cwnd往往设置的比较小，然后每次被确认就增加一个MSS（每次传输数据的最多数量）。</p><p>当存在一个由于超时导致的丢包事件时，就把cwnd设置为1并重启慢启动，他还将一个标记ssthresh(慢启动阈值）设置为cwnd/2。</p><p>其次如果缓存达到或超过ssthresh后，会终止慢启动并且开启拥塞避免模式。</p><p>如果检测到三个冗余ACK，那么会执行一次快速恢复。</p><p><strong>拥塞避免</strong></p><p>进入拥塞避免状态时一般都在ssthresh左右，这时需要减慢MSS的增长速度，因此可以每过一个RTT（平均往返时间）就增长一个MSS。这样就由原来的指数级增长变为线性增长。</p><p>当又遇到超时导致的丢包后，就将cwnd重置并且将ssthreash更新为cwnd的一半。如果遇到三次ACK导致的丢包，因为这种情况说明网络情况还比较好，因此只需要将<strong>cwnd减半</strong>并且sstresh更新然后进入快速恢复状态</p><p><strong>快速恢复</strong></p><p>快速恢复变成了 每接收到一个ACK就让cwnd加一个MSS，直到对视报文段的一个ACK到达时，TCP在降低cwnd后进入拥塞避免状态。<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">应用程序接受信息的接口<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;多路复用和多路分解&quot;&gt;&lt;a class=&quot;markdownIt-A</summary>
      
    
    
    
    <category term="网络" scheme="http://xinhecuican.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>应用层与HTTP协议</title>
    <link href="http://xinhecuican.github.io/post/af3eed3c.html"/>
    <id>http://xinhecuican.github.io/post/af3eed3c.html</id>
    <published>2021-01-30T00:31:00.000Z</published>
    <updated>2021-02-04T12:14:49.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="http协议"><a class="markdownIt-Anchor" href="#http协议"></a> HTTP协议</h1><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><p>HTTP由两个程序组成：客户程序和服务器程序。客户程序就是我们电脑上的程序</p><p>一个Web页面是由若干对象组成的，对象指的是一个文件，例如HTML文件，JPEG图像，Java小程序等。</p><p>多数Web页面包含一个<strong>HTML基本文件</strong>和几个引用对象。首先获得基本文件，基本文件之中又有链接到其他文件的URL,然后通过这些URL又获得其他文件。</p><p>例如有时我们直接从浏览器下网页文件打开后发现这个网页既没有排版也没有字体颜色，也没有图像。这里我们下载的文件就是HTML基本文件，如index.html.如果我们想要获得完整的页面就需要根据基本文件中的url再去获得其他文件然后通过浏览器合并到一起。</p><p>HTTP使用TCP作为传输层协议。TCP大致是首先发起一个与服务器的TCP连接，在链接成立之后就可以进行稳定的传输了。</p><h2 id="非持续连接和持续连接"><a class="markdownIt-Anchor" href="#非持续连接和持续连接"></a> 非持续连接和持续连接</h2><p>非持续连接指的是所有请求都通过单独的TCP连接发送，持续连接时所有请求都通过同一个连接发送。</p><h3 id="http的非持续连接"><a class="markdownIt-Anchor" href="#http的非持续连接"></a> HTTP的非持续连接</h3><p>假设我们请求一个HTML基本文件和若干图形。并且这些对象位于同一台服务器上，那么非持续连接请求的大致过程是：</p><ol><li>HTTP客户进程在端口号80发起一个到服务器的TCP连接</li><li>客户通过套接字想服务器发送一个HTTP请求报文</li><li>服务器接收报文，查找对象之后通过TCP发送给客户</li><li>接收完成之后服务器进程同志TCP断开连接</li><li>客户进程接收到基本页面之后，获得其中的URL，再重复上述四个过程获得其他对象。</li></ol><p>那么总的所需时间=发起TCP连接所需时间 + 请求文件建立TCP锁需时间 + 传输文件所需时间</p><h3 id="持续连接"><a class="markdownIt-Anchor" href="#持续连接"></a> 持续连接</h3><p>非持续连接有这些缺点：</p><ul><li>必须为每一个请求对象建立和维护一个连接。每一个连接都需要额外消耗用户和服务器资源，增加了服务器负担</li><li>其次每次建立TCP连接也需要时间</li></ul><p>HTTP1.1持续连接可以让一个Web页面的所有对象通过一个TCP连接进行传输，这些请求可以同时发送并且不需要等待请求的回答。甚至可以对同一个服务器上的多个Web页面进行传输</p><p>HTTP/2允许相同连接中多个请求和回答交错。</p><h2 id="报文格式"><a class="markdownIt-Anchor" href="#报文格式"></a> 报文格式</h2><p><strong>请求报文</strong></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/somedir/page.html</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.someschool.edu</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">User-agent</span>: Mozilla/5.0</span><br><span class="line"><span class="attribute">Accept-language</span>: fr</span><br></pre></td></tr></table></figure><p>这是一个典型的报文：</p><ul><li>请求行： 指第一行，有三个字段：方法字段、URL字段和HTTP版本字段。方法字段有GET、POST、HEAD、PUT、DELETE。URL字段要和host拼接起来才是平常熟悉的网址</li><li>首部行： 第一行后面的所有。Connection: close表示不要使用持续连接。</li></ul><p><img src="/images/HTTP1.jpg" alt="" /><br />这是请求报文的一般格式。我们上一个例子没有请求体（实体体）是因为GET不需要请求体。如果是POST就需要请求体提交表单。</p><p><strong>响应报文</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Date</span>: Tue, 18 Aug 2015 15:44:04 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.2.3 (CentOS)</span><br><span class="line"><span class="attribute">Last-Modified</span>: Tue, 18 Aug 2015 15:11:03 GMT</span><br><span class="line"><span class="attribute">Content-Length</span>: 6821</span><br><span class="line"><span class="attribute">Conten-Type</span>: text/html</span><br><span class="line"></span><br><span class="line">(data data ...)</span><br></pre></td></tr></table></figure><p>它也分为三个部分：初始状态行，6个首部行、实体体（请求体）。</p><p>初始状态行内容：</p><ul><li>200 OK: 请求成功</li><li>301 Moved Permanently: 请求的对象被永久转移了，新的URL在响应报文的Location中</li><li>400 Bad Request: 一个通用的差错，表示请求不能呗服务器理解</li><li>404 Not Found： 表示请求的对象不再服务器上</li><li>505 HTTP Version Not Supported: 服务器不支持请求报文的HTTP版本</li></ul><p>首部行内容：</p><ul><li>Connection close ： 表示服务器将在这次传输结束之后关闭TCP。</li><li>Date： 这里的时间是发出报文的时间</li><li>Last-Modified: 指示对象最后修改时间</li><li>Content-Length: 内容长度，单位是byte</li></ul><h1 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h1><p>前面提到的HTTP服务器是无状态的，也就是说服务器不会对请求进行限制，所有的请求都会一视同仁的响应。然而我们经常要对用户进行限制，因此便是用了cookie。</p><p>cookie生成的大致过程为：当请求报文第一次访问这个网站时，该站点将产生一个唯一识别码，并且作为后端数据库的一个表项。接下来响应报文中就要添加一个Set-cookie项，返回生成的cookie。浏览器接收到相应报文之后，将会把cookie添加到cookie文件中。</p><p>今后访问时请求报文都会在首部行添加Cookie: …。在这种情况下，服务器就可以跟踪用户在站点的活动</p><h1 id="web缓存"><a class="markdownIt-Anchor" href="#web缓存"></a> Web缓存</h1><p>Web缓存器也叫代理服务器。它保存着我们最近浏览的网页信息，我们可以通过配置使HTTP请求首先指向Web缓存器。</p><p>Web缓存的一般过程为</p><ul><li>浏览器创建一个到缓存器的连接，并发送HTTP请求</li><li>如果有该对象就返回</li><li>如果没有就打开一个到服务器的TCP连接，发送请求</li><li>服务器受到请求进行处理然后发给缓存器，并且向浏览器也发送报文（通过缓存器</li></ul><p>Web缓存器一般由本地ISP提供。例如学校和小区服务（而不是个人电脑上），因为距离非常近所以访问速度也比较快，并且可以从整体上减小因特网的流量。</p><p>但是这也会带来一个问题，缓存器中的副本不是最新的。因此为了确保内容是最新的，还有一种条件GET方法。如果报文是GET并且其中包含If-Modified-Since: 首部行，那么就是一个条件GET请求报文。</p><p>如果使用条件报文，回到原服务器中请求，如果发现服务器在指定时间后没有修改，则<strong>Web服务器向缓存器</strong>发送响应报文</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">HTTP</span>/<span class="selector-tag">1</span><span class="selector-class">.1</span> <span class="selector-tag">304</span> <span class="selector-tag">NOT</span> <span class="selector-tag">Modified</span></span><br><span class="line"><span class="selector-tag">Date</span>: <span class="selector-tag">Sat</span>, <span class="selector-tag">10</span> <span class="selector-tag">Oct</span> <span class="selector-tag">2015</span> <span class="selector-tag">15</span><span class="selector-pseudo">:39</span><span class="selector-pseudo">:29</span></span><br><span class="line"><span class="selector-tag">Server</span>: <span class="selector-tag">Apache</span>/<span class="selector-tag">1</span><span class="selector-class">.3</span><span class="selector-class">.0</span> (Unix)</span><br><span class="line">(empty entity)</span><br></pre></td></tr></table></figure><p>这个响应报文初始状态为304，表示该缓存器可以使用该对象，可以向请求的浏览器转发缓存的副本。正因为使用了缓存器的副本，所以相应报文中的请求体为空。</p><h1 id="邮件传输"><a class="markdownIt-Anchor" href="#邮件传输"></a> 邮件传输</h1><p>邮件传输大致分为3个部分： 用户代理，邮件服务器和简单邮件传输协议（SMTP）。 用户代理也就是发送邮件的网页或客户端。</p><p>每个用户在邮件服务器上都有一个邮箱（一片存储区域）。用户代理发送邮件时现发送到自己的邮箱中，然后在传输到对方的邮箱中，再传送到对方的邮件用户代理中。</p><p>邮箱中维护着一个报文队列，每隔若干分钟就会进行一次发送尝试，如果几天之后没有成功就会删除报文并且通知发送方。</p><h2 id="smtp"><a class="markdownIt-Anchor" href="#smtp"></a> SMTP</h2><p>在用户代理和邮件服务器建立之后，我么就可以通过发送特定的消息（HELO， MAIL FROM， RCPT TO， DATA， CRLF等）来写邮件了。而邮件服务器接收完这些消息之后会整合成一个报文传递给对方的邮件服务器。</p><p>报文的典型格式为</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">From</span>: alice<span class="variable">@crepes</span>.fr</span><br><span class="line"><span class="attribute">To</span>: bob<span class="variable">@hamburger</span>.edu</span><br><span class="line"><span class="attribute">Subject</span>: Serching for the meaning of life.</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%BC%95%E7%94%A8%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE2.png" alt="" /><br />但是SMTP只负责从用户本地到服务器再从自己的服务器到对方服务器，对方从服务器接受的过程不是由SMTP控制的，SMTP只能推送服务，不能拉取服务。</p><h2 id="pop3"><a class="markdownIt-Anchor" href="#pop3"></a> POP3</h2><p>POP3就是负责最后从服务器到用户代理过程的。大致过程为，当用户代理打开一个邮件服务器上端口为110的TCP连接之后，POP3就开始工作了。POP3进行特许（authorization)、事务处理及更新。</p><ul><li>特许： 用户代理发送用户名和口令来鉴别用户</li><li>事务处理： 用户代理取回报文，同时还可以对报文做删除标记或取消删除标记，还可以获得邮件统计信息。</li><li>更新： 用户发出quit命令后，结束POP3.之后邮件服务器将删除带有删除标记的报文。</li></ul><p>在事务处理过程中，服务器对用户发出的命令回答有两种： +OK -ERR.特许阶段主要有两个命令: user (user name)和pass (password).</p><h1 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h1><p>DNS是将域名转化为IP地址的过程。域名就是主机名，<a href="http://xn--www-eo8e.facebook.com">如www.facebook.com</a>、www.google.com等。这些名字长度不一且没有特殊含义，只有转化为ip地址路由器才可以进行识别并且将消息传送到指定位置。</p><p>DNS构成为：</p><ol><li>一个分层的DNS服务器实现的分布式数据库</li><li>一个使主机可以查询数据库的应用层协议，DNS协议运行在UDP上，使用53号端口</li></ol><p>DNS通常是应用层使用的，在进行传输时首先需要将它转换为ip，大致过程为</p><ol><li>用户主机上运行着DNS应用客户端（进行DNS解析）</li><li>浏览器从URL中抽取处主机名，并且发送给DNS客户端</li><li>DNS客户端向DNS主机发送一个包含主机名的请求</li><li>DNS客户端收到响应报文并发送给浏览器，浏览器再建立TCP连接</li></ol><p>此外DNS还提供：</p><ol><li>主机别名：一个主机名可以有多个别名，可以通过DNS应用程序获得别名对应的主机名和IP</li><li>邮件服务器别名： 和上面类似</li><li>负载分配： 对于某些繁忙的站点，DNS会使用多个服务器进行管理。这些服务器的IP地址各不相同，因此使用了一个IP地址集合进行管理。每次请求到来时，先用IP地址整个集合进行响应，之后每次回答中循环地址次序。这样做是因为客户总是向IP地址排在最前面的服务器发出报文。</li></ol><h2 id="工作机理"><a class="markdownIt-Anchor" href="#工作机理"></a> 工作机理</h2><p>将所有的域名分布在各个DNS服务器中，顶层DNS负责决定给哪个服务器解析。一般来说可以将DNS服务器大致分为三层： 根DNS服务器， 顶层域（TLD）和权威DNS服务器。</p><p><img src="/images/%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE3.jpg" alt="" /></p><p>例如我们想获得baidu.com的地址。那么首先和根服务器之一建立联系，根服务器会返回com域名服务器的IP，然后根据IP找到com域名服务器再找的百度.cmo域名服务器从而找到对应IP。</p><ul><li>根服务器： 大概有四百到五百根服务器遍布世界。由多个组织进行管理</li><li>顶层域DNS服务器： 对于每个顶层域（如com、org、net、edu、gov)和国家（uk、fr、ca、jp)都有对应的顶层域服务器</li><li>权威DNS服务器： 在因特网上可以给公共访问的主机都必须提供可供公共访问的DNS记录。一些组织或公司的DNS服务器收藏了这些DNS记录。个人或组织机构也可以选择支付一定费用来获得域名及在DNS服务器上添加记录。例如阿里云或腾讯云都提供了域名解析服务。</li></ul><p>此外每一个居民区或机构的ISP都有DNS服务器，称为本地DNS服务器本地DNS服务器负责与上面三种服务器进行交互并传递数据。</p><p><img src="/images/%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE4.jpg" alt="" /></p><p>以上是添加了请求主机后的过程。1-8表示过程先后顺序</p><h2 id="dns缓存"><a class="markdownIt-Anchor" href="#dns缓存"></a> DNS缓存</h2><p>DNS缓存原理非常简单，就是每次请求完成之后保存一份在本地DNS服务器中，每次进行DNS解析时首先到本地服务器中寻找。</p><p>DNS缓存时间是有限的，一般是两天。</p><h2 id="dns记录和报文"><a class="markdownIt-Anchor" href="#dns记录和报文"></a> DNS记录和报文</h2><p>DNS数据库中存储了<strong>资源记录</strong>（RR）。每个DNS回答报文中包含一条或多条资源记录。</p><p>资源记录是一个四元组:</p><p><code>(Name, Value, Type, TTL)</code></p><ul><li>TTL: 该记录生存时间，也就是应当从缓存删除的时间</li><li>如果Type=A,则Name是主机名。Value是该主机名对应IP（<a href="http://abcd.com">abcd.com</a>, 145.37.93.126, A）就是一条A记录</li><li>Type=NS, 则Name是域。 Value是存储着转换信息的<strong>权威DNS服务器主机名</strong>。例如(<a href="http://foo.com">foo.com</a>, <a href="http://dns.foo.com">dns.foo.com</a>, NS)</li><li>Type=CNAME, Value是<strong>别名为Name</strong>的规范主机名。例如(<a href="http://foo.com">foo.com</a>, <a href="http://dns.foo.com">dns.foo.com</a>, NS), (<a href="http://xinhecuican.tk">xinhecuican.tk</a>, <a href="http://xinhecuican.github.io">xinhecuican.github.io</a>, NS)</li><li>Type=MX, Value是别名为Name的邮件服务器的规范主机名。(<a href="http://foo.com">foo.com</a>, <a href="http://mail.bar.foo.com">mail.bar.foo.com</a>, MX)</li></ul><p>如果DNS服务器是用于特定主机名（TLD）的权威DNS服务器，那么它就会包含一条TLD的A记录。如果不是用于主机名， 那么还要记录包含主机名的域的NS记录。</p><p>例如 一台eduTLD不是gaia.cs.umass.edu的权威服务器，那么该服务器将包含一条cs.umass.edu的域记录，如(<a href="http://umass.edu">umass.edu</a>, <a href="http://dns.umass.edu">dns.umass.edu</a>, NS)，然后还有一条A记录,如（<a href="http://dns.umass.edu">dns.umass.edu</a>, 128.119.40.111, A). 也就是说可以通过这台eduTLD找到对应的用于解析的服务器。</p><p><strong>DNS报文</strong></p><p>DNS查询报文和回答报文有相同的格式</p><p><img src="/images/%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE5.gif" alt="" /></p><ul><li>前12字节是首部区域<ul><li>事务ID（标识符）用于标识该查询，占2字节。他会被复制到回答报文中。</li><li>标识： 1bit的标识位指出是查询报文（0）还是回答报文（1）。权威标志位会在权威DNS服务器的回答报文中置1. 希望递归标志位会在DNS服务器支持递归查询时置1.</li><li>四个其他字段： 用来表示后面四个部分的数量</li></ul></li><li>问题区域： 包括<ul><li>名字字段： 正在被查询的主机名</li><li>类型： 正在询问的类型。例如A，NS</li></ul></li><li>回答区域： 也就是前面说的资源记录，这里可能有多条</li><li>权威区域： 包含其他权威服务器的记录</li><li>附加区域： 一些附加信息</li></ul><h2 id="向dns服务器中插入记录"><a class="markdownIt-Anchor" href="#向dns服务器中插入记录"></a> 向DNS服务器中插入记录</h2><p>有许多域名登记机构负责插入记录，他们会收取少量费用（几元到几十万不等）。</p><p>例如我们向登记机构注册networkutopia.com时，需要想机构提供基本和辅助权威DNS服务器的名字和IP。<a href="http://xn--dns1-zu6fx14c.networkutopia.com">例如dns1.networkutopia.com</a>, <a href="http://212.212.212.xn--1dns2-rn9h.networkutopia.com">212.212.212.1和dns2.networkutopia.com</a>, 212.212.212.2。对于这两个权威DNS服务器，注册机构都会向其中添加一条NS和一套A记录输入TLCcom服务器。然后将下面两条资源记录插入DNS数据库中</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">(<span class="selector-tag">networkutopia</span><span class="selector-class">.com</span>, <span class="selector-tag">dns1</span><span class="selector-class">.networkutopia</span><span class="selector-class">.com</span>, <span class="selector-tag">NS</span>)</span><br><span class="line">(<span class="selector-tag">dns1</span><span class="selector-class">.networkutopia</span><span class="selector-class">.com</span>, 212.212.212.1, <span class="selector-tag">A</span>)</span><br></pre></td></tr></table></figure><p>此外，还有确保自己网站的A记录和MX记录被输入到权威DNS服务器中。</p><h1 id="p2p"><a class="markdownIt-Anchor" href="#p2p"></a> P2P</h1><p>一般的文件分发模式是服务器-客户模式，也就是客户上传到服务器，服务器来进行发送。而P2P模式在用户接收到文件之后可以给其他用户发送。与传统的客户-服务器模式相比，P2P模式可以更好的应对大流量。</p><p><img src="/images/%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE6.jpg" alt="" /></p><p>如图， 服务器上传速率为$$u_s$$，第i个要文件的电脑下载速率为$$d_i$$,上传速率为$$u_i$$.F是文件大小</p><p>最小分发时间&gt;= max{N * F / $$u_s$$, F / $$d_{min}$$ }</p><p>其中N * F / $$u_s$$是服务器传输所有文件所需要的时间，而F / $$d_{min}$$是用户下载需要的最少时间。可以看为每多一个用户就需要占用一份服务器的上传速率，如果它占用的上传速率小于自己的下载速率那么限制因素就变成了第一个。</p><p>因此如果用户非常多，这种模式下服务器负载非常大，对每个用户来说服务器上传速率也就很低了。</p><p><strong>P2P模式</strong></p><ul><li>首先只有服务器有文件。它先将文件中的每个字节发送到各个用户上。所需时间为F/$$u_s$$</li><li>之后用户也可以通过自己接收到的部分参与分发。总的上传速率为$$u_{total} = u_s + u_1 + … + u_n$$。它现在的最小分发时间变为 max{F/$$u_s$$, F/d_{min}, N*F/$$(u_s + \sum_{i=1}^{N}u_i)$$}</li></ul><p><strong>BitTorrent</strong></p><p>BitTorrent是一种P2P协议，BitTorrent把所用下载用户称为洪流（Torrent），在洪流中彼此下载等长度的文件块。如果一个用户下载完成它可以选择退出洪流或者继续共享。</p><p>具体的说，每个洪流都有一个基础节点，称为追踪器（tracker）。每当一个下载用户加入时，他都会向追踪器申请注册并且周期性通知它仍在洪流中。</p><p>在被加入到追踪器后，追踪器会让他参与一个洪流的子集（例如50个用户），并且把这些用户的IP发给该用户。然后该用户就会按照IP创建TCP连接，创建成功则称对方为对等方。</p><p>该用户会周期性的询问邻居他们所具有的块。邻居会发一个他们所具有的块列表，然后该用户会根据表来请求没有的块。</p><p>请求块依据<strong>最稀缺优先</strong>，也就是请求邻居中拥有数量最少的块。</p><h1 id="cdn和视频内容分发"><a class="markdownIt-Anchor" href="#cdn和视频内容分发"></a> CDN和视频内容分发</h1><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><p>在HTTP中，视频只是一个文件，可以通过一个URL和一个TCP连接得到。当获得的字节到了一定阈值之后，视频就开始播放，与此同时后台还在继续获取并缓存。</p><p>但是有些人的带宽小，有些人的带宽大，如果只有一种分辨率，难以满足所有人的需求。因此产生了HTTP的动态适应性流（DASH）。在DASH中，视频被编码为不同版本，并且有一个告示文件高速了各个版本的地址，用户首先申请告示文件然后再申请对应版本的视频。</p><h2 id="内容分发网cdn"><a class="markdownIt-Anchor" href="#内容分发网cdn"></a> 内容分发网（CDN）</h2><p>传统的视频提供会遇到一些问题。因为对于因特网视频公司，提供视频最直接的方法时建造数据中心，然后进行分发。但是这样当遇到距离遥远的客户时就可能因为某个服务器速度的限制导致传输速率非常低。其次重复数据可能多次经过相同链路分发多次，造成资源浪费。最后如果数据中心出现了某些故障那么将不能分发视频。</p><p>为了解决这些问题，视频供应商使用了内容分发网（content distribution network, CDN).CDN管理多个地理位置上的服务器，并且存储视频或其他内容</p><h3 id="cdn操作"><a class="markdownIt-Anchor" href="#cdn操作"></a> CDN操作</h3><p>CDN具体操作为</p><ol><li>通过DNS截获特定的URL</li><li>查找对应的CDN服务器</li><li>重定向到对应服务器</li></ol><p>例如： NetCineama想让KingCDN来替它分发视频。首先NetCinema的每个视频的URL都有video。例如： <code>http://video.netcinema.com/6Y3B32V</code>.接下来</p><ul><li>用户点击链接并且本地DNS服务器向NetCinema请求IP。该权威服务器发现主机名中有video。为了将该DNS请求给KingCDN，NetCinema返回一个KingCDN的主机名，<a href="http://xn--a1105-gv5i.kingcdn.com">如a1105.kingcdn.com</a></li><li>本地服务器继续发送请求，在KingCDN中返回CDN服务器的IP</li></ul><p><strong>集群选择策略</strong></p><p>前面说了CDN是分布式的。也就是说虽然定向到了CDN的权威服务器但是返回的IP不同最终速度也会大不相同。因此选择集群是非常重要的。</p><p>一种方式是地理上最为临近的集群。每个本地DNS服务器都有一个地理位置，DNS权威服务器返回离他最近的DNS服务器。但是地理距离近不等于网络距离近，还是要看经过的ISP数量。</p><p>另一种方法是进行周期性的实时测量。例如每隔一定时间就向全世界所有本地DNS发送合租来探测速度，但是可能本地DNS不会响应这些探测。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;http协议&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="网络" scheme="http://xinhecuican.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>DLL注入</title>
    <link href="http://xinhecuican.github.io/post/c82a1c99.html"/>
    <id>http://xinhecuican.github.io/post/c82a1c99.html</id>
    <published>2021-01-23T11:13:00.000Z</published>
    <updated>2021-01-25T01:36:57.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="消息钩子"><a class="markdownIt-Anchor" href="#消息钩子"></a> 消息钩子</h1><p>Windows操作系统GUI将键盘敲击，鼠标移动和点击，窗口大小和位置改变都看成事件（Event).消息传递过程大致为</p><ul><li>事件发生时，首先将这个事件添加到系统的[OS message queue]中</li><li>OS判断这个事件是在哪个应用程序中产生的，然后将这个事件添加到应用程序的消息队列中</li><li>应用程序对这些消息进行处理</li></ul><p>消息钩子就在这个传递链过程中添加一些函数，这些函数可以侦听事件甚至修改事件的参数。</p><h2 id="setwindowshookex"><a class="markdownIt-Anchor" href="#setwindowshookex"></a> SetWindowsHookEx</h2><p>这个API可以实现消息钩子，它的定义如下</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">HHOOK SetWindowsHookEx</span><br><span class="line">&#123;</span><br><span class="line">    int idHoook<span class="comment">;</span></span><br><span class="line">    HOOKPROC lpfn<span class="comment">;</span></span><br><span class="line">    HINSTANCE hMod<span class="comment">;//这个程序所属DLL句柄</span></span><br><span class="line">    DOWRD dwThreadId<span class="comment">;//想要挂钩的线程Id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dll注入"><a class="markdownIt-Anchor" href="#dll注入"></a> DLL注入</h1><p>DLL注入指的是想运行中的进程强制插入DLL文件。具体来讲就是让其他进程调用LoadLibrary().</p><p><strong>具体方法</strong></p><ul><li>创建远程线程</li><li>使用注册表</li><li>消息勾取</li></ul><h2 id="创建远程线程"><a class="markdownIt-Anchor" href="#创建远程线程"></a> 创建远程线程</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> inject<span class="constructor">_dll(DWORD <span class="params">dwPID</span>, LPCTSTR <span class="params">szDllPath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = NULL, hThread = NULL;</span><br><span class="line">      HMODULE hMod = NULL;</span><br><span class="line">      LPVOID pRemoteBuf = NULL;</span><br><span class="line">      DWORD dwBufSize = (DWORD)(<span class="constructor">_tcslen(<span class="params">szDllPath</span>)</span> + <span class="number">1</span>)<span class="operator"> * </span>sizeof(TCHAR);</span><br><span class="line">      LPTHREAD_START_ROUTINE pThreadProc;</span><br><span class="line">      <span class="comment">//获取notepade.exe句柄</span></span><br><span class="line">      <span class="keyword">if</span>(!(hProcess = <span class="constructor">OpenProcess(PROCESS_ALL_ACCESS, <span class="params">false</span>, <span class="params">dwPID</span>)</span>))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="constructor">__tprintf(L<span class="string">&quot;OpenProcess(&amp;d) failed!!!&quot;</span>, <span class="params">dwPID</span>, GetLastError()</span>);</span><br><span class="line">          return <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在notepad.exe中分配内存</span></span><br><span class="line">      pRemoteBuf = <span class="constructor">VirtualAllocEx(<span class="params">hProcess</span>, NULL, <span class="params">dwBufSize</span>, MEM_COMMIT, PAGE_READWRITE)</span>;</span><br><span class="line">      <span class="comment">//将myhack.dll写入内存</span></span><br><span class="line">      <span class="constructor">WriteProcessMemory(<span class="params">hProcess</span>, <span class="params">pRemoteBuf</span>, (LPVOID)</span>szDllPath, dwBufSize, NULL);</span><br><span class="line">      <span class="comment">//获取LoadLibraryW()的地址</span></span><br><span class="line">      hMod = <span class="constructor">GetModuleHandle(L<span class="string">&quot;kernel32.dll&quot;</span>)</span>;</span><br><span class="line">      pThreadProc = (LPTHREAD_START_ROUTINE)<span class="constructor">GetProcAddress(<span class="params">hMod</span>, <span class="string">&quot;LoadLibraryW&quot;</span>)</span>;</span><br><span class="line">      <span class="comment">//在notepad.exe中运行线程</span></span><br><span class="line">      hThread = <span class="constructor">CreateRemoteThread(<span class="params">hProcess</span>, NULL, 0, <span class="params">pThreadProc</span>, <span class="params">pRemoteBuf</span>, 0, NULL)</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="constructor">WaitForSingleObject(<span class="params">hTread</span>, INFIINITE)</span>;</span><br><span class="line">      <span class="constructor">CloseHandle(<span class="params">hTread</span>)</span>;</span><br><span class="line">      <span class="constructor">CloseHandle(<span class="params">hProcess</span>)</span>;</span><br><span class="line">      return <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, <span class="built_in">char</span> *argv<span class="literal">[]</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">_tprintf(L<span class="string">&quot;USAGE : %S PID dll_path\n&quot;</span>, <span class="params">argv</span>[0])</span>;</span><br><span class="line">        return <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="constructor">InjectDll((DWORD)</span><span class="constructor">_TSTOL(<span class="params">argv</span>[1])</span>, argv<span class="literal">[<span class="number">2</span>]</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">_tprintf(L<span class="string">&quot;InjectDll(\&quot;&quot;</span>%<span class="params">s</span>\<span class="string">&quot;) success!!!\n&quot;</span>, <span class="params">argv</span>[2])</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">_tprintf(L<span class="string">&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;</span>, <span class="params">argv</span>[2])</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OpenProcess(PROCESS_ALL_ACCESS, false, dwPID): 获得目标进程句柄.第一个参数是获得所有权限，最后一个是程序运行时传过来的</li><li>VirtualAllocEx， WriteProcessMemory: 将dll写入进程</li><li>GetModuleHandle, GetProceAddress: 获得LoadLibraryW()API的地址</li><li>CreateRemoteThread: 远程运行线程</li></ul><h2 id="使用注册表"><a class="markdownIt-Anchor" href="#使用注册表"></a> 使用注册表</h2><p>Windows操作系统中默认提供AppInit_DLLs和LoadAppInit_DLLs两个注册表项</p><p>大致过程为将要注入的DLL的路径字符串吸入AppInit_DLLs项目，然后把LoadAppInit_DLLs项目值设为1.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_CMD <span class="meta-string">L&quot;c:\\Program Files\\Internet Explorer\\iexplore.exe&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_ADDR <span class="meta-string">L&quot;http://www.naver.com&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_DST_PROC <span class="meta-string">L&quot;notepad.exe&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReaseved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCHAR szCmd[MAX_PATH] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line">    TCHAR szPath[MAX_PATH] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line">    TCHAR *p = <span class="literal">NULL</span>;</span><br><span class="line">    STARTUPINFO si = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">    </span><br><span class="line">    si.cb = <span class="keyword">sizeof</span>(STARTUPINFO);</span><br><span class="line">    si.dwFlags = STARTF_SUESHOWWINDOW;</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">          <span class="keyword">if</span>(!GetModuleFileName(<span class="literal">NULL</span>, szPath, MAX_PATH))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(!(p == _tcsrchr(szPath, <span class="string">&#x27;\\&#x27;</span>)))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(_tcsicmp(p+<span class="number">1</span>, DEF_DST_PROC))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          wsprintf(szCmd, <span class="string">L&quot;%s %s&quot;</span>, DEF_CMD, DEF_ADDR);</span><br><span class="line">          <span class="keyword">if</span>(!CreateProcess(<span class="literal">NULL</span>, (LPTSTR)(LPCTSTR)szCmd, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">false</span>, NORMAL_PRIOPRITY_CLASS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(pi.hProcess != <span class="literal">NULL</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              CloseHandle(pi.hProcess);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是判断当前加载进程是否是notepad.exe,如果是就运行IE链接网址</p><p>接下来要做的就是将DLL信息写进注册表项中。</p><h1 id="dll卸载"><a class="markdownIt-Anchor" href="#dll卸载"></a> DLL卸载</h1><p>DLL卸载就是要让进程调用FreeLibrary()API。</p><ul><li>CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID): 这个函数的作用是获得加载到进程的DLL信息。返回值是一个句柄，传递给Module32First(返回值, &amp;information)后，就可以在information中获得dll相关信息</li></ul> <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">typedef struct tagMODULEENTRY32</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">DWORD</span> dwSize<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> th32ModuleID<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> th32ProcessID<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> GlblcntUsage<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> ProccntUsage<span class="comment">;</span></span><br><span class="line">    <span class="built_in">BYTE</span> *modBaseAddr<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> modBaseSize<span class="comment">;</span></span><br><span class="line">    HMODULE hModule<span class="comment">;</span></span><br><span class="line">    char szModule[MAX_MODULE_NAME32 + <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    CHAR szExePath[MAX_PATH]<span class="comment">;</span></span><br><span class="line">&#125;MODULEENTRY32<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>上面就是information结构体的具体内容。szModule是这个dll的名称</p><ul><li>OpenProcess(PROCESS_ALL_ACCESS, FLASE, dwPID): 获得目标进程的句柄</li><li>GetModuleHandle(“kernel32.dll”)</li><li>(LPTHREAD_START_ROUNTINE)GetProcAddress(hModule, “FreeLibrary”):上面两个是获取FreeeLibrary的地址</li><li>CreateRemoteThread(hProcess, NULL, 0, pThreadProc, information.modBaseAddr, 0, NULL): hThreadProc是FreeLibrary的API地址， modBaseAddr是需要卸载的API地址</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;消息钩子&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="逆向" scheme="http://xinhecuican.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>矩阵运算</title>
    <link href="http://xinhecuican.github.io/post/67454659.html"/>
    <id>http://xinhecuican.github.io/post/67454659.html</id>
    <published>2021-01-21T06:15:00.000Z</published>
    <updated>2021-01-22T13:06:27.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="lup分解求线性方程组"><a class="markdownIt-Anchor" href="#lup分解求线性方程组"></a> LUP分解求线性方程组</h1><p>L、U、P是三个矩阵，满足PA = LU。其中L矩阵是一个单位下三角矩阵，U是一个上三角矩阵，P是一个置换矩阵。</p><p>我们要求解的是A x = b</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>P</mi><mi>A</mi><mi>x</mi><mo>=</mo><mi>P</mi><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>L</mi><mi>U</mi><mi>x</mi><mo>=</mo><mi>P</mi><mi>b</mi><mo stretchy="false">(</mo><mi mathvariant="normal">根</mi><mi mathvariant="normal">据</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">式</mi><mi mathvariant="normal">子</mi><mi mathvariant="normal">替</mi><mi mathvariant="normal">换</mi><mi mathvariant="normal">）</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">令</mi><mi>U</mi><mi>x</mi><mo>=</mo><mi>y</mi><mi mathvariant="normal">得</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>L</mi><mi>y</mi><mo>=</mo><mi>P</mi><mi>b</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp; Ax = b\\&amp; PAx = Pb\\&amp; LUx = Pb(根据上面的式子替换） \\&amp; 令Ux = y 得 \\&amp; Ly = Pb \\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.500000000000002em;vertical-align:-3.5000000000000018em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.499999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.9999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.1599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">替</span><span class="mord cjk_fallback">换</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-1.6599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord cjk_fallback">令</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">得</span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="正向替换"><a class="markdownIt-Anchor" href="#正向替换"></a> 正向替换</h2><p>正向替换的目标是通过Ly = Pb来求y</p><p>我们可以使用一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>1...</mn><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi [1...n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>来替换P。 对i = 1, 2, …, n, 元素<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi [i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P_{i,\pi [i]} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>(第i行第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi [i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>列）。由于L是单位下三角矩阵，所以可以将式子写成</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mn>2</mn></msub><msub><mi>l</mi><mn>21</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mn>3</mn></msub><msub><mi>l</mi><mn>31</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>3</mn></msub><msub><mi>l</mi><mn>32</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mn>4</mn></msub><msub><mi>l</mi><mn>41</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>4</mn></msub><msub><mi>l</mi><mn>42</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>4</mn></msub><msub><mi>l</mi><mn>43</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><msub><mi>y</mi><mn>4</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix}y_1 &amp; &amp; &amp; &amp;= b_{\pi [1]}\\y_2 l_{21} &amp;+ y_2 &amp; &amp; &amp;= b_{\pi [2]}\\y_3 l_{31} &amp;+ y_3 l_{32} &amp;+ y_3 &amp;  &amp;= b_{\pi [3]}\\y_4 l_{41} &amp;+ y_4 l_{42} &amp;+ y_4 l_{43} &amp;+ y_4 &amp;= b_{\pi [4]}\\...\end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.000000000000001em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mtight">3</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mtight">4</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>可以求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msub></mrow><annotation encoding="application/x-tex">y_1 = b_{\pi [1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04964em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>，之后将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代入第二个式子可以求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后依次代入可以求出所有的y</p><p>然后可以求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">y_1, y_2...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span> 得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><msub><mi>b</mi><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msub><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>l</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">y_i = b_{\pi [i]} - \sum_{j=1}^{i-1} l_{ij}y_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04964em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="反向替换"><a class="markdownIt-Anchor" href="#反向替换"></a> 反向替换</h2><p>反向替换目标是通过 Ux = y求x</p><p>与之对应，过程不再细说。结果是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>u</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>u</mi><mrow><mi>i</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_i = ( y_i - \sum_{j=i+1}^{n} u_{ij}x_j ) / u_{ii}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="lu分解"><a class="markdownIt-Anchor" href="#lu分解"></a> LU分解</h2><p>我们计算出 A = LU，则称这两个矩阵是A的一个LU分解</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>ω</mi><mi>T</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>v</mi><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>11</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>ω</mi><mi>T</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>−</mo><mi>v</mi><msup><mi>ω</mi><mi>T</mi></msup><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>11</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>v</mi><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>11</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>L</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>ω</mi><mi>T</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>U</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\begin{bmatrix}  a_{11}&amp; a_{12} &amp; ... &amp; a_{1n}\\  a_{21}&amp; a_{22} &amp; ... &amp; a_{2n}\\  \vdots&amp;  \vdots&amp; \ddots &amp; \vdots \\  a_{n1}&amp; a_{n2} &amp; ... &amp; a_{nn}\end{bmatrix}&amp;=\begin{bmatrix} a_{11} &amp; \omega^T \\ v  &amp; A^{&#x27;}\end{bmatrix}\\&amp;=\begin{bmatrix} 1 &amp; 0\\ v/a_{11} &amp; E_{n-1}\end{bmatrix}\begin{bmatrix} a_{11} &amp; \omega^T\\ 0 &amp; A^{&#x27;} - v \omega^T / a_{11}\end{bmatrix}\\&amp;=\begin{bmatrix} 1 &amp; 0\\ v/a_{11} &amp; L^{&#x27;}\end{bmatrix}\begin{bmatrix} a_{11} &amp; \omega^T\\ 0 &amp; U^{&#x27;}\end{bmatrix}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:11.367621999999999em;vertical-align:-5.4338109999999995em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9338109999999995em;"><span style="top:-7.9338109999999995em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.6519055em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"></span></span><span style="top:-0.8480945em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4338109999999995em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9338109999999995em;"><span style="top:-7.9338109999999995em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span><span style="top:-3.6519055em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span><span style="top:-0.8480945em;"><span class="pstrut" style="height:4.9799999999999995em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.50124em;"><span style="top:-3.66124em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3587599999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0012400000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.50124em;"><span style="top:-3.66124em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3587599999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0012400000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4338109999999995em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中v是n-1的列向量， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ω</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\omega^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>是n-1的行向量.</p><p>最后一步是因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>−</mo><mi>v</mi><msup><mi>ω</mi><mi>T</mi></msup><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">A^{&#x27;} - v \omega^T / a_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0258099999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>也可以进行分解，并且分解的结果是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>L</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><msup><mi>U</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">L^{&#x27;}U^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    u<span class="comment">[i]</span><span class="comment">[i]</span> = a<span class="comment">[i]</span><span class="comment">[i]</span>;</span><br><span class="line">    for(int k=i+1; k&lt;n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        l<span class="comment">[i]</span><span class="comment">[k]</span> = a<span class="comment">[i]</span><span class="comment">[k]</span> / u<span class="comment">[i]</span><span class="comment">[i]</span>;</span><br><span class="line">        u<span class="comment">[k]</span><span class="comment">[i]</span> = a<span class="comment">[k]</span><span class="comment">[i]</span>;</span><br><span class="line">        for(int k=i+1; k&lt;n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=k+1; j&lt;n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a<span class="comment">[i]</span><span class="comment">[j]</span> = a<span class="comment">[i]</span><span class="comment">[j]</span> - l<span class="comment">[i]</span><span class="comment">[k]</span> * u<span class="comment">[k]</span><span class="comment">[j]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他有一个限制条件u[i][i]不能是0，否则会出现除0错误</p><h2 id="lup分解"><a class="markdownIt-Anchor" href="#lup分解"></a> LUP分解</h2><p>为了保证a[i][i] != 0, 我们可以使用该列中最大元素a[k][1]替换a[1][1],为了使方程组还成立，我们可以将第1行和第k行互换，等价于用一个置换矩阵Q乘在A的左边</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>v</mi><mi mathvariant="normal">/</mi><msub><mi>a</mi><mrow><mi>k</mi><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>k</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>ω</mi><mi>T</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>−</mo><mi>v</mi><msup><mi>ω</mi><mi>T</mi></msup><mi mathvariant="normal">/</mi><msub><mi>a</mi><mrow><mi>k</mi><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">QA = \begin{bmatrix} 1 &amp; 0\\ v/a_{k1} &amp; E_{n-1}\end{bmatrix}\begin{bmatrix} a_{k1} &amp; \omega^T\\ 0 &amp; A^{&#x27;} - v \omega ^{T} / a_{k1}\end{bmatrix}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.503811em;vertical-align:-1.0019055em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5019055em;"><span style="top:-3.6605744999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3580945em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0019055em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>和上面类似，就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">a_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>变成了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>k</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{k1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h1 id="矩阵求逆"><a class="markdownIt-Anchor" href="#矩阵求逆"></a> 矩阵求逆</h1><p>矩阵求逆也可以使用LUP分解 我们可以令 AX = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">E_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">E_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是n阶单位矩阵.X是n个列向量的和</p><p>我们可以把它看成n个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>X</mi><mi>i</mi></msub><mo>=</mo><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">AX_i = E_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来进行求解，然后最后将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>合并即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;lup分解求线性方程组&quot;&gt;&lt;a class=&quot;markdownIt</summary>
      
    
    
    
    <category term="数学" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>PE文件格式</title>
    <link href="http://xinhecuican.github.io/post/16e2846c.html"/>
    <id>http://xinhecuican.github.io/post/16e2846c.html</id>
    <published>2021-01-19T01:46:00.000Z</published>
    <updated>2021-01-20T08:31:21.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>PE文件时windows中的32位可执行文件。在linux中是<a href="https://xinhecuican.github.io/post/4551c130.html">elf</a>。如exe，dll，scr等都是PE文件</p><h1 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> 基本结构</h1><p><img src="/images/PE%E6%96%87%E4%BB%B61.jpg" alt="" /></p><p>PE文件中的RVA（相对虚拟地址）一般不是直接转换到真实的虚拟地址的，还要加上一个基准地址（ImageBase).也就是说VA = RVA + ImageBase</p><p>这样做主要是因为DLL，DLL动态链接时如果发现这个虚拟地址已经有其他的dll了，那么就要进行重定位到其他位置，如果没有ImageBase那么重定位是很麻烦的。</p><h2 id="pe头"><a class="markdownIt-Anchor" href="#pe头"></a> PE头</h2><h2 id="dos头"><a class="markdownIt-Anchor" href="#dos头"></a> DOS头</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_DOS_HEADER</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">WORD</span> e_magic<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_cblp<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_cp<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_crlc<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_cpaarhdr<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_minalloc<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_maxalloc<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_ss<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_sp<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_csum<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_ip</span><br><span class="line">    <span class="built_in">WORD</span> e_cs<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_lfarlc<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_ovno<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_res[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_oemid<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_oeminfo<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_res2[<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> e_lfanew<span class="comment">;</span></span><br><span class="line">&#125;IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>上面就是dos头的结构。</p><ul><li>e_magic: DOS签名(魔数）也就是4D5A（ascii的MZ）</li><li>e_lfanew: 指示NT头的偏移（NT头位置）</li></ul><h3 id="nt头"><a class="markdownIt-Anchor" href="#nt头"></a> NT头</h3><p>结构体：</p><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125;IMAGE_NT_HEADER32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><ul><li>Signature: 签名（50450000h)</li></ul><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">typedef struct _MIAGE_FILE_HEADER</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">WORD</span> Mechine<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> NumberOfSections<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> TimeDateStamp<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> PointerToSymbolTable<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> NumberOfSymbols<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> SizeOfOptionalHeader<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> Characteristics<span class="comment">;</span></span><br><span class="line">&#125;IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>Machine: 机器型号码，例如Intel x86是14c。</li><li>NumerOfSections： 节的数量</li><li>SizeOfOptionalHeader</li><li>Characteristics: 用来标识文件的属性，文件是否处于可运行状态，是否是dll文件。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在winnt.h中有Characterristics的信息</span><br><span class="line">IMAGE_FILE_RELOCS_STPIPPED 0X001</span><br><span class="line">IMAGE_FILE_EXECUATABLE_IMAGE 0X002</span><br><span class="line">IMAGE_FILE_LINE_NUMS_STRIPPED 0X004</span><br><span class="line">IMAGE_FILE_LOCAL_SYMS_STRIPPED 0X008</span><br><span class="line">IMAGE_FILE_AGGRSIVE_WS_TRIM 0X0010</span><br><span class="line">IMAGE_FILE_LARGE_ADDRESS_AWARE 0X0020</span><br><span class="line">IMAGE_FILE_BYTES_REVERSED_L0 0X0080</span><br><span class="line">IMAGE_FILE_32BIT_MACHINE 0X0100</span><br><span class="line">IMAGE_FILE_DEBUG_STRIPPED 0X200</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可选头，结构体为IMAGE_OPTIONAL_HEADER32，重要成员有9个：</p><ul><li>Magic：IMAGE_OPTIONAL_HEADER32为10B，IMAGE_OPTIONAL_HEADER64为20B</li><li>AddressOfEntryPoint：持有EP的RVA值，指出程序最先执行的代码起始地址</li><li>ImageBase：指出文件的优先装入地址（32位进程虚拟内存范围为：0～7FFFFFFF）</li><li>SectionAlignment,FileAlignment：前者制定了节区在内存中的最小单位，后者制定了节区在磁盘文件中的最小单位</li><li>SizeOfImage：指定了PE Image在虚拟内存中所占空间的大小</li><li>SizeOfHeaders：指出整个PE头的大小</li><li>Subsystem：区分系统驱动文件和普通可执行文件</li><li>NumberOfRvaAndSize：指定DataDirectory数组的个数</li><li>DataDirectory：由IMAGE_DATA_DIRECTORY结构体组成的数组</li></ul><h3 id="节区头"><a class="markdownIt-Anchor" href="#节区头"></a> 节区头</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">_MIAGE_SECTION_HEADER</span></span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        DWORD PhysicalAddress;</span><br><span class="line">        DWORD VirtualSize;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD VirtualAddress;</span><br><span class="line">    DWORD SizeOfRawData;</span><br><span class="line">    DWORD PointerToRawData;</span><br><span class="line">    DWORD PointerToRelacations;</span><br><span class="line">    DWORD PointerToLinenumbers;</span><br><span class="line">    WORD NumberOfRelocations;</span><br><span class="line">    WORD NumberOfLinenumbers;</span><br><span class="line">    DWORD Characteristics;</span><br><span class="line">&#125;IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><ul><li>VirtualSize: 节区所占大小</li><li>VirtualAddress： 节区起始位置</li><li>SizeOfRawData： 磁盘中的大小</li><li>PointerToRwaData： 磁盘中的位置</li><li>Characteristics： 节区.属性</li></ul><p>虚拟地址与内存地址之间的转换关系为<code>RAW - PointerToRawData = RVA - VirtualAddress</code></p><p>其中RAW是文件偏移，PointerToRawData是该节在文件中的首地址。RVA是在内存中的地址，VirtualAddress是在节在内存中的首地址</p><h2 id="iat导入地址表"><a class="markdownIt-Anchor" href="#iat导入地址表"></a> IAT（导入地址表）</h2><p>IAT是记录程序正在使用库中那些函数的表。</p><h3 id="dll"><a class="markdownIt-Anchor" href="#dll"></a> DLL</h3><p>为了理解IAT，首先要了解DLL（动态链接库，<a href="http://xn--linux-9n1hh05crl2a.so">在linux中是.so</a>).它是在程序运行时<a href="https://xinhecuican.github.io/post/4551c130.html">动态加载的，而不是在链接过程中加载的</a>。</p><h3 id="image_import_descriptor"><a class="markdownIt-Anchor" href="#image_import_descriptor"></a> IMAGE_IMPORT_DESCRIPTOR</h3><p>这个表记录了要导入那些头文件.它的结构体数组的首地址是IMAGE_OPTIONAL_HEADER32.DataDirectory[1].VirtualAddress</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">_IMAGE_IMPORT_DESCRIPTOR</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        DWORD Characteristics;</span><br><span class="line">        DWORD OriginalFirstThubk;</span><br><span class="line">    &#125;;</span><br><span class="line">    DWORD TimeDateStamp;</span><br><span class="line">    DWORD ForwarderChain;</span><br><span class="line">    DWORD Name;</span><br><span class="line">    DWORD FirstThunk;</span><br><span class="line">&#125;;IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">_IMAGE_IMPORT_BY_NAME</span></span></span><br><span class="line">&#123;</span><br><span class="line">    WORD Hint;</span><br><span class="line">    BYTE Name[<span class="number">1</span>];</span><br><span class="line">&#125;IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p>每一个导入的库的信息使用用一个IMAGE_IMPORT_DESCRIPTOR进行描述</p><ul><li>OriginalFirstThunk： INT地址（RVA）</li><li>Nam： 库名称字符串的<strong>地址</strong>（RVA）</li><li>FirstThunk： IAT地址（RVA）</li><li>OriginalFirstThunk(INT): INT是包含导入函数信息的结构体指针数组，只有获得了这些信息才有可能在加载到进程的库中获得函数首地址。</li></ul><h2 id="eat"><a class="markdownIt-Anchor" href="#eat"></a> EAT</h2><p>EAT是dll库用来提供函数地址的，IAT记录了导入的dll库的函数地址。</p><p>与IAT不同EAT只有一个，位置在IMAGE_OPTIONAL_HEADER32.DataDirectory[0].VirtualAddress中</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_EXPORT_DIRECTORY</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">DWORD</span> Characteristics<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> TimeDateStamp<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> MajorVersion<span class="comment">;</span></span><br><span class="line">    <span class="built_in">WORD</span> MinorVersion<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> Name<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> Base<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> NumberOfFunctions<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> NumberOfNames<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> AddressOfFuctions<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DWORD</span> AddressOfNames<span class="comment">;</span></span><br><span class="line">    <span class="built_in">DWORD</span> AddressOfNameOrdinals<span class="comment">;</span></span><br><span class="line">&#125;IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>NumberOfFunctions: 实际Export函数个数</li><li>NumberOfNames： 实际有名字函数个数</li><li>AddressOfFunctions： Export函数地址数组</li><li>AddressOfNames： 函数名称地址数组</li><li>AddressOfNameOrdinals： Ordinal地址数组</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;PE文件时windows中的32位可执行文件。在linux中是&lt;a href</summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串匹配</title>
    <link href="http://xinhecuican.github.io/post/ef3a3fcc.html"/>
    <id>http://xinhecuican.github.io/post/ef3a3fcc.html</id>
    <published>2021-01-18T12:23:00.000Z</published>
    <updated>2021-01-19T08:31:18.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>字符串匹配是在一个长度为s的t串中找到和长度为m的p串相同的部分。t串是匹配串，p串是模式串</p><h1 id="pabin-karp算法"><a class="markdownIt-Anchor" href="#pabin-karp算法"></a> Pabin-Karp算法</h1><p>它的基本思想是哈希。即将匹配串中每一个长度为m的子串进行哈希并与p串的哈希值进行比较。</p><p>假设模式串p[1…m]，得到哈希值的算法为</p><blockquote><p>p = （p[m] + 10(p[m-1] + 10(p[m-2] + … + 10(p[2] + 10(p[1]))…)） % q – 霍纳法则</p></blockquote><p>q是为了防止超范围的，10是基数，可以变成其他值</p><p>对于t串（匹配串），它的处理方法与p串相同，但是还需要进行移动，移动的方法为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub><mo>=</mo><mn>10</mn><mo stretchy="false">(</mo><msub><mi>t</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>T</mi><mo stretchy="false">[</mo><mi>s</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>+</mo><mi>T</mi><mo stretchy="false">[</mo><mi>s</mi><mo>+</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t_2 = 10(t_1 - 10^{m-1}T[s+1]) + T[s+m+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><p>其中T[s+m+1]是原来字符串的高一位，T[s+1]就是原来字符串的最低位。也就是减去最低位然后将字符串左移一位再加上最高位。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>可以使用快速幂的方法在O(lgm)时间计算完。</p><p>在计算完所有子串之后就可以对每一个哈希值进行比较了。如果p串哈希值和子串哈希值相同<strong>并不能</strong>说明二者一定相同，还可能产生<a href="https://xinhecuican.github.io/post/33cb1151.html#%E5%93%88%E5%B8%8C%E8%A1%A8">哈希冲突</a>。因此还需要对每一个字符进行匹配。</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">bool <span class="built_in">match</span>(string <span class="built_in">T</span>, string P, <span class="built_in">int</span> d, <span class="built_in">int</span> p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = T.size();</span><br><span class="line">    <span class="built_in">int</span> p = P.size();</span><br><span class="line">    <span class="built_in">int</span> h = d^m-<span class="number">1</span> <span class="built_in">mod</span> q;</span><br><span class="line">    <span class="built_in">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">t</span> = <span class="number">0</span>;</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (d * p + P[i] ) % q;</span><br><span class="line">        <span class="built_in">t</span> = (d * <span class="built_in">t</span> + <span class="built_in">T</span>[i] ) % q;</span><br><span class="line">    &#125;</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">n</span>-m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">if</span>(p == <span class="built_in">t</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> k;</span><br><span class="line">            for(k=<span class="number">0</span>; k&lt;m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">if</span>(P[k] != <span class="built_in">T</span>[i+k])</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span>(k == m)</span><br><span class="line">            &#123;</span><br><span class="line">                return <span class="built_in">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">t</span> = (d * (<span class="built_in">t</span> - <span class="built_in">T</span>[s+<span class="number">1</span>] * h) + <span class="built_in">T</span>[s+m+<span class="number">1</span>]) % q;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有限状态自动机法"><a class="markdownIt-Anchor" href="#有限状态自动机法"></a> 有限状态自动机法</h1><p>例如：<img src="/images/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D2.png" alt="" /></p><p>首先0和1就是两个状态，而输入就是a和b。根据输入可以在0和1之间转移。</p><p>例如：输入为ababa，初始状态是0.那么首先输入a转移到1，输入b转移到0，输入a又转移到1依次进行下去。</p><p>而字符串匹配也可以用类似的思路。例如p串为ababaca，t串为abababacaba。用输入字符串的后缀和p串进行匹配。</p><ul><li>初始为匹配个数为0</li><li>输入a， 匹配个数1</li><li>输入ab，匹配个数2</li><li>输入aba， 匹配个数3</li><li>输入abab， 匹配个数4</li><li>输入ababa， 匹配个数5</li><li>输入ababab： 匹配个数4（用p串和这个串的后缀进行匹配）</li><li>…</li></ul><p>按照这个方法一直进行匹配，如果最终匹配个数是p串长度则成功匹配。</p><p><img src="/images/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D3.jpg" alt="" /></p><p>上图就是字符串匹配的状态转移图了。注意这里只有两个字母ab，如果是26个字母那么状态转移图将非常复杂。</p><p>左边是表示某个状态输入某个字符会转移到某个状态的图。例如状态5（ababa）输入b会进入状态4.</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">计算状态转移函数的方法</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">m</span> = p.size();</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">state</span>[<span class="keyword">m</span>][number];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">m</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;number; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        char c = (char)(<span class="string">&#x27;a&#x27;</span> + k);</span><br><span class="line">        string <span class="function"><span class="keyword">sub</span> = <span class="title">p</span>.<span class="title">substring</span>(0, <span class="title">i</span>) + <span class="title">c</span></span>;</span><br><span class="line">        <span class="keyword">state</span>[i][k] = match(<span class="function"><span class="keyword">sub</span>, <span class="title">p</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> match(string <span class="function"><span class="keyword">sub</span>, <span class="title">string</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> suffixLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(k &lt; sub.length() &amp;&amp; k &lt; p.length()) </span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= k; i++) </span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (sub.charAt(sub.length() - <span class="number">1</span> - k + i) != p.charAt(i)) </span><br><span class="line">             &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (i - <span class="number">1</span> == k) </span><br><span class="line">         &#123;</span><br><span class="line">            suffixLen = k+<span class="number">1</span>;</span><br><span class="line">         &#125; </span><br><span class="line"></span><br><span class="line">         k++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> suffixLen;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> kmp</h1><p><a href="https://xinhecuican.github.io/post/57671.html">可以看这篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;字符串匹配是在一个长度为s的t串中找到和长度为m的p串相同的部分。t串是匹配</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机系统综合实践报告</title>
    <link href="http://xinhecuican.github.io/post/9d855db5.html"/>
    <id>http://xinhecuican.github.io/post/9d855db5.html</id>
    <published>2021-01-04T12:23:00.000Z</published>
    <updated>2021-01-04T12:34:38.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="实验进度"><a class="markdownIt-Anchor" href="#实验进度"></a> 实验进度</h1><table><thead><tr><th>任务</th><th>完成</th></tr></thead><tbody><tr><td>必做任务１</td><td>完成</td></tr><tr><td>必做任务２</td><td>完成</td></tr><tr><td>必做任务３</td><td>完成</td></tr><tr><td>必做任务４</td><td>完成</td></tr><tr><td>选做任务１</td><td>完成</td></tr><tr><td>选做任务２</td><td>完成</td></tr><tr><td>选做任务３</td><td>完成</td></tr></tbody></table><h1 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h1><h2 id="思考题1"><a class="markdownIt-Anchor" href="#思考题1"></a> 思考题１</h2><p>段选择符index是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="normal">２</mi><mn>1</mn></msup><mn>3</mn></mrow><annotation encoding="application/x-tex">２^13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord cjk_fallback">２</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">3</span></span></span></span>,最多可以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="normal">２</mi><mn>1</mn></msup><mn>3</mn></mrow><annotation encoding="application/x-tex">２^13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord cjk_fallback">２</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">3</span></span></span></span>个段描述符</p><h2 id="思考题2"><a class="markdownIt-Anchor" href="#思考题2"></a> 思考题２</h2><p>不可以，因为虚拟地址就是需要通过ＧＤＴ进行转换，如果ＧＤＴ的首地址都是虚拟地址那么就没有东西可以转换ＧＤＴ的虚拟地址了</p><h2 id="思考题3"><a class="markdownIt-Anchor" href="#思考题3"></a> 思考题３</h2><p>在段寄存器中保存基地址和限制</p><h2 id="思考题4"><a class="markdownIt-Anchor" href="#思考题4"></a> 思考题４</h2><p>段的体积大，在内存中无法做到连续存储，容易形成外碎片，降低内存利用率。</p><h2 id="思考题5"><a class="markdownIt-Anchor" href="#思考题5"></a> 思考题５</h2><p>分页式管理便于进行内存调度，并且没有外碎片，内碎片不超过页的大小</p><h2 id="思考题6"><a class="markdownIt-Anchor" href="#思考题6"></a> 思考题６</h2><p>因为低１２位是页内偏移，可以直接根据虚拟地址给出，不需要进行转换</p><p>不能，ＧＤＴ使用线性地址一样，ＣＲ３是用于物理地址转换的，如果他也是虚拟地址就没有什么可以转换ＣＲ３的线性地址了。</p><p>一级页表有占用内存过多的缺点。而二级页表虽然看上去消耗内存反而增大了，但是实际上很多对应ptable并没有实际创建因而减小了内存。</p><h2 id="思考题7"><a class="markdownIt-Anchor" href="#思考题7"></a> 思考题７</h2><p>空指针并不是空的，只是指向的地址是０，属于操作系统无法访问。</p><h2 id="思考题8"><a class="markdownIt-Anchor" href="#思考题8"></a> 思考题８</h2><p>在页表项中有权限位，进行地址转换时首先检查权限位</p><h2 id="思考题9"><a class="markdownIt-Anchor" href="#思考题9"></a> 思考题９</h2><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C1.jpg" alt="" /></p><h2 id="思考题10"><a class="markdownIt-Anchor" href="#思考题10"></a> 思考题１０</h2><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C2.png" alt="" /></p><p>原本的最后ptable会到负数,ptable[-1]</p><h2 id="思考题11"><a class="markdownIt-Anchor" href="#思考题11"></a> 思考题１１</h2><p><strong>问题１</strong></p><p>因为这里定义的ｘ生成的地址是虚拟地址，超过了物理地址的界限，报错说<code>0xc014a000 outside of the physical memory.</code></p><p>而ｋvm.c中的虚拟地址都经过了va_to_pa的转换，在物理地址范围之内</p><p><strong>问题２</strong></p><p>两个虚拟地址指向同一个物理地址是因为在<code>0xc0100000</code>上的在init_mm中作为今后访问内核的虚拟地址，另一份在updir没有正常使用时让虚拟地址得以正常翻译</p><p><strong>问题３</strong></p><p>出现了present = 0的错误。因为开启paging位之后，所有地址都需要进行虚拟地址转换，而esp还是使用开始的物理地址发现这个虚拟地址下并没有使用。</p><p><strong>问题４</strong></p><p>出现的问题和上面相同，使用init_cond()会先push 再jmp,之后又会通过ret进行返回。通过调试得到是在loader中出现问题的，而在lnaddr_read和lnaddr_write处监视发现对应栈的位置也只读写了一次。只能推测是因为将地址压入栈导致栈溢出</p><h1 id="实验遇到的问题"><a class="markdownIt-Anchor" href="#实验遇到的问题"></a> 实验遇到的问题</h1><p>因为这个实验跨度比较长，结果出现了cache没有写完就去写后面的分段分页的情况。结果写分页的时候始终出现了问题，于是便一条条代码去查看。在kvm.c的内联汇编处发现了stos只有第一次会正确写入，之后变不会写到内存，但是如果使用swaddr_read()读取了一下内存(当时用x命令查看)就能正常写入。当时花了近一天的时间才想到可能是内存相关函数的原因，然后就在内存函数中逐条追踪返回值，才发现原来cache没有写完。</p><p>在写段结构的lgdt命令时发现将数直接转换成指针可能会出现一些奇奇怪怪的问题。然后就直接访问内存读取数据然后进行拼接。但是之后发现是可以(PDE*)(void*)之类的方式进行转换的。甚至可以使用绝对地址进行函数跳转　(void(*)(void)eip)()。是一个参数为void 返回值为void 地址为eip的函数。</p><h1 id="实验心得"><a class="markdownIt-Anchor" href="#实验心得"></a> 实验心得</h1><ul><li>对分段、分页、cache的实现有了更深的理解</li><li>对地址和指针之间的转换更加熟练</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;实验进度&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="http://xinhecuican.github.io/post/41e39f2b.html"/>
    <id>http://xinhecuican.github.io/post/41e39f2b.html</id>
    <published>2020-12-26T07:28:00.000Z</published>
    <updated>2020-12-27T07:19:29.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="段式管理"><a class="markdownIt-Anchor" href="#段式管理"></a> 段式管理</h1><p>段指的是一些有相似功能的程序集合（不是准确描述），例如程序段，代码段，全局变量段等。</p><h2 id="段的分配算法"><a class="markdownIt-Anchor" href="#段的分配算法"></a> 段的分配算法</h2><h3 id="固定分区法"><a class="markdownIt-Anchor" href="#固定分区法"></a> 固定分区法</h3><p>事先把磁盘分为大小固定的分区，之后有进程来了就将它放入可以容纳的分区中。每个分区大小可以不一样，如4k,8k等。</p><p>这种方法最大的问题就是会产生很大的内碎片。例如没有空间使用了，然后来了一个大小为1k的进程，这时一块16k的分区释放了，这个进程只能进这个空间，于是浪费了15k的空间。</p><p>还可以对每个大小的分区使用一个列表。列表中存放的是可以被这个空间容纳的进程。进程先是按照大小分配到这些列表中，然后再进行运行。</p><p>这种方法可以减小每个分区的内碎片，但是不一定能提高系统总的空间利用率，因为可能进程集中于某一个大小的分区，这样其他的分区就没有得到充分利用。</p><h3 id="可变分区法"><a class="markdownIt-Anchor" href="#可变分区法"></a> 可变分区法</h3><p>可变分区法就是开始不分区，等进程来了之后再分配它需要的大小给他。这种方法可以使用一个链表进行维护，每次来了一个进程就记录内存起始位置和终止位置。</p><ul><li>最先适配：从一个方向进行扫描，找到第一个可以容纳的空间放入进程</li><li>下次适配：从上次分配的地方开始扫描，实际上差别并不大</li></ul><p>此外还有两种有两种策略，最好匹配和最差匹配。最好匹配指的是每次都把这个进程分配到最大的空间中，而最差匹配是指每次都把它分配到可分配区域的最小区域中。</p><p>但是这两种分配方法都无法解决外碎片的问题。但操作系统运行一段时间后，内存中的可用区间的大小会越来越小，虽然合并起来有空间但是无法使用。这时候就需要将这些外碎片整合到一起，叫做<strong>内存紧缩</strong>。内存整理需要大量的时间。</p><h2 id="交换技术"><a class="markdownIt-Anchor" href="#交换技术"></a> 交换技术</h2><p>交换技术指的是将暂时不需要使用的<strong>进程</strong>送到外存中，空出足够的空间给需要的进程使用。</p><p>请求式分段技术和缺页替换类似。请求式分段技术和交换技术的区别是</p><blockquote><p>交换技术需要交换整个进程，而请求式分段技术只需要交换一个段。</p></blockquote><h2 id="覆盖技术"><a class="markdownIt-Anchor" href="#覆盖技术"></a> 覆盖技术</h2><p>覆盖技术交换同一个进程中的段的技术，它按照时间先后顺序依次替换某些段。在需要时就由程序员控制进行替换。</p><p>这种技术和请求式分段的最大区别是：</p><blockquote><p>请求式分段是操作系统进行的，而覆盖技术的段交换需要程序员自己把握。</p></blockquote><h1 id="页的分配方法"><a class="markdownIt-Anchor" href="#页的分配方法"></a> 页的分配方法</h1><p><a href="https://xinhecuican.github.io/post/f79e4123.html">虚拟内存</a></p><p><a href="https://xinhecuican.github.io/post/7d1c86da.html">缓存</a></p><h1 id="段分配和页分配比较"><a class="markdownIt-Anchor" href="#段分配和页分配比较"></a> 段分配和页分配比较</h1><p>段式管理的优点：</p><ul><li>分段比分页更有逻辑性，将同类的或相关的内容放在一个段内，这样不会由于页面置换算法选择不当而形成“抖动”现象。</li><li>同类内容划分在一个段内，可以实现段的保护，如代码段设置为只读，数据段设置为读写</li><li>公共代码段可以通过映射共享到多个进程。</li></ul><p>段式管理的缺点：</p><ul><li>段体积大，在内存中无法不连续存储，易形成内存外碎片，降低内存利用率。</li></ul><p>页式管理的优点：</p><ul><li>没有外部碎片，最后一页可能有内碎片但不大;程序不必连续存放;便于改变程序占用空间大小</li></ul><p>页式管理的缺点：</p><ul><li>逻辑地址空间划分只简单依靠页面大小，缺乏内在逻辑性，导致一方面相关内容被分散 到多页上，页面置换不当时容易造成内存抖动，另一方面不同性质的内容被分到同一页中，使得页面 权限保护设置困难</li></ul><p>段页式内存管理是将逻辑地址分成三个部分，分别是段号，页号和页内偏移。有一个段表记录了每个段包含页的起始地址。</p><p>进行地址变换时，首先通过段表找到页表起始地址，然后再通过页表找到物理地址。这种方法和IA-32的保护机制实际上是不一样的。IA-32实际上进行了两步操作（线性地址翻译和物理地址翻译），但是这里实际上是一步操作（地址翻译）。</p><p>段页式管理：</p><ul><li>先分段再分页，以段为单位调入调出，以页为单位在内存中不连续存储，既保证了相关内容 同时进出内存，便于设置权限保护，又可以充分利用内存空间。 段页式结构复杂，实现起来效率低，所以没有被广泛采用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;段式管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>骑砍2 mod类列举</title>
    <link href="http://xinhecuican.github.io/post/d94f88de.html"/>
    <id>http://xinhecuican.github.io/post/d94f88de.html</id>
    <published>2020-12-23T13:30:00.000Z</published>
    <updated>2021-02-25T10:48:34.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h1><p><a href="https://docs.bannerlordmodding.com/">参考1： 非官方文档</a></p><p><a href="https://forums.taleworlds.com/index.php?threads/saving-mod-data-settings-thoughts.412611/">参考2： 有关保存数据的讨论</a></p><p>本文只是为了记录自己看到和使用的一些类的大致用途和一些主要方法，具体请使用dnspy等工具进行查看。</p><blockquote><p>dnspy的分析功能很好用。还有程序集搜索功能</p></blockquote><p><img src="/images/%E9%AA%91%E7%A0%8D1.PNG" alt="" /></p><h1 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h1><ul><li>settlement: settlement是在战役地图中的村庄，城镇，城堡</li><li>MobileParty: 军队<ul><li><a href="#Roster">TroopRoster</a>: 军队花名册</li><li><a href="#Roster">PrisonRoster</a>: 囚犯花名册</li><li>TickAi(): 最终决定ai的函数，下面的aibehavior不一定是最终的ai</li><li>Morale： 士气，通过DefaultPartyMoraleModel决定</li><li>DefaultBehavior: 当前的ai</li><li>ShortTermBehavior: 短期ai，用来设置追逐和逃跑行为</li><li>ItemRoster: 物品清单。</li><li>InventoryCapacity： 容量，通过InventoryCapacityModel得到</li><li>Tier： 部队的等阶，最高是6阶，英雄是0阶</li><li>GetBestInitiativeBehavior(): 里面有一些模拟战的行为</li></ul></li><li>Army： 军团，也就是需要凝聚力的那个<ul><li>HourlyTick(): 每小时触发的函数，从中可以看出Army的行为相对固定，也没有ShortTermBehavior</li></ul></li><li><span id="Roster">Roster</span>: 队伍花名册<ul><li>TotalManCount: 所有人</li><li>TotalWounded: 所有受伤的人</li><li>TotalHeroes: 所有英雄</li><li>遍历成员信息可以直接使用foreach(TroopRosterElement i in troop_roster)，实现了一个接口。</li></ul></li><li>Campaign: 战役系统管理类。<ul><li>MainParty: 玩家</li><li>RealTick(): 每次tick触发的函数</li><li>CurrentTime： 当前时间（转化为小时的）</li></ul></li><li>CampaignTime： 时间类<ul><li>Now： 当前的时间（没有转化为小时）</li><li>IsDayTime: 是否是白天</li></ul></li><li>MapVM： 地图的一些属性，没有仔细看</li><li>MapScreen: 地图类，里面有鼠标指针和触发指针的一些事件，调用了<code>InformationManager.AddTooltipInformation</code>。但是现在没办法在toolTip中加东西（都是private，真无语）</li><li>Mission： 在场景里面的战斗。<ul><li>GetAgentslnRange: 获得士兵的观察范围</li><li>AddMissileAux: 射击时调用的一个函数</li><li>FindPositionWithBiggestSlopeTowardsDirectionInSquare：用于找合适的战略位置</li><li>GetMedianPositionOfAgents</li><li>GetClosetFleePosition</li><li>SpawnAttachedWeaponOnCorpse: 从尸体上获得武器</li><li>DecideAgentHitParticles</li><li>DecideWeaponCollisionReaction</li><li>UpdateMomentumRemaining： 剩余的动量</li><li>SpawnTroops(): 生成个体</li><li>SpawnFormation(): 生成阵营。</li></ul></li><li>SandBoxMissions: 打开各种战役的函数（重要）<ul><li>OpenBattleMission(): 开始野战。里面有Battle加载的MissionBehavior</li><li>还有许多各种各样的战役，MissionBehavior都是在这里加载的，有一个BattleAiBehaivor(可能有误）里面还加载了一些Agent的Component</li></ul></li><li>MissionState:<ul><li>HandleOpenNew: 开始新mission使用的函数</li><li>AddDefaultMissionBehaviorsTo: 加载mission行为</li></ul></li><li>PartyScreenManager: 管理部队界面。</li><li>OrderController: 部队命令管理。主要是SetOrder决定了按键之后的处理。</li></ul><h2 id="model-behavior"><a class="markdownIt-Anchor" href="#model-behavior"></a> Model &amp;&amp; Behavior</h2><p><strong>Model</strong>指的是游戏中使用的一些计算模型，例如食物消耗，攻击力计算等模型。这些model会在官方游戏代码中调用。</p><p><strong>Behavior</strong>是在游戏中触发某些事件时执行的函数。Campaign中可以执行的Behavior可以搜索Campaign类中的AddBehavior函数，这些Behavior的具体实现大多在Campaign.Sandbox.某某Bahavior中</p><p>替换官方model和增加Behavior</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">在继承了Submodule的类中</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGameStart</span>(<span class="params">Game game, IGameStarter gameStarterObject</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">bool</span> flag = game.GameType <span class="keyword">is</span> Campaign;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将Model和Behavior加入到Campaign中</span></span><br><span class="line">            CampaignGameStarter campaignGameStarter = (CampaignGameStarter)gameStarterObject;</span><br><span class="line">            campaignGameStarter.AddModel(<span class="keyword">new</span> YourModel());<span class="comment">//增加model</span></span><br><span class="line">            IList&lt;GameModel&gt; list = starter.Models <span class="keyword">as</span> IList&lt;GameModel&gt;;</span><br><span class="line">            <span class="built_in">bool</span> flag = list != <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)<span class="comment">//替换model</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;list.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(list[i] <span class="keyword">is</span> DefaultxxxModel)</span><br><span class="line">                    &#123;</span><br><span class="line">                        list[i] = <span class="keyword">new</span> replacemodel();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            campaignGameStarter.AddBehavior(<span class="keyword">new</span> YourBehavior());<span class="comment">//增加Behavior</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在继承了Behavior的类中</span><br><span class="line">注册Behavior</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RegisterEvents</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">            CampaignEvents.HourlyTickEvent.AddNonSerializedListener(<span class="keyword">this</span>, <span class="keyword">new</span> Action(<span class="keyword">this</span>.HourlyEvent));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发过程</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">一个报错</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.Army</span><span class="selector-class">.ThinkAboutTravelingToAssignment</span>()</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.Army</span><span class="selector-class">.HourlyTick</span>(<span class="selector-tag">MBCampaignEvent</span> <span class="selector-tag">campaignevent</span>, <span class="selector-tag">Object</span><span class="selector-attr">[]</span> <span class="selector-tag">delegateparams</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.MBCampaignEvent</span><span class="selector-class">.RunHandlers</span>(<span class="selector-tag">Object</span><span class="selector-attr">[]</span> <span class="selector-tag">delegateParams</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.MBCampaignEvent</span><span class="selector-class">.CheckUpdate</span>()</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.CampaignEvents</span><span class="selector-class">.SignalPeriodicEvents</span>()</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.Campaign</span><span class="selector-class">.Tick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.Campaign</span><span class="selector-class">.RealTick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">realDt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.CampaignSystem</span><span class="selector-class">.MapState</span><span class="selector-class">.OnMapModeTick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.Core</span><span class="selector-class">.GameStateManager</span><span class="selector-class">.OnTick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.Core</span><span class="selector-class">.Game</span><span class="selector-class">.OnTick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.Core</span><span class="selector-class">.GameManagerBase</span><span class="selector-class">.OnTick</span>(<span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">TaleWorlds</span><span class="selector-class">.MountAndBlade</span><span class="selector-class">.Module</span><span class="selector-class">.OnApplicationTick_Patch1</span>(<span class="selector-tag">Module</span> <span class="selector-tag">this</span>, <span class="selector-tag">Single</span> <span class="selector-tag">dt</span>)</span><br></pre></td></tr></table></figure><h3 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h3><ul><li>DefaultPartyMoraleModel： 士气计算模型。主要是通过GetEffectivePartyMorale()函数得到士气</li><li>DefaultPartySpeedCalculatingModel： 部队速度计算模型</li><li>DefaultCombatSimulationModel： 模拟战计算类</li><li>SandboxAgentStatCalculateModel: mission中士兵状态（速度生命等）模型。</li></ul><h3 id="behavior"><a class="markdownIt-Anchor" href="#behavior"></a> Behavior</h3><ul><li>HourlyTickBehavior(): 每小时触发一次</li><li>HourlyTickPartyBehavior(): 以部队为单位每小时触发</li><li>OnPartySizeChangedEvent():</li><li>OnNewGameCreatedEvent9(): 可以在这里面做一些初始化内容，有一些在Submodule中无法完成。</li><li>OnBeforeSaveEvent():</li><li>OnGameLoadedEvent():</li><li>DefaultNotificationsCampaignBehavior: 负责左下角提示的和上方提示的</li><li>FollowAgentBehavior: 跟随</li><li>DefaultLogsCampaignBehavior： addlog最终调用的是displaymessage。</li></ul><h3 id="aibehavior"><a class="markdownIt-Anchor" href="#aibehavior"></a> AiBehavior</h3><p>这个在Taleworlds.CampaignSystem.Sanbox.CampaignBehaviors.AiBehaviors中</p><ul><li>ThinkBehavior: 这是总的ai计算模型（但是限制很多，例如GotoPoint在这里设置是没用的,并且之后还要受MobileParty中的TickAi()调节)<ul><li>其中调用了AiHourTick()，也就是说会调用所有申请了AiHourTickEvent的函数。</li><li>它是通过比较AiBehaviorScores来确定到底是进行哪种Ai活动的。也就是说想要更改Ai的话要自己确定这个Score是多少。</li></ul></li><li>EngageBehavior、PatrollingBehavior等： 大致结构是通过一些限制条件限制进行这些活动的情况。然后通过计算Score的函数得到最终得数。（得分好像并不大，一般应该在0到1之间）</li></ul><h1 id="关于保存"><a class="markdownIt-Anchor" href="#关于保存"></a> 关于保存</h1><p>关于上面参考中给出的使用json保存的方式。有一个问题就是无法保存骑砍官方类的内容。所以推荐还是使用Attribute的方式，但是如果是Dictionary的数据无法保存可以试一下在DefineContainerDefinitions()中添加对要保存的类的List定义和Dictionary定义。</p><p>并且定义时不仅要定义自己创建的类。里面所有需要保存的成员变量都要确保它已经定义了。例如可能Dictionary&lt;string, float&gt;都可能没有定义。<strong>为了检查</strong>是否可以正常保存建议直接打开游戏保存测试一下，如过出现Save error则需要检查定义。</p><h1 id="gui"><a class="markdownIt-Anchor" href="#gui"></a> GUI</h1><ul><li>GauntletLayer: 这个应该是显示的层<ul><li>LoadMovie(“name”, datasource): name是自己写的xml，datasource是…VM.</li></ul></li><li>Widget： 各种各样的工具，例如TextWiget其实就是文本，ListPanel是列表容器等等。使用这些widget可以填充面板中的内容。</li></ul><h2 id="xxxscreenxml"><a class="markdownIt-Anchor" href="#xxxscreenxml"></a> xxxscreen.xml</h2><p>这里指的xml就是上面LoadMovie中的xml。可以随便打开一个GUI/Prefabs文件夹看一看结构。一般都是一种Widget，然后再是子节点，子节点中又有各种各样的容器或者工具</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Prefab</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Window</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Widget</span> <span class="attr">Id</span>=<span class="string">&quot;tired_party_information_screen&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Standard.Background</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ListPanel</span> <span class="attr">Id</span>=<span class="string">&quot;MainSectionListPanel&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">MarginTop</span>=<span class="string">&quot;164&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Widget</span> <span class="attr">Id</span>=<span class="string">&quot;CenterPanel&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ScrollablePanel</span> <span class="attr">Id</span>=<span class="string">&quot;ScrollablePanel&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">AutoHideScrollBarHandle</span>=<span class="string">&quot;true&quot;</span> <span class="attr">AutoHideScrollBars</span>=<span class="string">&quot;false&quot;</span> <span class="attr">ClipRect</span>=<span class="string">&quot;MyClipRect&quot;</span> <span class="attr">InnerPanel</span>=<span class="string">&quot;MyClipRect\TabControl&quot;</span> <span class="attr">VerticalScrollbar</span>=<span class="string">&quot;..\..\VerticalScrollbar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Widget</span> <span class="attr">Id</span>=<span class="string">&quot;MyClipRect&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Brush.GlobalAlphaFactor</span>=<span class="string">&quot;0.75&quot;</span> <span class="attr">ClipContents</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">TabControl</span> <span class="attr">Id</span>=<span class="string">&quot;TabControl&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;CoverChildren&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">TiredPartyCategory</span> <span class="attr">Id</span>=<span class="string">&quot;all_information&quot;</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;AllInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">TiredPartyCategory</span> <span class="attr">Id</span>=<span class="string">&quot;hidden_information&quot;</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HiddenInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">TiredPartyCategory</span> <span class="attr">Id</span>=<span class="string">&quot;important_infomation&quot;</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;ImportantInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">TabControl</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Widget</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Widget</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">SuggestedHeight</span>=<span class="string">&quot;150&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Bottom&quot;</span> <span class="attr">Sprite</span>=<span class="string">&quot;StdAssets\Popup\scrollable_field_gradient&quot;</span> <span class="attr">IsEnabled</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ScrollablePanel</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Widget</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ScrollbarWidget</span> <span class="attr">Id</span>=<span class="string">&quot;VerticalScrollbar&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">SuggestedWidth</span>=<span class="string">&quot;8&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">MarginTop</span>=<span class="string">&quot;26&quot;</span> <span class="attr">MarginBottom</span>=<span class="string">&quot;85&quot;</span> <span class="attr">AlignmentAxis</span>=<span class="string">&quot;Vertical&quot;</span> <span class="attr">Handle</span>=<span class="string">&quot;VerticalScrollbarHandle&quot;</span> <span class="attr">MaxValue</span>=<span class="string">&quot;100&quot;</span> <span class="attr">MinValue</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Widget</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">SuggestedWidth</span>=<span class="string">&quot;4&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Sprite</span>=<span class="string">&quot;MPLobby\CustomServer\lobby_slider_bed&quot;</span> <span class="attr">Brush.AlphaFactor</span>=<span class="string">&quot;0.4&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ImageWidget</span> <span class="attr">Id</span>=<span class="string">&quot;VerticalScrollbarHandle&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">SuggestedWidth</span>=<span class="string">&quot;8&quot;</span> <span class="attr">SuggestedHeight</span>=<span class="string">&quot;10&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Brush</span>=<span class="string">&quot;FaceGen.Scrollbar.Handle&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ScrollbarWidget</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ListPanel</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Standard.TopPanel</span> <span class="attr">Parameter.Title</span>=<span class="string">&quot;@Title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ListPanel</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;CoverChildren&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">SuggestedHeight</span>=<span class="string">&quot;128&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Bottom&quot;</span> <span class="attr">LayoutImp.LayoutMethod</span>=<span class="string">&quot;HorizontalLeftToRight&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">OptionsTabToggle</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;AllInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">Parameter.ButtonBrush</span>=<span class="string">&quot;Header.Tab.Left&quot;</span> <span class="attr">Parameter.TabName</span>=<span class="string">&quot;all_information&quot;</span> /&gt;</span>                </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">OptionsTabToggle</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HiddenInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">PositionYOffset</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Parameter.ButtonBrush</span>=<span class="string">&quot;Header.Tab.Center&quot;</span> <span class="attr">Parameter.TabName</span>=<span class="string">&quot;hidden_information&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">OptionsTabToggle</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;ImportantInformation&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">PositionYOffset</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Parameter.ButtonBrush</span>=<span class="string">&quot;Header.Tab.Center&quot;</span> <span class="attr">Parameter.TabName</span>=<span class="string">&quot;important_infomation&quot;</span> /&gt;</span>               </span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ListPanel</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Standard.TopPanel</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Standard.DialogCloseButtons</span> <span class="attr">Parameter.CancelButtonAction</span>=<span class="string">&quot;ExecuteCancel&quot;</span> <span class="attr">Parameter.CancelButtonText</span>=<span class="string">&quot;@CloseText&quot;</span> <span class="attr">Parameter.DoneButtonAction</span>=<span class="string">&quot;ExecuteDone&quot;</span> <span class="attr">Parameter.DoneButtonText</span>=<span class="string">&quot;@SaveText&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Widget</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Prefab</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>首先和其他语言中的GUI相同，都是window-&gt;panel-&gt;widget结构。可以看ScrollablePanel下的children表示scrollablepanel容器有这些子结构，而&lt;&gt;中的是这个Scrollablepanel的性质。InnerPanel是内部的面板，VerticalScrollbar是滚动条。我们可以单独对滚动条的格式进行设置。</p><p>ScrollablePanel下有一个TiredPartyCategory，这是自己写的另外一个xml，里面是每一个标签页的具体结构。</p><p>DataSource指的是你加载的VM中的变量，我这里的AllInformation实际上是另外一个VM。然后在这个VM中又有许多变量，可以通过{变量名}的方式进行引用。</p><p>@SaveText在最下方，是最外层的VM（LoadMovie中作为参数）中的一个属性，想使用这些变量前面都要加上一个@</p><p>我们进场可以看到[DataSourceProperty]的Attribute。格式为</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DataSourceProperty</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> flag = <span class="keyword">value</span> != <span class="keyword">this</span>._name;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._name = <span class="keyword">value</span>;</span><br><span class="line">                    <span class="keyword">base</span>.OnPropertyChanged(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这些变量也是使用@变量名的方式进行使用的，它的区别是可以动态进行变更，每次数据改变时都会调用OnPropertyChanged来对数据进行刷新。注意这里指的变量名是OnPropertyChanged中的名字。</p><p>如果参数是MBBindingList&lt;…VM&gt;类型的，可以使用ListPanel,将所有条目都列举出来，格式为</p> <figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ListPanel</span> <span class="attr">DataSource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;Texts&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">WidthSizePolicy</span>=<span class="string">&quot;StretchToParent&quot;</span> <span class="attr">HeightSizePolicy</span>=<span class="string">&quot;CoverChildren&quot;</span></span></span></span><br><span class="line"><span class="xml">&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ItemTamplate</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Widget</span> <span class="attr">..</span> &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">        your information</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Widget</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ItemTamplate</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ListPanel</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h1><p>如果没有特殊说明可以直接在MB文件夹里搜索得到</p><ul><li>action_sets.xml: 里面有各种各样的动作，使用ActionIndexCache.Create(“name”)可以创建动作，使用agent.SetActionChannel可以设置动作。有死亡，坐，躺，蹲，站等一系列动作。注意有些动作如死亡是不能重新设置的，这时候只有使用agent.SetActionSet()对动作重置。</li><li>HotKeyCategory.xml: 这个在document/Documents/Mount and Blade II Bannerlord/Configs文件夹中。里面有一系列的热键，通过这些热键可以查找这些热键对应功能位置。</li><li>Prefabs: 里面有一系列的预制件（也就是已经做好了的物体，只需要调整位置放到地图中就好了），将预制件放到地图中的函数是<code>Mission.Current.CreateMissionObjectFromPrefab(environment_things[0], matrix_frame);</code>第一个参数是预制件的名字，第二个参数时摆放物体的位置及朝向。预制件的名字可以在各个Prefabs文件夹中的xml文件中找到（也可以在Sceneobj中的preferance.txt文件夹中找到该场景所使用的预制件名字）</li></ul><h1 id="harmony"><a class="markdownIt-Anchor" href="#harmony"></a> Harmony</h1><p><a href="https://harmony.pardeike.net/api/index.html">官方文档</a></p><p><a href="https://www.jianshu.com/p/7c46b6ace5f7">教程1</a></p><p><a href="https://www.bilibili.com/read/cv9104048/">教程2</a></p><p><strong>内部类</strong></p><p>如果想要修改内部类中的方法，首先要获得这个方法。例如：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">MethodInfo <span class="function"><span class="keyword">method</span> = <span class="title">typeof</span><span class="params">(MissionAgentSpawnLogic)</span>.<span class="title">Assembly</span>.</span></span><br><span class="line"><span class="function"><span class="title">GetType</span><span class="params">(&quot;TaleWorlds.MountAndBlade.MissionAgentSpawnLogic+MissionSide&quot;)</span>.</span></span><br><span class="line"><span class="function"><span class="title">GetMethod</span><span class="params">(&quot;SpawnTroops&quot;, BindingFlags.Instance | BindingFlags.<span class="keyword">Public</span>)</span>;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：内部类用<code>+</code>号链接，而不是<code>.</code></p><p>之后可以使用手动patch</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">MethodInfo prefix = typeof(spawn_logic_patch).</span><br><span class="line">GetMethod(<span class="string">&quot;Prefix&quot;</span>, BindingFlags.<span class="keyword">Static</span> | BindingFlags.<span class="keyword">Public</span>);</span><br><span class="line">harmony.Patch(method, <span class="keyword">new</span> HarmonyMethod(prefix), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>因为内部类类型不可访问，所以只能使用<code>Object __instance</code>表示这个实例，访问内部类中参数的方法是.</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Type t = typeof(MissionAgentSpawnLogic).Assembly.</span><br><span class="line"><span class="constructor">GetType(<span class="string">&quot;TaleWorlds.MountAndBlade.MissionAgentSpawnLogic+MissionSide&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">((IMissionTroopSupplier)AccessTools.<span class="constructor">Field(<span class="params">t</span>,<span class="string">&quot;_troopSupplier&quot;</span>)</span>.<span class="constructor">GetValue(<span class="params">__instance</span>)</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++函数指针备忘</title>
    <link href="http://xinhecuican.github.io/post/9954ba8e.html"/>
    <id>http://xinhecuican.github.io/post/9954ba8e.html</id>
    <published>2020-12-20T00:47:00.000Z</published>
    <updated>2020-12-20T08:07:28.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><p>返回值 (*指针名) (参数列表)</p><p>例：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> (*func)(<span class="built_in">int</span> a, <span class="built_in">int</span> b);</span><br><span class="line">    func = <span class="keyword">add</span>;</span><br><span class="line">    cout&lt;&lt; <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出： <span class="number">3</span></span><br><span class="line"></span><br><span class="line">这里将<span class="keyword">add</span>的函数首地址传给了这个函数指针，现在这个指针就指代这个函数，传入参数就可以使这个函数执行。</span><br></pre></td></tr></table></figure><blockquote><p>注意：int(*)(int a, int b)是一个函数指针类型，和int，double类似。而func相当与int a的a。</p></blockquote><p>根据上面这一条，我们可以用typedef测试一下</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">typedef <span class="built_in">int</span>(*<span class="function"><span class="keyword">Func</span>)<span class="params">(int a, int b)</span>;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">Func</span> <span class="title">fn</span> = <span class="title">add</span>;</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">可以运行</span><br></pre></td></tr></table></figure><p>我们也可以直接赋值并运行：<code>(void(*)(void))eip()</code>。这条语句前面是一个void(*)(void)的函数指针，它的值是eip.后面的括号表示运行它</p><h1 id="函数指针在类中的使用"><a class="markdownIt-Anchor" href="#函数指针在类中的使用"></a> 函数指针在类中的使用</h1><p>我们是不可以直接用函数指针指向类中的函数的，因为成员函数在创建时会隐式添加一个this参数。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(Adder::* Fm)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function">Adder <span class="title">adder</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">Fm f = &amp;Adder::Add;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (adder.*f)(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">这样可以运行</span><br><span class="line">它的签名实际上是<span class="keyword">int</span>(*)(Adder *<span class="keyword">const</span> <span class="keyword">this</span>, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br></pre></td></tr></table></figure><p>但是这样的话这个指针就只可以指向这一个类中的函数了，也就失去了函数指针的优势。</p><p>我们可以通过重载()运算符实现多个函数之间使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Adder(<span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiplier</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Multiplier(<span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b * c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">(T&amp; f, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r = f(a, b);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[]) &#123;</span><br><span class="line">    <span class="function">Adder <span class="title">adder</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    Do(adder, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//输出4</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Multiplier <span class="title">multiplier</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    Do(multiplier, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">//输出60</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="c++" scheme="http://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL语句速查</title>
    <link href="http://xinhecuican.github.io/post/d213fc7f.html"/>
    <id>http://xinhecuican.github.io/post/d213fc7f.html</id>
    <published>2020-12-18T08:02:00.000Z</published>
    <updated>2021-01-09T13:41:01.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础名词"><a class="markdownIt-Anchor" href="#基础名词"></a> 基础名词</h1><ul><li>数据库： 保存有组织数据的容器，一般是一个或一组文件</li><li>表： 表在数据库中，用来进行分类存储各式各样的信息。如果把数据库看为一个柜子，那么表就是一个个抽屉，里面装着一些文件。表在实际应用中可以是顾客清单，产品目录等。</li><li>列： 表是由列和行构成。例如一个城市信息表，它的列可以使地址，城市，州，邮政编码等等。</li><li>行： 行是表中的一个记录。例如一个学生信息表，一个行包含一个学生的名字、年龄、性别等信息。</li><li><span id="主键">主键</span>： 是一列，这一列可以唯一的标识每一个行。例如身份证号可以唯一的标识每一个人，而姓名不可以。因此身份证号可以作为主键。</li><li>外键： 将这个表中的某一列和另外一个表中的列关联起来。如果另一个表的对应列中不存在那个数据那么这个表中就无法插入这个数据。</li><li>注释： 有<code>--</code>、<code>#</code>、<code>/*...*/</code>三种，注意第一种后面要有一个空格</li></ul><h1 id="use和show"><a class="markdownIt-Anchor" href="#use和show"></a> USE和SHOW</h1><ul><li>USE 数据库名：<ul><li>使用某个数据库</li></ul></li><li>SHOW DATABASES：<ul><li>返回可用数据库的列表</li></ul></li><li>SHOW TABLES：<ul><li>展示数据库内列表的信息</li></ul></li><li>SHOW COLUMNS FROM 列表名：<ul><li>DESCRIBE 列表名作用与它相同</li><li>展示数据列（表头）的信息.下面是一个输出样例<img src="/images/MySQL%E8%AF%AD%E5%8F%A5%E9%80%9F%E6%9F%A51.PNG" alt="" /></li></ul></li><li>SHOW STATUS：<ul><li>用于显示服务器状态信息</li></ul></li><li>SHOW CREATE DATABASE和 SHOW CREATE TABLE<ul><li>分别用来显示创建特定数据库或表</li></ul></li><li>SHOW GRANTS：<ul><li>用来显示用户的安全权限</li></ul></li><li>SHOW ERRORS和SHOW WARNINGS：<ul><li>用来显示服务器错误或警告信息</li></ul></li></ul><h1 id="select"><a class="markdownIt-Anchor" href="#select"></a> SELECT</h1><ul><li>SELECT 列名 FROM 表名：<ul><li>展示某个表中某一列的详细信息</li><li>列名可以有多个，同时检索多个列</li><li>列名前可以添加表名，表名前可以添加数据库名进行限定。</li><li>列名可以用<code>*</code>代替来检索所有列</li><li>可以通过DISTINCT来排除相同的行（这时不能同时检索多个列）。例如<code>SELECT DISTINCT order_num FROM orderitems;</code></li></ul></li><li>LIMIT子句可用于限制结果行数。例如 SELECT prod_name FROM products LIMIT 5;限制为5行。LIMIT 5, 5;只显示从第五行开始的五行。<strong>注意</strong>：下标也是从0开始。</li></ul><h2 id="order-by子句排序"><a class="markdownIt-Anchor" href="#order-by子句排序"></a> ORDER BY子句（排序）</h2><ul><li>ORDER BY + 要排序的列;<ul><li>以升序进行排序。 例如<code>SELECT cust_address FROM customers ORDER BY cust_address;</code></li><li>要排序的列可以有多个，这时先对第一个列进行排序，然后对第二个列进行排序。</li><li>可以在后面加上 DESC表明是降序排序。例如<code>SELECT cust_address, cust_name FROM customers ORDER BY cust_address DESC, cust_name;</code></li></ul></li></ul><h2 id="where子句过滤数据"><a class="markdownIt-Anchor" href="#where子句过滤数据"></a> where子句（过滤数据）</h2><p>where子句挑选出满足限制条件的行。</p><p>例：<code>SELECT prod_name, prod_price FROM products WHERE prod_price=2.50;</code></p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>…</td></tr><tr><td>&gt;=</td><td>…</td></tr><tr><td>BETWEEN</td><td>在指定的两个值之间，还要加上AND，例如<code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 1 AND 2.5;</code></td></tr><tr><td>IS NULL</td><td>检测是否是空值,例如<code>SELECT cust_id FROM customers WHERE cust_email IS NULL</code></td></tr></tbody></table><p>进行比较的数据也可以是char型。例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name = <span class="string">&#x27;Fuses&#x27;</span>;</span><br><span class="line"></span><br><span class="line">输出: Fuses3.42</span><br></pre></td></tr></table></figure><p>MySQL默认是不区分大小写的，但是有的软件会帮助区分。</p><h3 id="组合操作符andor-in-not"><a class="markdownIt-Anchor" href="#组合操作符andor-in-not"></a> 组合操作符（AND,OR， IN， NOT）</h3><p><strong>AND</strong></p><p>两个条件同时发生才为真。和c语言的&amp;&amp;作用类似。</p><p>例如：<br /><code>SELECT vend_id, prod_price FROM products WHERE vend_id=1003 AND prod_price &lt; 10;</code></p><p><img src="/images/MySQL%E8%AF%AD%E5%8F%A5%E9%80%9F%E6%9F%A52.PNG" alt="" /></p><p><strong>OR</strong></p><p>和上面一个相似</p><p><strong>AND，OR组合</strong></p><p>AND和OR都可以有无数个，并且这两个还可以组合使用。</p><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="number">1002</span> <span class="keyword">OR</span> vend_id = <span class="number">1003</span> <span class="keyword">AND</span> prod_price &gt;= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Fuses 3.42</span><br><span class="line">Oil can 8.99</span><br><span class="line">Detonator 13.00</span><br><span class="line">Bird seed 10.00</span><br><span class="line">Safe  50.00</span><br><span class="line">TNT    10.00</span><br></pre></td></tr></table></figure><p>上面的输出竟然有两个是小于10的，这是由于优先级导致的</p><blockquote><p>AND的优先级比OR高，因此在写复杂表达式时最好用括号包围表达式</p></blockquote><p><strong>NOT</strong></p><p>NOT的作用就是否定它之后的条件。可以对IN， BETWEEN和EXISTS子句取反。</p><p>例如：<code>SELECT prod_name, prod_price FROM products WHERE vend_id NOT IN (1002, 1003);</code></p><p><strong>IN</strong>：</p><p>IN和BETWEEN类似，都是用来表示条件的范围，例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>);</span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">BETWEEN</span> <span class="number">1002</span> <span class="keyword">AND</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure><p>上面这两条语句的作用是相同的。</p><p>IN的优点如下：</p><ul><li>IN更方便、简洁；</li><li>IN比一般的OR执行更快；</li><li>IN中还可以包含其他SELECT语句。</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact <span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> orders</span><br><span class="line">                  <span class="keyword">FROM</span> orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                               <span class="keyword">FROM</span> orderitems</span><br><span class="line">                               <span class="keyword">WHERE</span> prod_id = <span class="string">&#x27;TNT2&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="select子句的顺序"><a class="markdownIt-Anchor" href="#select子句的顺序"></a> SELECT子句的顺序</h2><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>输出要返回的表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>在要从表中选择数据时使用</td></tr><tr><td>WHERE</td><td>过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组</td><td>否</td></tr><tr><td>HAVING</td><td>过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>排序</td><td>否</td></tr><tr><td>LIMIT</td><td>限制检索行数</td><td>否</td></tr></tbody></table><h2 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h2><ul><li>第一种就是上面所示用的IN中使用子查询</li><li>第二种是在SELECT后就使用</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_state,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(*)</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> orders.cust_id = customers.cust_id) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><h1 id="通配符与正则表达式"><a class="markdownIt-Anchor" href="#通配符与正则表达式"></a> 通配符与正则表达式</h1><blockquote><p>想要使用通配符，必须要使用<strong>LIKE</strong>操作符。LIKE后面加上搜索模式进行匹配。</p></blockquote><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配任意字符任意次数</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr></tbody></table><p>例如：<code>select cust_address FROM customers WHERE cust_address LIKE &quot;%Lane&quot;;</code></p><blockquote><p>使用正则表达式只需要将LIKE换成REGEXP即可。<a href="https://xinhecuican.github.io/post/26477.html">正则表达式语法可看这篇文章的正则表达式部分</a></p></blockquote><h1 id="拼接字段"><a class="markdownIt-Anchor" href="#拼接字段"></a> 拼接字段</h1><p>可以用Concat函数拼接不同的字段。例如：<code>Concat(vend_name, '(', vend_country, ')')</code>由四部分拼接而成。</p><p>有时候需要删除右侧多余的空格，可以使用<code>RTrim(str)</code>。如果想删除左侧空格或者两侧空格可以使用LTrim或Trim.</p><p>例：</p><p><code>SELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ') ') FROM vendors ORDER BY vend_name;</code></p><p>结果输出： ACME (USA)</p><p>可以使用<strong>AS</strong>关键字为拼接后的字段赋予别名。</p><p>例：<code>SELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ') ') AS vend_title FROM vendors ORDER BY vend_name;</code></p><p>输出</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vend_title</span></span><br><span class="line"><span class="selector-tag">ACME</span> (USA) </span><br><span class="line"><span class="selector-tag">Anvils</span> <span class="selector-tag">R</span> <span class="selector-tag">Us</span> (USA) </span><br><span class="line"><span class="selector-tag">Furball</span> <span class="selector-tag">Inc</span>. (USA) </span><br><span class="line"><span class="selector-tag">Jet</span> <span class="selector-tag">Set</span> (England) </span><br><span class="line"><span class="selector-tag">Jouets</span> <span class="selector-tag">Et</span> <span class="selector-tag">Ours</span> (France) </span><br><span class="line"><span class="selector-tag">LT</span> <span class="selector-tag">Supplies</span> (USA) </span><br></pre></td></tr></table></figure><p>除了让Concat结果赋予名字外，还可以对算术计算结果赋予名字。算术计算支持加减乘除。</p><p>例如：<code>quantity * item_price AS expanded_price</code></p><h1 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h1><h2 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h2><ul><li>boolean</li><li>TINYINT： 一字节整数</li><li>smallint： 2字节</li><li>int：</li><li>bigint： 8字节</li><li>float： 4字节</li><li>double</li><li><span id="decimal">decimal(a, b)</span>: a表示小数点左边位数，最大为38.b是小数点右边允许位数，范围在0到a之间。</li></ul><h2 id="文本处理函数"><a class="markdownIt-Anchor" href="#文本处理函数"></a> 文本处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Left(str, len)</td><td>返回串左边的字符</td></tr><tr><td>Length(str)</td><td>返回串的长度</td></tr><tr><td>Locate(substr, str, begin_len)</td><td>找出一个串的子串</td></tr><tr><td>Lower(str)</td><td>将串变成小写</td></tr><tr><td>LTrim(str)</td><td>去掉左边的空格</td></tr><tr><td>Right(str, len)</td><td>返回串右边的字符</td></tr><tr><td>RTrim(str)</td><td>去掉串右边的空格</td></tr><tr><td>Soundex(str)</td><td>返回串的SOUNDEX值</td></tr><tr><td>SubString(str, pos, len)</td><td>返回子串的字符</td></tr><tr><td>Upper(str)</td><td>将串变成大写</td></tr></tbody></table><p>其中SOUNDEX是一个将字符串转化成按照语音表示的数字的算法。</p><p>例如：Y.lee和Y.lie虽然拼写不同但是读起来相同，这样他们的Soundex是相同的。</p><h2 id="日期和时间处理函数"><a class="markdownIt-Anchor" href="#日期和时间处理函数"></a> 日期和时间处理函数</h2><p>日期的格式是yyyy-mm-dd。例如2005-11-9.并且最好使用四位数的年份。</p><p>时间的格式是 hh:mm:ss</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AddDate(date, INTERVAL sum unit)</td><td>增加一个日期</td></tr><tr><td>AddTime()</td><td>增加一个时间</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>CurTime()</td><td>返回当前时间</td></tr><tr><td>Date(expr)</td><td>返回日期的日期部分</td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>更复杂的日期增加</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间</td></tr><tr><td>Day()</td><td>返回一个日期中的天数部分</td></tr><tr><td>DayOfWeek()</td><td>返回星期几</td></tr><tr><td>Hour()</td><td>返回时间的小时部分</td></tr><tr><td>Minute()</td><td>返回分钟</td></tr><tr><td>Month()</td><td>…</td></tr><tr><td>Now()</td><td>返回当前的日期和时间</td></tr><tr><td>Second()</td><td>…</td></tr><tr><td>Time</td><td>返回一个日期和时间的时间部分</td></tr><tr><td>Year()</td><td>…</td></tr></tbody></table><p>例如 ：<code>SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);</code></p><p>INTERVAL是经过的意思，也就是过31天。后面也可以加MONTH，YEAR，HOUR等。</p><p>expr就是标准的日期时间或只有日期。要注意日期都是字符串，都要加引号。</p><h2 id="数值处理函数"><a class="markdownIt-Anchor" href="#数值处理函数"></a> 数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Abs()</td><td>返回一个数的绝对值</td></tr><tr><td>Cos()</td><td>…</td></tr><tr><td>Exp()</td><td>返回一个数的指数</td></tr><tr><td>Mod()</td><td>返回一个数的余数，相当于 %</td></tr><tr><td>Pi()</td><td>返回圆周率</td></tr><tr><td>Rand()</td><td>返回随机数</td></tr><tr><td>Sin()</td><td>…</td></tr><tr><td>Sqrt()</td><td>返回平方根</td></tr><tr><td>Tan()</td><td>返回一个数的正切值</td></tr></tbody></table><h2 id="汇总数据函数"><a class="markdownIt-Anchor" href="#汇总数据函数"></a> 汇总数据函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG(column)</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数, COUNT(*)返回行数，无论是否有NULL行。而COUNT(column)忽略NULL行</td></tr><tr><td>MAX(column)</td><td>返回某列的最大值,如果是文本列，那么会返回最后一行</td></tr><tr><td>MIN()</td><td>…</td></tr><tr><td>SUM()</td><td>返回某列的和</td></tr></tbody></table><p><strong>AVG()</strong></p><p>例：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">as</span> avg_price <span class="keyword">FROM</span> products;</span><br><span class="line">输出：</span><br><span class="line">avg_price</span><br><span class="line">16.133571</span><br></pre></td></tr></table></figure><p>AVG()函数的参数只能是一行，不能是多行，也就是说如果想要分别求多行的平均值，就要用多个AVG</p><blockquote><p>可以使用DISTINCT排除相同数据，如AVG(DISTINCT prod_price)</p></blockquote><h2 id="分组数据"><a class="markdownIt-Anchor" href="#分组数据"></a> 分组数据</h2><p>GROUP BY子句可用于分组。</p><p>例如： <code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id</code></p><ul><li>GROUP BY子句可以包含任意数目的列。但是指定了多个列，那么这些列同时进行计算，也就是说只有这几个列都匹配才可以算成一组。</li><li>如果列中有NULL，那么NULL会单独分成一组。</li><li>ORDER BY要卸载GROUP BY的后面</li></ul><h3 id="过滤分组"><a class="markdownIt-Anchor" href="#过滤分组"></a> 过滤分组</h3><p>过滤分组也就是挑选需要的组。关键字是<strong>HAVING</strong>。它的作用和WHERE相同，它后面接的语法也相同。</p><p>例如：<code>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id HAVING COUNT(*) &gt;= 2;</code></p><h1 id="联结"><a class="markdownIt-Anchor" href="#联结"></a> 联结</h1><p>它是一种特殊的语法，可以联结多个表返回同一个输出。</p><p>例如供应商表中存在一个唯一的供应商id，而产品表中只会存放这唯一的ID（为了节省空间），那么如果想找供应商供应那些商品首先需要从产品表中找到ID再在供应商表中找到名字。</p><p>使用联结就可以一次性输出供应商名字和产品信息。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors, products</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br></pre></td></tr></table></figure><p>上面这个式子的关键在于WHERE子句。通过筛选两个表中相同的vend_id来输出。</p><p>如果不进行限定的话将会对每一个供应商名字输出所有产品信息。</p><h2 id="内部联结inner-join"><a class="markdownIt-Anchor" href="#内部联结inner-join"></a> 内部联结（INNER JOIN）</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id = products.vend_id;</span><br></pre></td></tr></table></figure><p>这条语句作用和上面相同，并且INNER可以算作FROM的组成部分，使用这种语法时，后面限定条件使用ON而不是WHERE（但实际作用相同）。</p><h2 id="自联结"><a class="markdownIt-Anchor" href="#自联结"></a> 自联结</h2><p>例如某见物品（ID=DTNTR）有问题，因此想知道生产该物品的供应商生产的其他物品是否有问题。这个查询首先要找到生产ID是DTNTR的物品的供应商，然后找到这个供应商生产的其他物品。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = (<span class="keyword">SELECT</span> vend_id</span><br><span class="line">                 <span class="keyword">FROM</span> products</span><br><span class="line">                 <span class="keyword">WHERE</span> prod_id = <span class="string">&quot;DTNTR&quot;</span>);</span><br><span class="line">                 </span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products, vendors</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</span><br><span class="line">  <span class="keyword">AND</span> products.prod_id = <span class="string">&#x27;DTNTR&#x27;</span>;</span><br></pre></td></tr></table></figure><p>自联结使用子查询代替联结。这样可以避免列名重复而导致的一些问题，但是有时候处理联结比处理查询快很多，所以要综合比较。</p><h2 id="自然联结"><a class="markdownIt-Anchor" href="#自然联结"></a> 自然联结</h2><p>标准的联结会返回所有数据，甚至完全相同的列会多次出现。而自然联结就是为了避免多次出现。自然联结通过对表使用通配符（*），对其他所有表使用明确的子集来完成。</p><p>例如：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">SELECT c.*, o.<span class="keyword">order_num, </span>o.<span class="keyword">order_date,</span></span><br><span class="line"><span class="keyword"> </span>      oi.prod_id, oi.quantity, oi.item_price</span><br><span class="line">FROM customers AS c, <span class="keyword">orders </span>AS o, <span class="keyword">orderitems </span>AS oi</span><br><span class="line">WHERE c.cust_id = o.cust_id</span><br><span class="line">  <span class="keyword">AND </span>oi.<span class="keyword">order_num </span>= o.<span class="keyword">order_num</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">AND </span>prod_id = <span class="string">&#x27;FB&#x27;</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>在这个例子中，通配符只对第一个表使用，其他列都明确给出。</p><h2 id="外部联结"><a class="markdownIt-Anchor" href="#外部联结"></a> 外部联结</h2><p>外部联结指的是即使相关表没有关联行也进行输出。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span>  customers.cust_id = orders.cust_id</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">cust_id order_num</span><br><span class="line"><span class="number">10001</span><span class="number">20005</span></span><br><span class="line"><span class="number">10001</span><span class="number">20009</span></span><br><span class="line"><span class="number">10002</span><span class="literal">null</span></span><br><span class="line"><span class="number">10003</span><span class="number">20006</span></span><br><span class="line"><span class="number">10004</span><span class="number">20007</span></span><br><span class="line"><span class="number">10005</span><span class="number">20008</span></span><br></pre></td></tr></table></figure><p>上面的orders表中没有10002，但是输出却包含了10002.它是以左边的customer为基准的，在右边的表中寻找是否与左边的表有关联，有关联输出对应值，没有关联输出null。</p><p>如果是RIGHT OUTER JOIN，则不会输出10002.</p><h1 id="组合查询union"><a class="markdownIt-Anchor" href="#组合查询union"></a> 组合查询（UNION）</h1><p>UNION是将几个SELECT的输出结合到一起。</p><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">等同于：</span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_pric</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_pric &lt;= <span class="number">5</span> <span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p>这个例子中似乎直接用OR更为方便。但是如果在复杂的表达式或者查询两个表的时候可能会更加清楚</p><p>注意：</p><ul><li>每两个SELECT之间都要有UNION</li><li>每个SELECT查询的内容必须相同</li><li>UNION查询会自动去除重复的行。如果使用<strong>UNION ALL</strong>的话就可以不去除重复的行。</li><li>排序（ORDER BY）必须要在最后一个SELECT语句之后</li></ul><h1 id="数据修改"><a class="markdownIt-Anchor" href="#数据修改"></a> 数据修改</h1><h2 id="插入insert"><a class="markdownIt-Anchor" href="#插入insert"></a> 插入（INSERT）</h2><p>数据插入的关键字是<strong>INSERT</strong>。它可以插入完整的行，也可以插入行的一部分，还可以插入查询结果。</p><p>例:</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span>&#123;<span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">&#x27;Pep E. LaPew&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;100 Main Street&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Los Angeles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;90046&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>它通过<strong>VALUES</strong>给出插入一行的信息。另外可以指定插入列是操作更为安全</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_name,</span><br><span class="line"><span class="built_in">    cust_address,</span></span><br><span class="line"><span class="built_in">    cust_city,</span></span><br><span class="line"><span class="built_in">    cust_state,</span></span><br><span class="line"><span class="built_in">    cust_zip,</span></span><br><span class="line"><span class="built_in">    cust_country,</span></span><br><span class="line"><span class="built_in">    cust_contract,</span></span><br><span class="line">    cust_email)</span><br><span class="line">VALUES(&#x27;Pep E. LaPew&#x27;,</span><br><span class="line">    &#x27;<span class="number">100</span> Main Street&#x27;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这种方式更为清楚，但是也更加麻烦。但是这样可以更改插入信息的顺序。</p><p><strong>插入多行</strong></p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name,</span><br><span class="line">    cust_address,</span><br><span class="line">    cust_city,</span><br><span class="line">    cust_state,</span><br><span class="line">    cust_zip,</span><br><span class="line">    cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">    <span class="string">&#x27;Pep E. LaPew&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;100 Main Street&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Los Angeles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;90046&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USA&#x27;</span>),</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&#x27;M. Martian&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;42 Galaxy Way&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;11213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>插入检索出来的数据</strong></p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_id,</span><br><span class="line"><span class="built_in">    cust_contact,</span></span><br><span class="line"><span class="built_in">    cust_email,</span></span><br><span class="line"><span class="built_in">    cust_name,</span></span><br><span class="line"><span class="built_in">    cust_address,</span></span><br><span class="line"><span class="built_in">    cust_city,</span></span><br><span class="line"><span class="built_in">    cust_state,</span></span><br><span class="line"><span class="built_in">    cust_zip,</span></span><br><span class="line">    cust_country)</span><br><span class="line">SELECT cust_id,</span><br><span class="line">    ...</span><br><span class="line">FROM custnew<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>只需要使用select而不需要再放入VALUES中了。</p><h2 id="更新和删除"><a class="markdownIt-Anchor" href="#更新和删除"></a> 更新和删除</h2><p>更新数据关键字是<strong>UPDATE</strong>。</p><p>例如：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="comment">=</span> <span class="comment">&#x27;elmer@udd.com&#x27;</span></span><br><span class="line">WHERE <span class="comment">cust_id = 10005</span>;</span><br></pre></td></tr></table></figure><p>UPDATE后接要更新的表。SET接更新的列。WHERE用来限制要更新那些行，如果没有WHERE，那么会更新所有行。</p><p>SET后面可以使用子查询来更新列数据</p><p>如果想删除某个列的某些值，可以把它设成NULL。例如</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_email = <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p>删除数据使用<strong>DELETE</strong></p><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10006</span>;</span><br></pre></td></tr></table></figure><p>这是删除一行的方法。</p><h1 id="创建和使用表"><a class="markdownIt-Anchor" href="#创建和使用表"></a> 创建和使用表</h1><h2 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h2><p>使用<strong>CREATE TABLE</strong>创建表。创建表至少需要给出表的名字和列名及列的类型等信息。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers</span><br><span class="line">(</span><br><span class="line">    cust_id    <span class="built_in">int</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    cust_name  <span class="built_in">char</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (cust_id)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p>表的<a href="#%E4%B8%BB%E9%94%AE">主键</a>可以在创建表时定义，使用PRIMARY KEY关键字。</p><ul><li>NOT NULL： NOT NULL表示插入或更新行时，这一列必须有值。</li><li>AUTO_INCREMENT: 每插入一行这个列的值加1.每个表只能允许有一个AUTO_INCREMENT的列，而且必须让他被索引。</li><li>DEFAULT： 默认填充的值。</li><li>引擎：引擎是具体处理语句的函数。不同表之间引擎类型可以混用，但是外键不能跨引擎。<ul><li>InnoDB： 它不支持全文搜索， 但支持事务处理</li><li>MEMORY： 数据储存在内存中，速度比较快，适合临时表</li><li>MyISAM： 支持全文搜索，不支持事物处理。</li></ul></li></ul><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h2><p>使用<strong>ALTER TABLE</strong>更新表。</p><ul><li>ADD： 添加一列</li><li>DROP COLUMN： 删除一列</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure><p>它还可以用来定义外键</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (order_num)</span><br><span class="line"><span class="keyword">REFERENCES</span> orders (order_num);</span><br></pre></td></tr></table></figure><p>其中fk_orderitems_orders是外键约束的名字， 前面一个order_num是在orderitems中的名字。</p><p>删除表使用<strong>DROP TABLE</strong>. 例如<code>DROP TABLE customers;</code></p><p>重命名表使用<strong>RENAME TABLE</strong>。例如<code>RENAME TABLE customer2 TO customer</code></p><h1 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h1><p>视图是一个虚拟的表，视图可以选择各个表的一部分整合成一个表，这样就方便我们查询。视图本身并没有数据，它只是记录了一些表的信息。</p><p>视图的限制：</p><ul><li>视图表和真实表一样需要我们创建并且需要唯一命名</li><li>视图不能索引，也不能有关联的触发器或默认值</li><li>视图可以和表一起使用，也就是说可以写一条联结表和视图的SELECT</li><li>ORDER BY可以用于视图中</li></ul><h2 id="视图使用"><a class="markdownIt-Anchor" href="#视图使用"></a> 视图使用</h2><ul><li>CREATE VIEW： 创建视图</li><li>SHOW CREATE VIEW viewname： 查看创建的视图</li><li>DROP VIEW; 删除视图</li><li>更新视图时可以先DROP再CREATE.</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productcustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span>  customers.cust_id = orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num = orders.order_num;</span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> productcustomers;</span><br></pre></td></tr></table></figure><p>这是将一个复杂的联结变成一个视图，之后需要这个联结就可以直接使用这个视图。</p><h2 id="视图更新"><a class="markdownIt-Anchor" href="#视图更新"></a> 视图更新</h2><p>有的视图是可以更新的（可以使用INSERT， UPDATE和DELETE）。更新视图实际上是对基表更新（因为视图本身并没有存储数据）。但是有的操作产生的视图时不允许更新的。</p><p>不允许更新的操作</p><ul><li>分组</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数（如MIN(), COUNT()等）</li><li>DISTINCT</li><li>导出（计算）列</li></ul><h1 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h1><p>存储过程就是为以后使用而保存的一条或多条语句的集合（也就是函数或批处理文件）</p><h2 id="创建-使用-删除"><a class="markdownIt-Anchor" href="#创建-使用-删除"></a> 创建、使用、删除</h2><p><strong>创建</strong></p><p>例：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">productpricing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">SELECT</span> <span class="title">Avg</span><span class="params">(prod_price)</span> <span class="title">AS</span> <span class="title">priceaverage</span></span></span><br><span class="line"><span class="function">    <span class="title">FROM</span> <span class="title">products</span>;</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>使用CREATE PROCEDURE进行存储过程的定义，用BEGIN和END限定存储过程的范围。</p><p>带有参数的存储过程</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing(</span><br><span class="line">    <span class="keyword">OUT</span> p1 <span class="built_in">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> ph <span class="built_in">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> pa <span class="built_in">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">Min</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> p1</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">Max</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> ph</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">Avg</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> pa</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><ul><li>OUT代表这个参数是作为输出数据使用（返回值）</li><li>IN代表作为输入数据使用</li><li>INOUT代表既作为输入又作为输出。</li><li>INTO： 将这个值放入输出数据</li></ul><p><strong>使用</strong></p><p>例如：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">CALL</span> <span class="selector-tag">productpricing</span>(<span class="variable">@pricelow</span>, <span class="variable">@pricehigh</span>, <span class="variable">@priceaverage</span>);</span><br><span class="line"><span class="selector-tag">SELECT</span> @<span class="selector-tag">priceaverage</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL变量都必须要以@开始，但是如果是输入数据或输入输出不需要@</p></blockquote><p><strong>删除</strong></p><p>DROP PROCEDURE productpricing;</p><blockquote><p>只有这个过程存在时才可以删除，如果不存在会报错。因此可以使用DROP PROCEDURE IF EXISTS来提前检查</p></blockquote><h2 id="局部变量和类型限制"><a class="markdownIt-Anchor" href="#局部变量和类型限制"></a> 局部变量和类型限制</h2><p>例：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">ordertotal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">IN</span> onumber INT,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">IN</span> taxable BOOLEAN,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">OUT</span> ototal DECIMAL(8, 2)</span></span></span><br><span class="line"><span class="function">) <span class="title">COMMENT</span> &#x27;<span class="title">Obtain</span> <span class="title">order</span> <span class="title">total</span>, <span class="title">optionally</span> <span class="title">adding</span> <span class="title">tax</span>`</span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">DECLARE</span> <span class="title">total</span> <span class="title">DECIMAL</span><span class="params">(8, 2)</span>;</span></span><br><span class="line">    DECLARE taxrate INT <span class="keyword">DEFAULT</span> <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> Sum(item_price * quantity)</span><br><span class="line">    <span class="keyword">FROM</span> orderitems</span><br><span class="line">    <span class="keyword">WHERE</span> order_num = onumber</span><br><span class="line">    <span class="keyword">INTO</span> total;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">IF</span> taxable <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SELECT</span> total+(total/<span class="number">100</span>*taxrate) <span class="keyword">INTO</span> total;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> total <span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>首先参数可以限定类型, <a href="#decimal">DECIMAL</a>是限定范围的浮点型。</p><ul><li>DECLARE定义局部变量。</li><li>IF由于检测条件是否为真</li><li>COMMENT： 它不是必须的，使用后会在SHOW PROCEDURE STATUS中显示</li><li><code>SHOW CREATE PROCEDURE ordertotal;</code>可以用来输出存储过程的一些信息，例如何时创建，谁创建等信息。</li></ul><h1 id="游标"><a class="markdownIt-Anchor" href="#游标"></a> 游标</h1><p>游标相当于一个指针，可以根据需要上下移动查找数据</p><p><strong>创建游标</strong></p><p>使用<strong>DECLARE …CURSOR</strong> 创建。例如：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">processorders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">DECLARE</span> <span class="title">ordernumbers</span> <span class="title">CURSOR</span></span></span><br><span class="line"><span class="function">    <span class="title">FOR</span></span></span><br><span class="line"><span class="function">    <span class="title">SELECT</span> <span class="title">order_num</span> <span class="title">FROM</span> <span class="title">orders</span>;</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><ul><li>OPEN + name: 打开游标</li><li>CLOSE + name： 关闭游标</li></ul><h2 id="使用游标"><a class="markdownIt-Anchor" href="#使用游标"></a> 使用游标</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> done <span class="built_in">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> o <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">OPEN ordernumbers;</span><br><span class="line">REPEAT</span><br><span class="line">    FETCH ordernumbers INTO o;</span><br><span class="line"></span><br><span class="line">UNTIL done <span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br><span class="line"></span><br><span class="line">CLOSE ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>FETCH INTO 是将数据放入局部变量中，其中REPEAT和UNTIL相当于do_while循环。而<code>DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;</code>用于设置终止条件，指出当<code>SQLSTATE '02000'</code>出现时，SET done=1.</p><h1 id="触发器"><a class="markdownIt-Anchor" href="#触发器"></a> 触发器</h1><p>触发器相当于一些编程语言中的event。当某些事件到来时触发这个函数。</p><p>例如： 当增加一个顾客到表中时，检查州的缩写是否为大写。</p><h2 id="建立-删除"><a class="markdownIt-Anchor" href="#建立-删除"></a> 建立、删除</h2><p>创建触发器时，要给出四个信息。</p><ul><li>触发器名</li><li>触发器关联的表</li><li>触发器响应的活动（DELETE、INSERT或UPDATE）</li><li>触发器何时执行（处理前或处理后）</li></ul><p>例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这条语句的含义是对插入成功后的每一行（FOR EACH ROW）都输出一条Product added信息。</p><blockquote><p>只有表支持触发器，视图不支持</p></blockquote><p>如果BEFORE触发器失败，MySQL将不执行之后的操作。如果是语句本身失败，MySQL将不进行AFTER触发器。</p><p><strong>删除触发器</strong></p><p><code>DROP TRIGGER new products</code></p><p>触发器不能更新和覆盖，为了修改一个触发器，必须先删除它</p><h2 id="使用触发器"><a class="markdownIt-Anchor" href="#使用触发器"></a> 使用触发器</h2><h3 id="insert触发器"><a class="markdownIt-Anchor" href="#insert触发器"></a> INSERT触发器</h3><ul><li>在INSERT触发器代码内，可以引用一个名叫NEW的虚拟表，访问被插入的行（新加入的值）</li><li>BEFORE INSERT触发器中，NEW的值可以被更新</li><li>对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0，在INSERT执行之后包含新生成的自动值</li></ul><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newordre <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> <span class="built_in">NEW</span>.order_num;</span><br></pre></td></tr></table></figure><p>这条语句作用是输出插入的值中order_num信息。</p><h3 id="delete触发器"><a class="markdownIt-Anchor" href="#delete触发器"></a> DELETE触发器</h3><p>DELETE中，与之对应存在一个OLD的旧表，存放刚刚被删除的行。<strong>OLD中的值是只读的</strong>，不能更新。</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> deleteorder <span class="keyword">BEFORE</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> archive_orders(order_num, order_date, cust_id)</span><br><span class="line">    <span class="keyword">VALUES</span>(<span class="built_in">OLD</span>.order_num, <span class="built_in">OLD</span>.order_date, <span class="built_in">OLD</span>.cust_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>注意这里可以使用BEGIN和END来表示运行多行语句。作用是将删除的信息插入到一个新的表中。</p><h3 id="update触发器"><a class="markdownIt-Anchor" href="#update触发器"></a> UPDATE触发器</h3><p>UPDATE有OLD表和NEW表，OLD表用于存放更新之前的信息，NEW表用于存放更新的值。<strong>在 BEFORE中，NEW表也可能被更新</strong>。</p><h1 id="事务处理"><a class="markdownIt-Anchor" href="#事务处理"></a> 事务处理</h1><p>事物处理可以用来管理必须成批执行的操作（类似于线程或进程的屏障）。利用事务处理，要么都做，要么都不做，如果发生错误，则会进行回退。</p><p>例如想要在数据库中添加一个人的信息，如果添加过程中突然发生了某些故障导致接下来的步骤无法进行，那么就需要先前已经改变的数据进行恢复了。</p><ul><li>事务： 一组SQL语句</li><li>回退： 撤销这些SQL语句</li><li>提交： 将未存储的结果写入数据库表</li><li>保留点： 事务处理设置的临时占位符，可以对它进行回退操作。</li></ul><p><strong>START TRANSACTION</strong>用来标识事务处理的开始。</p><h2 id="使用rollback"><a class="markdownIt-Anchor" href="#使用rollback"></a> 使用ROLLBACK</h2><p>ROLLBACK进行回退操作。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ordertotals;</span><br></pre></td></tr></table></figure><p>这些语句首先删除了ordertotals中的内容，然后使用ROLLBACK进行回退，最后一个SELECT会看到这个表中还是有内容的。</p><blockquote><p>INSERT、UPDATE、DELETE可以回退，SELECT、CREATE、DROP不能回退。</p></blockquote><h2 id="commit"><a class="markdownIt-Anchor" href="#commit"></a> COMMIT</h2><p>普通的SQL语句都是直接对数据库表进行读写的，但是在事件处理中提交并不会自动进行，只有使用了COMMIT语句才会进行提交。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>这两条删除语句只有同时成立时才会被提交，如果第二条失败则不会提交。</p><blockquote><p>在使用COMMIT或ROLLBACK后事务会自动关闭。</p></blockquote><p>如果平常想不自动提交的话，可以使用<code>SET autocommit = 0;</code></p><h2 id="保留点"><a class="markdownIt-Anchor" href="#保留点"></a> 保留点</h2><ul><li>设置保留点： SAVEPOINT delete1;</li><li>使用保留点： ROLLBACK TO delete1;</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;基础名词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="MySQL" scheme="http://xinhecuican.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>算法设计与分析代码</title>
    <link href="http://xinhecuican.github.io/post/fb98053e.html"/>
    <id>http://xinhecuican.github.io/post/fb98053e.html</id>
    <published>2020-12-14T12:11:00.000Z</published>
    <updated>2021-01-10T12:32:57.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="子集和数问题"><a class="markdownIt-Anchor" href="#子集和数问题"></a> 子集和数问题</h1><p>由于本实验是为了验证数据集影响，因此没有采用一次增加两个的限界函数。此代码左支限界是 w+wi&gt; target,右支限界是w+rest&gt;=target. 并且由于实验网站要求在没有正确解的情况下输出近似解，因此每次触底或者左支终止之后还进行了记录。最后因为进行了排序，而数据集给出的答案中并没有进行排序，因此使用了一个结构体对开始的位置进行记录。</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;fstream&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;vector&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;string&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;windows<span class="number">.</span>h&gt;</span><br><span class="line">#define N <span class="number">6</span></span><br><span class="line">#define MAX_ANS <span class="number">1000</span></span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span>;</span><br><span class="line">    <span class="built_in">int</span> loc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> time=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">nearest</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="keyword">use</span>[MAX_ANS][N+<span class="number">1</span>];</span><br><span class="line">void quick(vector&lt;node&gt;&amp; a, <span class="built_in">int</span> l, <span class="built_in">int</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> i=l, j=r, key=a[l]<span class="number">.</span><span class="built_in">sum</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; a[j]<span class="number">.</span><span class="built_in">sum</span>&gt;=key)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; a[i]<span class="number">.</span><span class="built_in">sum</span>&lt;=key)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(a[i], a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[i], a[l]);</span><br><span class="line">        quick(a, l, i-<span class="number">1</span>);</span><br><span class="line">        quick(a, i+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> solve(vector&lt;node&gt; a, <span class="built_in">int</span> <span class="keyword">target</span>, <span class="built_in">int</span> now, <span class="built_in">int</span> <span class="built_in">sum</span>, <span class="built_in">int</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(now&lt;<span class="number">0</span> || now&gt;N-<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">use</span>[ans][now] == <span class="number">2</span>) //这个节点还没有被访问过</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> temp_sum = <span class="built_in">sum</span>+a[now]<span class="number">.</span><span class="built_in">sum</span>;</span><br><span class="line">        <span class="keyword">if</span>(now == N-<span class="number">1</span>) //触底</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp_sum == <span class="keyword">target</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">use</span>[ans][now] = <span class="number">1</span>;</span><br><span class="line">                for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">use</span>[ans+<span class="number">1</span>][i] = <span class="keyword">use</span>[ans][i];</span><br><span class="line">                &#125;</span><br><span class="line">                ans++;</span><br><span class="line">                time++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp_sum &lt; <span class="keyword">target</span> &amp;&amp; (<span class="built_in">nearest</span> &gt; temp_sum || <span class="built_in">nearest</span> == <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">nearest</span> = temp_sum;</span><br><span class="line">                <span class="keyword">use</span>[ans][now] = <span class="number">1</span>;</span><br><span class="line">                for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">use</span>[MAX_ANS-<span class="number">1</span>][i] = <span class="keyword">use</span>[ans][i];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>//直接转向右支触底</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">nearest</span> &gt; <span class="built_in">sum</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">use</span>[ans][now] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">nearest</span> = <span class="built_in">sum</span>;</span><br><span class="line">                    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">use</span>[MAX_ANS-<span class="number">1</span>][i] = <span class="keyword">use</span>[ans][i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now-<span class="number">1</span>, <span class="built_in">sum</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //没触底的正常处理流程</span><br><span class="line">        <span class="keyword">if</span>(temp_sum == <span class="keyword">target</span>) //等于就记录(time++)并且跳过这个节点</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">1</span>;</span><br><span class="line">            for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">use</span>[ans+<span class="number">1</span>][i] = <span class="keyword">use</span>[ans][i];</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">            time++;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now, <span class="built_in">sum</span>+a[now]<span class="number">.</span><span class="built_in">sum</span>, r-a[now]<span class="number">.</span><span class="built_in">sum</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp_sum &lt; <span class="keyword">target</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now+<span class="number">1</span>, <span class="built_in">sum</span>+a[now]<span class="number">.</span><span class="built_in">sum</span>, r-a[now]<span class="number">.</span><span class="built_in">sum</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(now &lt; <span class="built_in">nearest</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">nearest</span> = now;</span><br><span class="line">                for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">use</span>[MAX_ANS-<span class="number">1</span>][i] = <span class="keyword">use</span>[ans][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now-<span class="number">1</span>, <span class="built_in">sum</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>//回溯</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">use</span>[ans][now] == <span class="number">1</span> &amp;&amp; r+now&gt;<span class="built_in">nearest</span>) //该节点已经访问左支</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now+<span class="number">1</span>, <span class="built_in">sum</span>-a[now]<span class="number">.</span><span class="built_in">sum</span>, r+a[now]<span class="number">.</span><span class="built_in">sum</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[ans][now] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> solve(a, <span class="keyword">target</span>, now-<span class="number">1</span>, <span class="built_in">sum</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    fstream input_stream;</span><br><span class="line">    input_stream<span class="number">.</span>open(<span class="string">&quot;p08_w.txt&quot;</span>, ios::<span class="keyword">in</span>);</span><br><span class="line">    fstream target_stream;</span><br><span class="line">    target_stream<span class="number">.</span>open(<span class="string">&quot;p08_c.txt&quot;</span>, ios::<span class="keyword">in</span>);</span><br><span class="line">    fstream ans_stream;</span><br><span class="line">    ans_stream<span class="number">.</span>open(<span class="string">&quot;p02_s.txt&quot;</span>, ios::<span class="keyword">in</span>);</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">target</span> ;</span><br><span class="line">    vector&lt;node&gt; <span class="built_in">sum</span>;</span><br><span class="line">    vector&lt;string&gt; std_ans;</span><br><span class="line">    node temp_flag;</span><br><span class="line">    string temp_string;</span><br><span class="line">    <span class="built_in">int</span> temp_loc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="comment">!input_stream.eof())</span></span><br><span class="line">    &#123;</span><br><span class="line">        input_stream&gt;&gt;temp_flag<span class="number">.</span><span class="built_in">sum</span>;</span><br><span class="line">        temp_flag<span class="number">.</span>loc = temp_loc++;</span><br><span class="line">        <span class="built_in">sum</span><span class="number">.</span>push_back(temp_flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="comment">!target_stream.eof())</span></span><br><span class="line">    &#123;</span><br><span class="line">        target_stream&gt;&gt;<span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="comment">!ans_stream.eof())</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans_stream&gt;&gt;temp_string;</span><br><span class="line">        std_ans<span class="number">.</span>push_back(temp_string);</span><br><span class="line">    &#125;</span><br><span class="line">    input_stream<span class="number">.</span>close();</span><br><span class="line">    target_stream<span class="number">.</span>close();</span><br><span class="line">    ans_stream<span class="number">.</span>close();</span><br><span class="line"></span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;MAX_ANS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(<span class="built_in">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">use</span>[i][k] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> len = <span class="built_in">sum</span><span class="number">.</span><span class="built_in">size</span>();</span><br><span class="line">    quick(<span class="built_in">sum</span>, <span class="number">0</span>, len-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">all</span> = <span class="number">0</span>;</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">all</span>+=<span class="built_in">sum</span>[i]<span class="number">.</span><span class="built_in">sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">    solve(<span class="built_in">sum</span>, <span class="keyword">target</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">all</span>);</span><br><span class="line">    QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">    <span class="keyword">double</span> duration_time = (<span class="keyword">double</span>)(end_time<span class="number">.</span>QuadPart-start_time<span class="number">.</span>QuadPart) / tc<span class="number">.</span>QuadPart;</span><br><span class="line">    cout&lt;&lt;duration_time&lt;&lt;endl;</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;time; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(<span class="built_in">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">use</span>[i][k] == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="keyword">use</span>[i][k]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> *print_ans = new <span class="built_in">int</span>[len];</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;time; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(<span class="built_in">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp_loc = <span class="built_in">sum</span>[k]<span class="number">.</span>loc;</span><br><span class="line">            <span class="built_in">int</span> temp = <span class="keyword">use</span>[i][k];</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print_ans[temp_loc] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print_ans[temp_loc] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(<span class="built_in">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;print_ans[k]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(time == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> temp = <span class="keyword">use</span>[MAX_ANS-<span class="number">1</span>][i];</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print_ans[<span class="built_in">sum</span>[i]<span class="number">.</span>loc] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print_ans[<span class="built_in">sum</span>[i]<span class="number">.</span>loc] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;print_ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delete [] print_ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> w[<span class="number">16</span>] = &#123;<span class="number">0</span>,<span class="number">70</span>,<span class="number">73</span>,<span class="number">77</span>,<span class="number">80</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">90</span>,<span class="number">94</span>,<span class="number">98</span>,<span class="number">106</span>,<span class="number">1110</span>,<span class="number">113</span>,<span class="number">115</span>,<span class="number">118</span>,<span class="number">120</span>&#125;;<span class="comment">//商品的重量 </span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">16</span>] = &#123;<span class="number">0</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">150</span>,<span class="number">156</span>,<span class="number">163</span>,<span class="number">173</span>,<span class="number">184</span>,<span class="number">192</span>,<span class="number">201</span>,<span class="number">210</span>,<span class="number">214</span>,<span class="number">221</span>,<span class="number">229</span>,<span class="number">240</span>&#125;;<span class="comment">//商品的价值</span></span><br><span class="line"><span class="keyword">int</span> bagV = <span class="number">750</span>;        <span class="comment">//背包大小</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">16</span>][<span class="number">751</span>] = &#123; &#123; <span class="number">0</span> &#125; &#125;;        <span class="comment">//动态规划表</span></span><br><span class="line"><span class="keyword">int</span> item[<span class="number">7</span>];        <span class="comment">//最优解情况</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMax</span><span class="params">()</span> </span>&#123;<span class="comment">//动态规划</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= bagV; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt; w[i])</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findWhat</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;<span class="comment">//最优解情况</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i][j] == dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">item[i] = <span class="number">0</span>;</span><br><span class="line">findWhat(i - <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j - w[i] &gt;= <span class="number">0</span> &amp;&amp; dp[i][j] == dp[i - <span class="number">1</span>][j - w[i]] + v[i]) &#123;</span><br><span class="line">item[i] = <span class="number">1</span>;</span><br><span class="line">findWhat(i - <span class="number">1</span>, j - w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)<span class="comment">//最优解输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; item[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">findMax();</span><br><span class="line">findWhat(<span class="number">15</span>, <span class="number">750</span>);</span><br><span class="line">QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">    <span class="keyword">double</span> duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;duration_time&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多源最短路问题"><a class="markdownIt-Anchor" href="#多源最短路问题"></a> 多源最短路问题</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SUM 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 0x3f3f3f3f </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[MAX_SUM][MAX_SUM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i][j] = <span class="built_in">min</span>(m[i][j], m[i][k]+m[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX_SUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;MAX_SUM; k++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][k] = MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    fstream input_stream;</span><br><span class="line">    input_stream.<span class="built_in">open</span>(<span class="string">&quot;p0.txt&quot;</span>, ios::in);</span><br><span class="line">    <span class="keyword">while</span>(!input_stream.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> from, to;</span><br><span class="line">        <span class="keyword">double</span> sum;</span><br><span class="line">        input_stream&gt;&gt;from;</span><br><span class="line">        input_stream&gt;&gt;to;</span><br><span class="line">        input_stream&gt;&gt;sum;</span><br><span class="line">        m[from][to] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    input_stream.<span class="built_in">close</span>();</span><br><span class="line">    LARGE_INTEGER start_time, end_time, tc;</span><br><span class="line">    QueryPerformanceFrequency(&amp;tc);</span><br><span class="line">    QueryPerformanceCounter(&amp;start_time);</span><br><span class="line">    solve();</span><br><span class="line">    QueryPerformanceCounter(&amp;end_time);</span><br><span class="line">    <span class="keyword">double</span> duration_time = (<span class="keyword">double</span>)(end_time.QuadPart-start_time.QuadPart) / tc.QuadPart;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;duration_time&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="row">    <embed src="https://xinhecuican.github.io/pdf/算法设计与分析实验.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;子集和数问题&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="杂项" scheme="http://xinhecuican.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>内联汇编</title>
    <link href="http://xinhecuican.github.io/post/51e63dcf.html"/>
    <id>http://xinhecuican.github.io/post/51e63dcf.html</id>
    <published>2020-12-06T08:49:00.000Z</published>
    <updated>2020-12-06T10:02:11.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>内联汇编是在c语言代码中插入一段汇编语言，这在一些特殊的场合如操作系统中经常使用。有些时候我们想加快速度或者进行某些特殊的操作就可以使用内联汇编。</p><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><blockquote><p><strong>关键字</strong>： asm</p></blockquote><p>例</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;movl %eax, %ebx&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>其中，<strong>volatile</strong>的含义是告诉编译器这段代码不需要优化，原封不动的让他执行。</p><p>语法：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">asm(</span><br><span class="line">   汇编语言模板</span><br><span class="line">   : output operands <span class="regexp">/*可选*/</span></span><br><span class="line">   : input operands <span class="regexp">/*可选*/</span></span><br><span class="line">   : options     <span class="regexp">/*可选*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以只有output operands或只有input operands。但是如果有options，那么前面两个冒号都要打.</p><p>options表示我们最多使用哪些寄存器。</p><h2 id="汇编模板"><a class="markdownIt-Anchor" href="#汇编模板"></a> 汇编模板</h2><p>可以使用<a href="https://xinhecuican.github.io/post/1326.html">AT&amp;T语法</a>，也可以使用intel语法（没有测试过）。下面以AT&amp;T模板作为例子。</p><p>它的语法和和汇编语言完全类似，同样是寄存器用%，立即数用$, 内存访问用<code>()</code>。</p><p><strong>注意</strong>：</p><ul><li>如果有多行汇编语句，那么语句与语句之间要用\n\t分隔开</li><li>如果使用了%0,%1等标识，那么寄存器就需要用两个%%标识</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;movl %0, %%eax\n\t&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">&quot;pushl %%eax\n\t&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">    :<span class="string">&quot;a&quot;</span>(a)</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="输出和输入部分"><a class="markdownIt-Anchor" href="#输出和输入部分"></a> 输出和输入部分</h2><p>他们的格式都是 <code>&quot;restriction&quot;(value)</code>，其中restriction表示这个变量要使用哪个寄存器或者表示内存或者是立即数。而value就是外带的变量。</p><p>如果是输出部分，在restricttion前还要加个等号。如 “=a”(output)</p><p>在定义了输入和输出部分之后，就可以把这些变量用于汇编语句中了。我们可以用%0,%1…%9表示变量。也就是说最多有是个输入输出部分。例如</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">input</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">output</span> = <span class="number">1</span>;</span><br><span class="line">asm volatile(</span><br><span class="line">    <span class="string">&quot;addl %1, %0&quot;</span></span><br><span class="line">    :<span class="string">&quot;=r&quot;</span>(<span class="keyword">output</span>)</span><br><span class="line">    :<span class="string">&quot;r&quot;</span>(<span class="keyword">input</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面就是一个简单的1+1并且把值赋到output中。output是第0个，input第第一个，所以%0表示output,%1表示input.</p><h2 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h2><p>输入输出部分前面的限制有很多，这里列举一些常用的</p><table><thead><tr><th>限制</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>表示 eax,ax,ah,al</td></tr><tr><td>b</td><td>表示 ebx, …</td></tr><tr><td>c</td><td>表示 ecx, …</td></tr><tr><td>d</td><td>表示 edx, …</td></tr><tr><td>S</td><td>表示 esi</td></tr><tr><td>D</td><td>表示 edi</td></tr><tr><td>r</td><td>指定任意一个寄存器</td></tr><tr><td>m</td><td>表示内存</td></tr><tr><td>p</td><td>表示操作数是一个指针</td></tr><tr><td>X</td><td>可以是任意类型</td></tr><tr><td>i</td><td>立即数</td></tr><tr><td>数字0,1,2,…</td><td>表示这个操作数和前面的某个操作数相同，一般在输入和输出在同一个变量时使用</td></tr><tr><td>f</td><td>浮点数</td></tr><tr><td>&amp;</td><td>避免使用同一个寄存器</td></tr></tbody></table><p>访问内存方式：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> input = <span class="number">0x7fffffc</span>;</span><br><span class="line">asm <span class="keyword">volatile</span>(</span><br><span class="line">    &quot;movl %%eax, (%0)&quot;</span><br><span class="line">    : &quot;r&quot;(<span class="keyword">input</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">input = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">asm <span class="keyword">volatile</span> (&quot;addl %1,%0&quot;:&quot;+r&quot;(result):&quot;m&quot;(<span class="keyword">input</span>));</span><br></pre></td></tr></table></figure><p>一个具体应用</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">void (*handler)();</span><br><span class="line"><span class="function"><span class="title">handler</span> = myproc()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>handler;</span><br><span class="line">uint addr = (uint)*handler;</span><br><span class="line"><span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>esp -= <span class="number">4</span>;</span><br><span class="line">asm volatile(</span><br><span class="line">    <span class="string">&quot;movl %0, (%1)\n\t&quot;</span></span><br><span class="line">    : <span class="string">&quot;r&quot;</span>(<span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span><span class="function"><span class="title">eip</span>), &quot;r&quot;(myproc()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>esp)</span><br><span class="line">);</span><br><span class="line"><span class="function"><span class="title">myproc</span>()-&gt;</span><span class="function"><span class="title">tf</span>-&gt;</span>eip = addr;</span><br><span class="line"></span><br><span class="line">这段代码的作用是位于内核态时跳转到某一个函数，并且结束之后返回，asm中就是将返回地址存入栈中。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="c++" scheme="http://xinhecuican.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>文件系统</title>
    <link href="http://xinhecuican.github.io/post/1b9c8662.html"/>
    <id>http://xinhecuican.github.io/post/1b9c8662.html</id>
    <published>2020-11-23T23:40:00.000Z</published>
    <updated>2021-01-01T11:01:39.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h1><h2 id="文件的结构和类型"><a class="markdownIt-Anchor" href="#文件的结构和类型"></a> 文件的结构和类型</h2><p>文件在系统中其实就是一串二进制数，结尾有特殊的符号标识，而他的入口处由操作系统管理。</p><p>在linux系统中，文件的类型有目录文件，一般文件和特殊文件（如设备文件）等，这些文件在内容组织上各不相同，但是他们的基础构成还是上面说的。</p><h2 id="查找文件"><a class="markdownIt-Anchor" href="#查找文件"></a> 查找文件</h2><p>首先在linux中文件通过树形结构进行组织，在找到对应目录下的文件后就要打开文件了。linux目录中存放的i节点表，i节点中存放着一些文件的信息和文件的入口地址。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F1.PNG" alt="" />如图就是一些文件的属性，操作系统会根据自身需要选取某些属性。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F2.PNG" alt="" />这个图中就是i节点的结构，注意Point to Block data就是在磁盘中的位置</p><h2 id="文件在磁盘中的储存"><a class="markdownIt-Anchor" href="#文件在磁盘中的储存"></a> 文件在磁盘中的储存</h2><ul><li>第一种方法时每个文件在磁盘中有固定的位置，当然这种方法是不可行的，因为这样必须事先分配好大小，如果达到了事先分配的最大值后就无法继续增大。</li><li>第二种方法是通过一个链表组织。这种方法中链表在磁盘的前几个字节，然后i节点指向入口地址。它的缺点是如果想访问后面的节点必须把前面节点都扫一遍，并且因为他在磁盘中占有了位置，所以现在磁盘中所能容纳的文件字节数减少了，需要重新考虑对齐的问题。</li><li>第三种方法是在i节点中增加15*4个字节。它是12+1+1+1的结构。低12字节保存第0到11块的入口地址（如果一块大小矢1k的话，那么0-12k地址内容可以通过低12字节访问）。而第12个字节保存到下一个链表的指针，这个链表大小就是一页大小，也就是说保存着从12k开始到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn><mo>+</mo><mn>1024</mn><mo>∗</mo><mo stretchy="false">(</mo><mfrac><mn>1024</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">12+ 1024*(\frac{1024}{4})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>位置的数据。同样第13字节有两个页表，那么它保存着 1024 * 1024/4 * 1024/4大小的数据。以此类推,第二个图展示了它的结构</li></ul><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F3.PNG" alt="" /><br /><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F4.PNG" alt="" /></p><h1 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统</h1><p>不同的操作系统中有不同的文件系统。</p><ul><li>linux： minix, ext2, ext3, ext4, reiserFS, IBMJFS, xfxs</li><li>windows: FAT-16, FAT-32, FAT-12, exFat， NTFS</li></ul><p>不同的文件系统不一定兼容，下面以ext2作为例子来说明文件系统的结构。</p><p><strong>磁盘</strong>被分为若干块，它的大小可以是1024， 2048， 4096等等。磁盘块的大小是由操作系统决定的。</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F5.PNG" alt="" /></p><ul><li>超级块（superblock）是文件系统中的第一个块，其中存放着文件系统的一些信息如文件系统的根目录，挂载点，空闲块指针，空闲i节点指针。超级块坏了文件系统就坏了。</li></ul><blockquote><p>为了保证超级块坏的时候文件系统不至于崩溃，超级块一般由多个备份。</p></blockquote><ul><li>i节点和间接i节点表。这两个作用在上面说了</li><li>数据块（data Block)真正存储数据的块</li></ul><h2 id="空数据块位置"><a class="markdownIt-Anchor" href="#空数据块位置"></a> 空数据块位置</h2><p>每次操作系统想分配空间给一个文件时，首先要知道空的数据块在哪。</p><ul><li>一种办法是使用一个链表来维护空数据块，这种办法的问题是消耗太大</li><li>另一种办法是使用位图法，因为块是有编号的，如果对应位置是1表示不是空的。<img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F6.PNG" alt="" /></li></ul><h2 id="文件系统的创建和挂载"><a class="markdownIt-Anchor" href="#文件系统的创建和挂载"></a> 文件系统的创建和挂载</h2><p>可以使用<strong>mkfs</strong>命令进行文件系统的创建</p><blockquote><p><code>mkfs [-t type] [fs-options] &lt;device&gt; size</code></p></blockquote><p>例： mkfs -t ext4 /dev/sda6</p><p><strong>mount</strong>命令进行文件系统的挂载</p><p><a href="https://xinhecuican.github.io/post/35532.html">此命令可以看这篇文章中目录部分</a></p><p>例： mount /dev/lv100 /home/patsie</p><p><strong>注意</strong>：不同文件系统中i节点是不一样的，挂载时经历了一些转换过程，这时可以看到挂载进来的内容，但是该目录下原有内容被隐藏了，只有使用卸载命令<strong>umount</strong>才可以重新看到原有内容。</p><h1 id="磁盘及卷组管理"><a class="markdownIt-Anchor" href="#磁盘及卷组管理"></a> 磁盘及卷组管理</h1><p><a href="https://xinhecuican.github.io/post/7d1c86da.html">有关磁盘基础结构请看</a></p><p>首先磁盘分区有两种，分别是MBR和GPT（也就是C盘D盘之类的）</p><ul><li>MBR（Master Boot Record):<ul><li>位于第一个扇面</li><li>支持4个主分区，加上扩展分区最多也就支持32个分区</li><li>一个分区最大2T</li></ul></li><li>GPT（GUID Partition table):<ul><li>理论支持无限多个分区（实际上操作系统会限制）</li><li>最大支持18EB</li><li>需要操作系统支持和主板支持EFI/UEFI</li></ul></li></ul><p>直接磁盘分区有很多问题</p><ol><li>磁盘分区大小是固定的，很难改变（除非格式化）</li><li>受文件系统大小的限制（因为文件系统无法跨越设备，所以分区也不可以）</li><li>需要提前考虑大小</li></ol><p>LVM（逻辑卷管理）就是为了克服这些问题而产生的。他将物理设备分为若干物理卷，然后使用逻辑卷进行管理和分区。</p><blockquote><p>物理储存介质： 如磁盘等，在linux上是/dev/sda等设备文件<br />物理卷(PV): 相当于一个个磁盘分区，但是分区大小固定并且还有一些与LVM相关参数<br />卷组（VG）： 多个物理卷组成的储存池，也就是说可以让文件系统跨设备<br />逻辑卷（LV）： 从卷组中分出一些卷进行管理，可以在上面划分分区</p></blockquote><p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F7.PNG" alt="" /></p><p><strong>一些linux命令</strong></p><ul><li>fdisk： 创建分区 例如 fdisk /dev/sda</li><li>pvcreate:创建物理卷</li><li>vgcreate: 创建卷组 例如： vgcreate vg0 /dev/sda6(sda6是一个物理卷）</li><li>vgextend: 扩展卷组 例如： vgextend vg0 /dev/sdb1</li><li>lvcreate: 创建逻辑卷 例如： lvcreate -L 10G -n lv0 /dev/vg0（名字是lv0，大小是10G）</li><li>mkfs： 创建文件系统，现在是在逻辑卷中创造</li><li>lvextend: 扩大逻辑卷</li><li>resize2fs： 扩大文件系统</li><li>umount： 卸载文件系统，为减小大小做准备。</li><li>lvreduce： 减小逻辑卷大小。<strong>首先要减小文件系统大小，使用resize2fs命令</strong></li></ul><p>这些命令基本按照顺序把文件系统创建和增删过程说了出来。</p><p>基本过程： 创建硬盘分区-&gt;创建物理卷-&gt;创建卷组-&gt;创建逻辑卷-&gt;创建文件系统</p><p>扩大物理卷-&gt;扩散卷组-&gt;扩大逻辑卷-&gt;扩大文件系统</p><p>减小文件系统-&gt;减小逻辑卷…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>抽样分布定理证明</title>
    <link href="http://xinhecuican.github.io/post/74e7fdff.html"/>
    <id>http://xinhecuican.github.io/post/74e7fdff.html</id>
    <published>2020-11-18T11:02:00.000Z</published>
    <updated>2020-12-03T01:44:02.376Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>定理 ：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{(n-1)S^{2}}{\sigma^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>证明</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo>+</mo><mi>μ</mi><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mi>n</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mn>1</mn><msup><mi>σ</mi><mn>2</mn></msup></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mi>n</mi><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>σ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{(n-1)S^2}{\sigma^2} =&amp; \sum_{k=1}^n\frac{(x_i-\overline{x})^2}{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu +\mu - \overline{x})^2}{\sigma^2}\\    =&amp;\frac{1}{\sigma^2} \sum_{i=1}^{n}(( x_i-\mu)^2 - 2(x_i-\mu )(\bar{x} - \mu) + (\bar{x}-\mu)^2)\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2(\bar{x} - \mu)\sum_{i=1}^{n}(x_i-\mu ) + \sum_{i=1}^{n}(\bar{x}-\mu)^2\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2(\bar{x} - \mu)n(\frac{1}{n}\sum_{i=1}^{n}x_i -\mu\times n)+ \sum_{i=1}^{n}(\bar{x}-\mu)^2\\=&amp; \frac{1}{\sigma^2} \sum_{i=1}^{n}( x_i-\mu)^2 - 2n(\bar{x} - \mu)^2+ \sum_{i=1}^{n}(\bar{x}-\mu)^2\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} -\sum_{k=1}^n\frac{(\overline{x}-\mu)^2}{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} - \frac{n(\overline{x}-\mu)^2 }{\sigma^2}\\    =&amp; \sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} - \frac{(\overline{x}-\mu)^2}{\sigma^2 / \sqrt{n}}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:29.18381399999999em;vertical-align:-14.341906999999996em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:14.841906999999997em;"><span style="top:-16.841906999999996em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-13.588396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-10.334886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-7.105820999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-3.8767549999999993em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:-0.6476889999999995em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:2.581377em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:5.834886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span><span style="top:9.088396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:14.341906999999996em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:14.841906999999997em;"><span style="top:-16.841906999999996em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-13.588396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-10.334886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-7.105820999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8767549999999993em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.6476889999999995em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:2.581377em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:5.834886999999998em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:9.088396999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:14.341906999999996em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>∼</mo><msubsup><mi>X</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n\frac{(x_i - \mu)^2}{\sigma^2} \sim X_{n}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><msup><mi>σ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mo>∼</mo><msubsup><mi>X</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\frac{(\overline{x}-\mu)^2}{\sigma^2 / \sqrt{n}} \sim X_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.431388em;vertical-align:-0.9402800000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9402800000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi mathvariant="normal">与</mi><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">(x_i - \mu)^2 与 \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">与</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>相互独立，所以根据卡方分布可加性可得服从于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">X_{n-1}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;定理 ：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;k</summary>
      
    
    
    
    <category term="数学" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="概率论" scheme="http://xinhecuican.github.io/categories/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>回溯法和分支限界法</title>
    <link href="http://xinhecuican.github.io/post/a50b8908.html"/>
    <id>http://xinhecuican.github.io/post/a50b8908.html</id>
    <published>2020-11-09T08:25:00.000Z</published>
    <updated>2020-12-22T00:24:57.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="回溯法"><a class="markdownIt-Anchor" href="#回溯法"></a> 回溯法</h1><h2 id="回溯法概念"><a class="markdownIt-Anchor" href="#回溯法概念"></a> 回溯法概念</h2><p>回溯法是一种能避免不必要搜索的穷举式算法，适用于一些解空间相当大的问题。</p><p>它经常呈现一种树形结构，先进入左节点，当到了底部或者条件不满足时返回父节点并进入右节点。一个典型的例子就是<a href="https://xinhecuican.github.io/post/37663.html">深度优先搜索</a></p><p>如果不加限制条件直接搜索的话复杂度将是2^n。因此我们需要添加一些限界函数来减小搜索量。</p><p>限界函数一般有两个，一个是用来限制左支的，叫显式约数条件。另一种是限制是否搜索右支的，叫隐式约束条件。</p><p>n叉树模板：<img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%956.PNG" alt="" /></p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><h3 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h3><p><a href="https://xinhecuican.github.io/post/21624.html">01背包问题</a>最常见的办法是动态规划算法.这里介绍回溯法求解</p><ol><li>将物品按密度进行排序</li><li>设bestp是当前最好收益并初始化为负无穷</li><li>设bound = cp+r是效益值的上界。其中cp是这个节点的收益值，r是剩下所有物品的连续背包问题收益值（也就是说不满一件也可以装进去）</li><li>展开左子节点：<ul><li>如果$$cw+Wk &lt;= c$$, 则装入k,且cw += Wk, cp += pk Xk = 1(说明这个节点使用了）</li></ul></li><li>否则展开右节点：<ul><li>如果bound &lt;= bestp。则停止展开右子树（就算把剩余物品都放进去也抵不上它的收益）。否则就 xk = 0,然后继续搜索</li></ul></li></ol><p><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%951.PNG" alt="" /></p><h3 id="货箱装船问题"><a class="markdownIt-Anchor" href="#货箱装船问题"></a> 货箱装船问题</h3><p><strong>问题</strong>：给定载重量为 c 的货船，找一种装船的方法，使得装载的货箱数目最多。</p><p><strong>分析</strong></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">设<span class="keyword">cw</span>是已装载货物重量</span><br><span class="line"></span><br><span class="line">显式限界条件： 如果<span class="keyword">cw</span>+w(i) &gt; maxw 则杀死该左节点。</span><br><span class="line">隐式限界条件： 如果<span class="keyword">cw</span>+r &lt;= bestw，则停止展开右节点。r是剩余货物的重量。</span><br></pre></td></tr></table></figure><h1 id="分支限界法"><a class="markdownIt-Anchor" href="#分支限界法"></a> 分支限界法</h1><p>分支限界法也是一种穷举搜索算法。但是同样可以通过限界函数进行限界。一个典型例子就是广度优先搜索。</p><h2 id="旅行商问题"><a class="markdownIt-Anchor" href="#旅行商问题"></a> 旅行商问题</h2><p>首先说一下归约矩阵。</p><ul><li>行规约矩阵：找到每一行最小的数，然后让这一行都减去最小的数。</li><li>行规约数： 每一行最小的数求和</li><li>归约矩阵： 每一行做归约后每一列再做归约。归约数就是行规约数加上列归约数</li></ul><p>归约矩阵的性质：</p><ul><li>每一行每一列都必须有一个0</li><li>对于旅行商问题， 它的结果就是在归约矩阵中得到的结果加上归约数 W(f) = w’(f)+h</li></ul><p>例：<img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%951.PNG" alt="" /><br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%952.PNG" alt="" /></p><p>其中q12表示A’矩阵中第一行第二列的点，表示我们要先从1到2.</p><p>之后的h’表示去掉这一行这一列和qji为无穷后的矩阵的归约值。因为我们到过这个节点之后这一行这一列都不会再有点了，所以可以去掉。另外如果不是导数第二个节点的话也不可能回到起点。</p><p>找到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>的最小值后以这个点作为起始点除去这一行这一列进行下一步搜索。</p><p>现在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>最小，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta(4)(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>inf</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">+\inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">in<span style="margin-right:0.07778em;">f</span></span></span></span></span>并且将第四行提到第一行，之后重复上述过程。<br /><img src="/images/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%92%8C%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%953.PNG" alt="" /></p><p>之后一直重复上述步骤直到搜索完成。</p><p>使用行规约矩阵的目的在于提前知道一些信息来进行分支限界。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;回溯法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://xinhecuican.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="http://xinhecuican.github.io/post/eefe591f.html"/>
    <id>http://xinhecuican.github.io/post/eefe591f.html</id>
    <published>2020-10-23T10:36:00.000Z</published>
    <updated>2021-01-02T02:36:04.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>进程是正在运行的程序，它包含代码和执行状态（栈堆寄存器等）。而程序仅仅是一些静态的代码。一个程序可以生成多个进程（如记事本进程）。进程是资源分配最小单元</p><h1 id="linux系统进程"><a class="markdownIt-Anchor" href="#linux系统进程"></a> Linux系统进程</h1><p>Linux进程是采用进程树的方式。程序开始时创建一个零号进程，然后零号进程创建一号进程再由一号进程创建其他的进程。linux进程是一种树状结构，可以通过pstree命令查看进程树。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sys/types.h：储存了一些宏定义如<span class="keyword">pid_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>fork():创建当前进程的子进程，并且子进程和当前进程完全相同。</p></blockquote><p>返回值：返回两个返回值，如果返回值是零，代表当前在子进程中。如果返回值&gt;0,代表在父进程中并且返回值是子进程pid，如果返回值&lt;0,代表出错。</p><p><strong>注意</strong>： 这里复制子进程是采用copy on right的方式，即开始子进程与父进程完全相同，只有当子父进程之间有差异时才会额外开辟空间储存差异。</p><p>例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;this is the child process\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;this is the parent process\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getpid(): 获得pid</p></blockquote><blockquote><p>exec家族， 用于在子进程中调用系统中有的函数</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> execl(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execv(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execle(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ..., <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execve(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execlp(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> execvp(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span><br><span class="line"></span><br><span class="line">其中有p的代表会自动在系统路径中搜索，例如</span><br><span class="line">execlp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot; -l&quot;</span>, <span class="literal">NULL</span>)会执行ls -l指令，如果没有p，则需要/bin/ls</span><br><span class="line"></span><br><span class="line">v代表传入一个数组，这个字符数组加起来就是命令，最后以<span class="literal">NULL</span>结尾</span><br><span class="line"></span><br><span class="line">e代表绝对地址</span><br></pre></td></tr></table></figure><blockquote><p>int wait(int *status)： 会阻塞当前进程，直到找到了僵尸子进程（死了的子进程），之后就彻底杀死子进程并返回进程号，失败会返回-1。status可以设置成NULL，</p></blockquote><blockquote><p>pid_t waitpid(pid_t pid,int *status,int options): pid是子进程进程号，表示只等待这一个子进程，其他子进程终止仍处于阻塞状态。</p></blockquote><p>options有：</p><ul><li>WNOHANG(wait no hung)： 即使没有子进程退出，它也会立即返回</li><li>Returns information about a child process stopped by SIGTTIN,<br />SIGTTOU, SIGSSTP, and SIGTSTOP signals.(返回子进程被某些信号而停止的信息）</li></ul><h2 id="进程的状态"><a class="markdownIt-Anchor" href="#进程的状态"></a> 进程的状态</h2><p>进程的状态一般可以分为三大类：运行，就绪，阻塞。</p><p><strong>运行</strong>状态是指正在cpu中执行指令的进程。</p><p><strong>就绪</strong> 是指获得了除cpu意外所有资源，正在等待cpu的进程</p><p><strong>阻塞</strong> 是指因为某些原因放弃争夺cpu的进程</p><h2 id="进程的调度"><a class="markdownIt-Anchor" href="#进程的调度"></a> 进程的调度</h2><h3 id="批处理系统中的调度"><a class="markdownIt-Anchor" href="#批处理系统中的调度"></a> 批处理系统中的调度</h3><p>批处理系统就是不具备交互性，单纯完成任务的系统。这种系统一般需要考虑提高cpu利用率（早期计算机使用批处理系统）。批处理系统中的任务一般相对固定，所以可以大致知道它所需要花费的时间。</p><p><strong>周转时间</strong></p><p>周转时间  = 作业完成时刻 - 作业到达时刻 = 运行时间 + 等待时间</p><p><strong>带权周转时间</strong></p><p>带权周转时间 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">周</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{周转时间}{完成时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.739em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.394em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">完</span><span class="mord cjk_fallback mtight">成</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">周</span><span class="mord cjk_fallback mtight">转</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="先来先服务"><a class="markdownIt-Anchor" href="#先来先服务"></a> 先来先服务</h4><p>指的是先来的任务先进行服务，这种方式最大的问题是单位时间内可以执行的任务数量比较低。如果一个任务时间很短而前面有一个需要大量时间的任务，那么他将不得不花很长的时间去等待。</p><h4 id="最短时间优先"><a class="markdownIt-Anchor" href="#最短时间优先"></a> 最短时间优先</h4><p>指的是时间短的进程先来服务。但是这种方式可能让时间长的进程一直无法执行（如果中间一直插入时间短的进程的话）</p><h4 id="高响应率优先"><a class="markdownIt-Anchor" href="#高响应率优先"></a> 高响应率优先</h4><p>这种方法考虑了等待时间的影响，是对最短时间优先的改进。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">响</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">率</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mfrac><mrow><mi mathvariant="normal">周</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1</mn><mo>+</mo><mspace width="1em"/><mfrac><mrow><mi mathvariant="normal">等</mi><mi mathvariant="normal">待</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">任</mi><mi mathvariant="normal">务</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}响应率 =&amp; \frac{周转时间}{执行时间} \\      =&amp; 1 + \quad \frac{等待时间}{完成任务需要时间}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.652em;vertical-align:-1.5759999999999996em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0760000000000005em;"><span style="top:-4.236000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">响</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">率</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-2.4100000000000006em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5759999999999996em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0760000000000005em;"><span style="top:-4.236000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4100000000000006em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">任</span><span class="mord cjk_fallback">务</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">待</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5759999999999996em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过比较响应率，响应率高的先执行。</p><p>这种方法考虑了时间的影响，在时间短的进程先运行的同时不会让长进程无限制的等待。</p><h3 id="交互式系统中的调度"><a class="markdownIt-Anchor" href="#交互式系统中的调度"></a> 交互式系统中的调度</h3><p>交互式系统就是现在微机所使用的系统，在系统中需要运行的进程一般有很多，因此需要不停的将进程调入调出来让使用者感觉上进程是并行执行的。因此需要规定一个时间片避免进程无限制的执行。时间片到了会强制将当前进程调出然后从进程池中调入一个新的进程。在windows系统中时间片是15ms，linux系统中时间片是10ms</p><h4 id="轮转调度"><a class="markdownIt-Anchor" href="#轮转调度"></a> 轮转调度</h4><p>轮转调度是使用一个队列，运行完的进程放到队列的尾部，然后从队列的首部拉入一个进程执行。这种方法最大的问题是没有考虑到一些进程需要紧急执行（如火灾报警程序）</p><h4 id="优先级调度"><a class="markdownIt-Anchor" href="#优先级调度"></a> 优先级调度</h4><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1.PNG" alt="" /></p><p>如图，这是优先级调度的一种组织形式。数字低的是高优先级（windows或linux中），他会首先从高优先级查找，如果有待执行的程序就执行它。</p><p>在windows系统中，正常的优先级是80，低于80是高优先级，高于80是低优先级。如果高优先级较多，低优先级可能一直没有执行的机会。所以高优先级一般都是服务进程，在不需要服务的时候他们会阻塞，一旦有信号将他们唤醒他们便会优先执行。</p><p>有时还会对使用cpu时间长的程序进行惩罚。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Priority</span> = base + nice + CPU_PENALTY</span><br><span class="line"><span class="attribute">CPU_PENALTY</span> = CPU_USAGE * R</span><br><span class="line"><span class="attribute">CPU_USAGE</span> = CPU_USAGE * D</span><br><span class="line"></span><br><span class="line"><span class="attribute">CPU_USAGE</span> 是CPU使用次数，每过<span class="number">1</span>s（或其他时间）就会执行第三条指令防止CPU_USAGE一直增大。而CPU_PENALTY就是根据CPU_USAGE得来的。</span><br><span class="line"></span><br><span class="line"><span class="attribute">nice</span>是我们可以设置的优先级，在linux中有个nice命令可以在程序运行前设置优先级，范围是-<span class="number">20</span>-<span class="number">19</span>，非root用户只能变大不能变小。renice可以在运行时设置优先级</span><br></pre></td></tr></table></figure><h1 id="竞争条件和信号量"><a class="markdownIt-Anchor" href="#竞争条件和信号量"></a> 竞争条件和信号量</h1><p>进程之间有两种关系，协同和竞争。而怎么防止两个进程同时使用一个东西或如何通知其他进程便是多进程中需要考虑的问题</p><h2 id="引例"><a class="markdownIt-Anchor" href="#引例"></a> 引例</h2><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B2.PNG" alt="" /></p><p>这个队列是等待使用打印机的队列，out是即将被答应的文件。</p><p>我们可以假设这种情况，进程a刚刚访问in发现它是7但是这时时间片到了。它被迫退出cpu。此时进程b进入cpu发现in是7并且将文件放在7处。之后再回到a，a会把他的文件放在7处然后in++。这时b的文件就被覆盖掉了</p><h3 id="皮德森算法"><a class="markdownIt-Anchor" href="#皮德森算法"></a> 皮德森算法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B3.PNG" alt="" /></p><p>我们可以考虑这种情况，a进程到了turn = process处停止，b进程一路往下到了while，发现a进程对他有兴趣而终止。</p><p>而如果a到了turn = process终止，b也到turn = process终止，那么此时因为turn被改变，所以while第一个条件不满足，进入临界区。</p><p>这种算法可以解决竞争条件，但是首先它是对两个进程来说的，多个进程不好扩展，另外每次都要写这两个函数非常麻烦。</p><h3 id="tsl信号法"><a class="markdownIt-Anchor" href="#tsl信号法"></a> TSL信号法</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B4.PNG" alt="" /></p><p>此方法使用了一条汇编指令TSL，这条指令执行了两个内容<code>mov lock, %register;mov $1, %lock ；</code>前面相当于读锁的内容，后面是更改锁的值</p><blockquote><p>这条指令和上面例子的区别是这是<strong>原子指令</strong>，也就是说要么都不做，要么必须做完，时钟中断不会产生干扰。</p></blockquote><h2 id="pv操作"><a class="markdownIt-Anchor" href="#pv操作"></a> PV操作</h2><p>更为常用的方法是使用pv操作，p就使信号量-1，v就使信号量+1.</p><p><strong>信号量可正可负</strong></p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B5.PNG" alt="" /></p><p>信号量可正可负代表有一个等待队列，信号量为负时代表有多少个进程正在等待。</p><p>**信号量只有1或0</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">P(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(!s)</span><br><span class="line">    s--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V(Semaphore e)</span><br><span class="line">&#123;</span><br><span class="line">    s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： pv操作是操作系统提供的，他也是原子操作。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><strong>生产者消费者问题</strong></p><p>有一个生产者和消费者并且有一个队列可以存放生产者生产的产品。</p><p>一个普通的办法是</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#define N <span class="number">100</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> producer(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        item = produce_item();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == N)sleep();</span><br><span class="line">        insert_item(item);</span><br><span class="line">        <span class="keyword">count</span> = <span class="keyword">count</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == <span class="number">1</span>)wakeup(consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> consumer(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep();</span><br><span class="line">        &#125;</span><br><span class="line">        item = remove_item();</span><br><span class="line">        <span class="keyword">count</span> -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">count</span> == N-<span class="number">1</span>)wakeup(producer);</span><br><span class="line">        consume_item(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法是有问题的。假如消费者先运行，发现count == 0，然后发生时钟中断，之后生产者生产一个物品并发送wakeup信号，但这个时候consumer并没有睡眠，所以这个信号是没有用的。之后consumer睡眠，然后生产者一直生产物品也进行睡眠。这就产生了死锁。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#define N <span class="number">100</span></span><br><span class="line">semophore mutex = <span class="number">1</span>;</span><br><span class="line">semophore empty = N;</span><br><span class="line">semophore full = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">void producer(void)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> item;</span><br><span class="line">    <span class="keyword">while</span>(TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        item = produce<span class="constructor">_item()</span>;</span><br><span class="line">        <span class="constructor">P(<span class="params">empty</span>)</span>;</span><br><span class="line">        <span class="constructor">P(<span class="params">mutex</span>)</span>;</span><br><span class="line">        insert<span class="constructor">_item(<span class="params">item</span>)</span>;</span><br><span class="line">        <span class="constructor">V(<span class="params">mutex</span>)</span>;</span><br><span class="line">        <span class="constructor">V(<span class="params">full</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">另外一个类似</span><br></pre></td></tr></table></figure><p>这里empty和full也可以变成一个信号量，但是P的逻辑需要更改。empty初始值是N，每次生产一个就会减一，当empty变成0也就是满的时候就会阻塞。</p><p><strong>哲学家就餐问题</strong></p><p>哲学家问题是五个哲学家五根筷子，有五盘面，每个哲学家从左边和右边各拿一个筷子就可以吃到面，问怎样才可以让所有哲学家都吃到面。</p><p>如果完全不加控制，可能会出现五个人同时拿起左边筷子又同时拿起右边筷子的情况，这样就会饿死。</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B6.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B7.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B8.PNG" alt="" /></p><p>这里使用了信号量mutex保证同一时间只有一个人试图拿筷子</p><p><strong>读写问题</strong></p><p>读写问题是同一时间可以有多个读的，但是同一时间最多有一个写的，如果有人在读那么写的就要等待</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B9.PNG" alt="" /><br /><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B10.PNG" alt="" /></p><p>这是读者优先的策略，还有写者优先和公平竞争。</p><p><strong>写者优先</strong></p><p>写者优先指的是可以有多个写，一旦有人在写就阻塞读。</p><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">reader</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">p</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">readcnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">p</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">readcnt</span>++;</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">    <span class="title">do_something</span>();</span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">readcnt</span>--;</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">readcnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">v</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">readcntsign</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="variable">writer</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">writecntsign</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">p</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">writecnt</span>++;</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    <span class="title">do_something</span>();</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">file</span>);</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">p</span>(<span class="variable">writecntsign</span>);</span></span><br><span class="line"><span class="function">    <span class="variable">writecntsign</span>--;</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">writecnt</span> == <span class="number">0</span>)</span></span><br><span class="line">        <span class="function"><span class="title">v</span>(<span class="variable">read</span>);</span></span><br><span class="line"><span class="function">    <span class="title">v</span>(<span class="variable">writecntsign</span>);</span></span><br></pre></td></tr></table></figure><p><strong>公平竞争</strong></p><p>公平急诊就是两者优先级相同，谁先来谁先进行。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/* 读者队列初始值为0，其他资源初始值为1*/</span></span><br><span class="line">int readCount = <span class="number">0</span>;</span><br><span class="line">semaphore keySignal = <span class="number">1</span>;</span><br><span class="line">semaphore readCountSignal = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">reader()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(true)</span><br><span class="line">    &#123;</span><br><span class="line">      wait(keySignal);        <span class="regexp">//</span>申请令牌</span><br><span class="line">      wait(readCountSignal);  <span class="regexp">//</span>申请计数器资源</span><br><span class="line">      <span class="keyword">if</span>(!readCount)          <span class="regexp">//</span>为零则申请文件资源</span><br><span class="line">         wait(fileSrc);</span><br><span class="line">      readCount++;</span><br><span class="line">      signal(readCountSignal); <span class="regexp">//</span>释放计数器资源</span><br><span class="line">      signal(keySignale);      <span class="regexp">//</span>释放令牌</span><br><span class="line"> </span><br><span class="line">      ...</span><br><span class="line">      perform read operation  <span class="regexp">//</span>执行临界区代码</span><br><span class="line">      ...</span><br><span class="line">  </span><br><span class="line">      wait(readCountSignal);  <span class="regexp">//</span>申请计数器资源</span><br><span class="line">      readCount--;</span><br><span class="line">      <span class="keyword">if</span>(!readCount)                <span class="regexp">//</span>为零则释放文件资源</span><br><span class="line">         signal(fileSrc);</span><br><span class="line">    signal(readCountSignal); <span class="regexp">//</span>释放读者计数器资源</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">writer()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">while</span>(true)</span><br><span class="line">     &#123;</span><br><span class="line">        wait(keySignal);     <span class="regexp">//</span>申请令牌</span><br><span class="line">        wait(fileSrc);       <span class="regexp">//</span>申请文件资源</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        perform write operation <span class="regexp">//</span>执行临界区代码</span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        signal(fileSrc);   <span class="regexp">//</span>释放文件资源</span><br><span class="line">        signal(keysignal); <span class="regexp">//</span>释放令牌</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如一个读者先来，然后来了一个写者。这时写者因为申请不到filesrc而被阻塞。这时再来一个读者，读者因为申请不到key而被阻塞。于是第一个读者执行完成之后释放file。然后写者执行，然后读者再执行。</p><h2 id="进程间通讯"><a class="markdownIt-Anchor" href="#进程间通讯"></a> 进程间通讯</h2><ul><li>给进程发信号，但是信号只有63种并且有些还不能使用所以这种方法一般不使用。</li><li>使用进程间通讯的函数<img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B11.PNG" alt="" /></li></ul><p>这些是进程间通讯的信号量，和下面线程间通讯不同。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/ipc.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/sem.h&gt;</span></span><br><span class="line">+int semget(key_t key, int nesms, int semflg);key是信号量键值，nesm是创建信号量数量， semflg如果是IPC_EXCL创建唯一一个信号量，如果键值已经存在，那么就会出错。而IPC_CRATE即使存在也不会出错.返回semid</span><br><span class="line">+int semctl(int semid, int semnum, int cmd, <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>): 删除或调整信号量，具体使用看下面</span></span><br><span class="line">+int semop(int semid, <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> *<span class="title">sops</span>, <span class="title">size_t</span> <span class="title">nsops</span>):<span class="title">nsop</span>是操作信号量数目（一般是1），结构体结构看下面</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">int val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">unsigned short int *array;</span><br><span class="line">/*<span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *<span class="title">__buf</span>;</span>*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">struct sembuf &#123;</span></span><br><span class="line"><span class="regexp">short sem_num;</span></span><br><span class="line"><span class="regexp">short sem_op;</span></span><br><span class="line"><span class="regexp">short sem_flg;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">static void sem_del(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    union semun sem_union;</span></span><br><span class="line"><span class="regexp">    if (semctl(sem_id, 0, IPC_RMID, sem_union) == -1)</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;Failed to delete semaphore\n&quot;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">int sem_p(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    struct sembuf sem_b;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_num = 0;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_op = -1; /</span>* P() *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    sem_b.sem_flg = SEM_UNDO;/</span><span class="regexp">/进程结束而信号量没释放时，会自动释放信号量</span></span><br><span class="line"><span class="regexp">    if (semop(sem_id, &amp;sem_b, 1) == -1) &#123;</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;semaphore_p failed\n&quot;);</span></span><br><span class="line"><span class="regexp">        return(0);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return(1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">int sem_v(semaphore sem_id)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    struct sembuf sem_b;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_num = 0;</span></span><br><span class="line"><span class="regexp">    sem_b.sem_op = 1; /</span>* V() *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    sem_b.sem_flg = SEM_UNDO;</span></span><br><span class="line"><span class="regexp">    if (semop(sem_id, &amp;sem_b, 1) == -1) &#123;</span></span><br><span class="line"><span class="regexp">        fprintf(stderr, &quot;semaphore_v failed\n&quot;);</span></span><br><span class="line"><span class="regexp">        return(0);</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">   return(1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h1><p>线程可以看成比较小的进程，有自己的状态（寄存器和参数等），也会有一些可以被多个线程共享的参数（全局变量）。线程使独立运行和独立调度最小单元。线程可以分为用户级线程和内核级线程和混合线程三种方式。</p><ul><li>用户级线程： 这种线程不需要内核参与调度。优点是切换快（和函数调用类似），可以在不支持内核级线程的操作系统中执行。但是有一个缺点就是有一个线程被阻塞，那么其余该进程线程也会被阻塞-<strong>在操作系统层面上只会看到一个进程</strong>。</li><li>内核级线程，由内核参与线程的调度。优点是一个线程被阻塞，那么其他的线程不会被阻塞，缺点是线程间切换所需时间多（要清空高速缓存等）</li></ul><p>现在操作系统一般使用内核级线程</p><h2 id="linux线程编程-c语言"><a class="markdownIt-Anchor" href="#linux线程编程-c语言"></a> linux线程编程 C语言</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">头文件&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">线程创建</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> pthread_create (pthread_t *__restrict __newthread,</span><br><span class="line">   <span class="keyword">const</span> pthread_attr_t *__restrict __attr,</span><br><span class="line">   <span class="keyword">void</span> *(*__start_routine) (<span class="keyword">void</span> *),</span><br><span class="line">   <span class="keyword">void</span> *__restrict __arg) </span><br><span class="line">第一个参数是指向这个线程的指针。第二个参数设置线程的属性，一般设置成<span class="literal">NULL</span>。第三个参数是这个线程运行时所运行的函数。第四个参数是运行时函数的参数。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span>* test(<span class="keyword">void</span>* args)</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;this is the arguments-%s&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    pthread_t p;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, test, <span class="string">&quot;arg1&quot;</span>);</span><br><span class="line">    pthread_join(p, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出： <span class="keyword">this</span> is the arguments-arg1</span><br></pre></td></tr></table></figure><ul><li><code>int pthread_join(pthread_t thread, void **retval);</code>.它的作用是让主线程等待某个线程结束再执行。retval是线程结束后的返回值，可以设置成NULL。</li></ul><p>需要使用pthread_join的原因是主线程结束这个程序就结束了，这时候其他线程不一定执行完成。</p><ul><li><p>线程信号量 头文件pthread.h</p><ul><li>pthread_mutex_t lock_put;//信号量创建</li><li>pthread_mutex_lock(&amp;lock_put);</li><li>pthread_mutex_unlock(&amp;lock_put);</li><li>pthread_mutex_init(&amp;lock_put, NULL);//初始化，后面一般是NULL,当然也可以是下列值<ul><li><p>PTHREAD_MUTEX_TIMED_NP，这是缺省值，也就是普通锁。当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。</p></li><li><p>PTHREAD_MUTEX_RECURSIVE_NP，嵌套锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</p></li><li><p>PTHREAD_MUTEX_ERRORCHECK_NP，检错锁，如果同一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同。这样就保证当不允许多次加锁时不会出现最简单情况下的死锁。</p></li><li><p>PTHREAD_MUTEX_ADAPTIVE_NP，适应锁，动作最简单的锁类型，仅等待解锁后重新竞争。</p></li></ul></li></ul></li><li><p>线程信号量2 头文件semaphore.h</p><ul><li>int sem_init (sem_t *sem , int pshared, unsigned int value);初始化,pshared固定是0来表示线程间通讯<ul><li>value - 信号量 sem 的初始值。</li></ul></li><li>int sem_post(sem_t *sem); 加1</li><li>int sem_wait(sem_t *sem); 减1</li><li>int sem_destroy(sem_t *sem); 销毁</li></ul></li><li><p>屏障： 屏障是当不满足条件时阻塞线程，满足条件之后再一起释放</p><ul><li>pthread_cond_t   cond; 创建</li><li><code>int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr)</code>： 初始化，但是Linux中cond_attr并没有实现，所以直接NULL</li><li><code>int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)</code>  : 等待,注意 还必须要有一个互斥量，只有拿到了互斥量才可以执行等待，并且与此同时会释放mutex。</li><li>pthread_cond_signal(): 激活一个等待线程</li><li>pthread_cond_broadcast()：激活所有等待线程，要注意激活后是从等待位置开始而不是从broadcast位置开始。</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> t = bstate.round;</span><br><span class="line">    <span class="keyword">assert</span> (i<span class="operator"> == </span>t);</span><br><span class="line">    </span><br><span class="line">    pthread<span class="constructor">_mutex_lock(&amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    bstate.nthread++;</span><br><span class="line">    <span class="keyword">if</span>(bstate.nthread &lt; nthread)<span class="comment">//没都到就待着</span></span><br><span class="line">    &#123;</span><br><span class="line">    pthread<span class="constructor">_cond_wait(&amp;<span class="params">bstate</span>.<span class="params">barrier_cond</span>, &amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//到了就全部激活</span></span><br><span class="line">    &#123;</span><br><span class="line">    bstate.nthread = <span class="number">0</span>;</span><br><span class="line">    bstate.round++;</span><br><span class="line">    pthread<span class="constructor">_cond_broadcast(&amp;<span class="params">bstate</span>.<span class="params">barrier_cond</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread<span class="constructor">_mutex_unlock(&amp;<span class="params">bstate</span>.<span class="params">barrier_mutex</span>)</span>;</span><br><span class="line">    usleep(random<span class="literal">()</span> % <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="死锁问题"><a class="markdownIt-Anchor" href="#死锁问题"></a> 死锁问题</h1><p>死锁条件：</p><ul><li>互斥条件： 一个资源只可以被一个进程占有</li><li>保持和等待条件： 一个进程因请求而进入阻塞时，对自身已获得的资源不放。</li><li>无抢占条件（抢占就是在一定条件下可以抢夺这个资源，如CPU就是抢占条件）</li><li>循环等待条件： 形成首尾相接的环。如下</li></ul><p><img src="/images/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B12.PNG" alt="" /></p><p>如图，圆代表进程，方形代表资源，由方形指向圆代表这个进程有这个资源，由圆指向方形代表这个进程需要这个资源。如果形成环路就代表出现了死锁。</p><p>资源按需分配可以破坏循环等待条件。</p><p>死锁解决方法：</p><ul><li>忽略问题</li><li>检测复原，例如隔多少分钟产生一个备份，一旦死锁就让某个进程回到这个备份，相应资源也会被释放</li><li>杀死某个进程释放资源。例如Spooling 技术。假脱机技术。为临界资源增加一个等待队列，使其好像可以被共享使用，如打印机。 当死锁发生时，杀死运行时间较短的进程，损失较小，因为容易恢复。</li><li>动态避免通过小心的资源分配</li></ul><h2 id="银行家算法"><a class="markdownIt-Anchor" href="#银行家算法"></a> 银行家算法</h2><p>银行家算法是通过资源分配来避免（不是预防）死锁的。并且没有破坏死锁的任何一个条件</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B13.PNG" alt="" /></p><p>首先要知道总共有多少资源，已经分配了多少资源，总共还剩多少资源，还需要多少资源。</p><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B14.PNG" alt="" /></p><p>总共有(10, 5, 7)个资源可以使用</p><p><strong>现在还有(3, 2, 2)资源可以使用</strong></p><p>之后一旦有进程请求就先把资源给他。如果资源不够就不给，如果资源够就用剩下的资源进行安全状态检查。</p><p>安全状态检查就是看看现有资源可以分配给哪个进程，有就把资源给他然后回收这个进程资源（不用考虑其他进程还会申请资源）。然后用这些资源再进行分配，如果最后有进程分配不了则说明这个状态不安全。</p><ul><li>例如p4申请了(2, 1, 0)资源，先把资源给他，那么现在还有(1, 1, 2)资源可以使用，p4变成(2, 2, 1)先把资源给p3然后回收，那么p3完成，剩余资源变成（3, 2, 3)</li><li>把资源给p1, 剩余资源变成(5, 3, 3)</li><li>资源给p4，剩余资源变成（7， 4， 5）</li><li>之后就一步一步分配</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="计算机系统基础" scheme="http://xinhecuican.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
